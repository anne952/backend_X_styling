
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Commande
 * 
 */
export type Commande = $Result.DefaultSelection<Prisma.$CommandePayload>
/**
 * Model Payement
 * 
 */
export type Payement = $Result.DefaultSelection<Prisma.$PayementPayload>
/**
 * Model LigneCommande
 * 
 */
export type LigneCommande = $Result.DefaultSelection<Prisma.$LigneCommandePayload>
/**
 * Model Produit
 * 
 */
export type Produit = $Result.DefaultSelection<Prisma.$ProduitPayload>
/**
 * Model Categorie
 * 
 */
export type Categorie = $Result.DefaultSelection<Prisma.$CategoriePayload>
/**
 * Model Couleur
 * 
 */
export type Couleur = $Result.DefaultSelection<Prisma.$CouleurPayload>
/**
 * Model Like
 * 
 */
export type Like = $Result.DefaultSelection<Prisma.$LikePayload>
/**
 * Model CartItem
 * 
 */
export type CartItem = $Result.DefaultSelection<Prisma.$CartItemPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  client: 'client',
  vendeur: 'vendeur',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Status: {
  enAttente: 'enAttente',
  rupture: 'rupture',
  en_cours_pour_la_livraison: 'en_cours_pour_la_livraison'
};

export type Status = (typeof Status)[keyof typeof Status]


export const MoyenDePayement: {
  Tmoney: 'Tmoney',
  Flooz: 'Flooz'
};

export type MoyenDePayement = (typeof MoyenDePayement)[keyof typeof MoyenDePayement]


export const Taille: {
  L: 'L',
  S: 'S',
  M: 'M',
  XL: 'XL',
  XXL: 'XXL',
  XXXL: 'XXXL'
};

export type Taille = (typeof Taille)[keyof typeof Taille]


export const TypeCategorie: {
  Homme: 'Homme',
  Femme: 'Femme',
  Enfant: 'Enfant'
};

export type TypeCategorie = (typeof TypeCategorie)[keyof typeof TypeCategorie]


export const TypeCouture: {
  HOMME: 'HOMME',
  FEMME: 'FEMME',
  ENFANT: 'ENFANT',
  MIXTE: 'MIXTE'
};

export type TypeCouture = (typeof TypeCouture)[keyof typeof TypeCouture]


export const Specialite: {
  HauteCouture: 'HauteCouture',
  PretAPorter: 'PretAPorter',
  SurMesure: 'SurMesure',
  Retouche: 'Retouche'
};

export type Specialite = (typeof Specialite)[keyof typeof Specialite]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type MoyenDePayement = $Enums.MoyenDePayement

export const MoyenDePayement: typeof $Enums.MoyenDePayement

export type Taille = $Enums.Taille

export const Taille: typeof $Enums.Taille

export type TypeCategorie = $Enums.TypeCategorie

export const TypeCategorie: typeof $Enums.TypeCategorie

export type TypeCouture = $Enums.TypeCouture

export const TypeCouture: typeof $Enums.TypeCouture

export type Specialite = $Enums.Specialite

export const Specialite: typeof $Enums.Specialite

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commande`: Exposes CRUD operations for the **Commande** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commandes
    * const commandes = await prisma.commande.findMany()
    * ```
    */
  get commande(): Prisma.CommandeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payement`: Exposes CRUD operations for the **Payement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payements
    * const payements = await prisma.payement.findMany()
    * ```
    */
  get payement(): Prisma.PayementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ligneCommande`: Exposes CRUD operations for the **LigneCommande** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LigneCommandes
    * const ligneCommandes = await prisma.ligneCommande.findMany()
    * ```
    */
  get ligneCommande(): Prisma.LigneCommandeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produit`: Exposes CRUD operations for the **Produit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produits
    * const produits = await prisma.produit.findMany()
    * ```
    */
  get produit(): Prisma.ProduitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categorie`: Exposes CRUD operations for the **Categorie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categorie.findMany()
    * ```
    */
  get categorie(): Prisma.CategorieDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.couleur`: Exposes CRUD operations for the **Couleur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Couleurs
    * const couleurs = await prisma.couleur.findMany()
    * ```
    */
  get couleur(): Prisma.CouleurDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cartItem`: Exposes CRUD operations for the **CartItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartItems
    * const cartItems = await prisma.cartItem.findMany()
    * ```
    */
  get cartItem(): Prisma.CartItemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Review: 'Review',
    Commande: 'Commande',
    Payement: 'Payement',
    LigneCommande: 'LigneCommande',
    Produit: 'Produit',
    Categorie: 'Categorie',
    Couleur: 'Couleur',
    Like: 'Like',
    CartItem: 'CartItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "review" | "commande" | "payement" | "ligneCommande" | "produit" | "categorie" | "couleur" | "like" | "cartItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Commande: {
        payload: Prisma.$CommandePayload<ExtArgs>
        fields: Prisma.CommandeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommandeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommandeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>
          }
          findFirst: {
            args: Prisma.CommandeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommandeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>
          }
          findMany: {
            args: Prisma.CommandeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>[]
          }
          create: {
            args: Prisma.CommandeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>
          }
          createMany: {
            args: Prisma.CommandeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommandeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>[]
          }
          delete: {
            args: Prisma.CommandeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>
          }
          update: {
            args: Prisma.CommandeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>
          }
          deleteMany: {
            args: Prisma.CommandeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommandeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommandeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>[]
          }
          upsert: {
            args: Prisma.CommandeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandePayload>
          }
          aggregate: {
            args: Prisma.CommandeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommande>
          }
          groupBy: {
            args: Prisma.CommandeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommandeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommandeCountArgs<ExtArgs>
            result: $Utils.Optional<CommandeCountAggregateOutputType> | number
          }
        }
      }
      Payement: {
        payload: Prisma.$PayementPayload<ExtArgs>
        fields: Prisma.PayementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>
          }
          findFirst: {
            args: Prisma.PayementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>
          }
          findMany: {
            args: Prisma.PayementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>[]
          }
          create: {
            args: Prisma.PayementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>
          }
          createMany: {
            args: Prisma.PayementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>[]
          }
          delete: {
            args: Prisma.PayementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>
          }
          update: {
            args: Prisma.PayementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>
          }
          deleteMany: {
            args: Prisma.PayementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>[]
          }
          upsert: {
            args: Prisma.PayementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayementPayload>
          }
          aggregate: {
            args: Prisma.PayementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayement>
          }
          groupBy: {
            args: Prisma.PayementGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayementGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayementCountArgs<ExtArgs>
            result: $Utils.Optional<PayementCountAggregateOutputType> | number
          }
        }
      }
      LigneCommande: {
        payload: Prisma.$LigneCommandePayload<ExtArgs>
        fields: Prisma.LigneCommandeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LigneCommandeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LigneCommandeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>
          }
          findFirst: {
            args: Prisma.LigneCommandeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LigneCommandeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>
          }
          findMany: {
            args: Prisma.LigneCommandeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>[]
          }
          create: {
            args: Prisma.LigneCommandeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>
          }
          createMany: {
            args: Prisma.LigneCommandeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LigneCommandeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>[]
          }
          delete: {
            args: Prisma.LigneCommandeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>
          }
          update: {
            args: Prisma.LigneCommandeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>
          }
          deleteMany: {
            args: Prisma.LigneCommandeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LigneCommandeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LigneCommandeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>[]
          }
          upsert: {
            args: Prisma.LigneCommandeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LigneCommandePayload>
          }
          aggregate: {
            args: Prisma.LigneCommandeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLigneCommande>
          }
          groupBy: {
            args: Prisma.LigneCommandeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LigneCommandeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LigneCommandeCountArgs<ExtArgs>
            result: $Utils.Optional<LigneCommandeCountAggregateOutputType> | number
          }
        }
      }
      Produit: {
        payload: Prisma.$ProduitPayload<ExtArgs>
        fields: Prisma.ProduitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProduitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProduitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findFirst: {
            args: Prisma.ProduitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProduitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findMany: {
            args: Prisma.ProduitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          create: {
            args: Prisma.ProduitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          createMany: {
            args: Prisma.ProduitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProduitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          delete: {
            args: Prisma.ProduitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          update: {
            args: Prisma.ProduitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          deleteMany: {
            args: Prisma.ProduitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProduitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProduitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          upsert: {
            args: Prisma.ProduitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          aggregate: {
            args: Prisma.ProduitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduit>
          }
          groupBy: {
            args: Prisma.ProduitGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProduitCountArgs<ExtArgs>
            result: $Utils.Optional<ProduitCountAggregateOutputType> | number
          }
        }
      }
      Categorie: {
        payload: Prisma.$CategoriePayload<ExtArgs>
        fields: Prisma.CategorieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategorieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategorieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          findFirst: {
            args: Prisma.CategorieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategorieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          findMany: {
            args: Prisma.CategorieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>[]
          }
          create: {
            args: Prisma.CategorieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          createMany: {
            args: Prisma.CategorieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategorieCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>[]
          }
          delete: {
            args: Prisma.CategorieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          update: {
            args: Prisma.CategorieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          deleteMany: {
            args: Prisma.CategorieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategorieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategorieUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>[]
          }
          upsert: {
            args: Prisma.CategorieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          aggregate: {
            args: Prisma.CategorieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategorie>
          }
          groupBy: {
            args: Prisma.CategorieGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategorieGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategorieCountArgs<ExtArgs>
            result: $Utils.Optional<CategorieCountAggregateOutputType> | number
          }
        }
      }
      Couleur: {
        payload: Prisma.$CouleurPayload<ExtArgs>
        fields: Prisma.CouleurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CouleurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CouleurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>
          }
          findFirst: {
            args: Prisma.CouleurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CouleurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>
          }
          findMany: {
            args: Prisma.CouleurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>[]
          }
          create: {
            args: Prisma.CouleurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>
          }
          createMany: {
            args: Prisma.CouleurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CouleurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>[]
          }
          delete: {
            args: Prisma.CouleurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>
          }
          update: {
            args: Prisma.CouleurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>
          }
          deleteMany: {
            args: Prisma.CouleurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CouleurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CouleurUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>[]
          }
          upsert: {
            args: Prisma.CouleurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouleurPayload>
          }
          aggregate: {
            args: Prisma.CouleurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCouleur>
          }
          groupBy: {
            args: Prisma.CouleurGroupByArgs<ExtArgs>
            result: $Utils.Optional<CouleurGroupByOutputType>[]
          }
          count: {
            args: Prisma.CouleurCountArgs<ExtArgs>
            result: $Utils.Optional<CouleurCountAggregateOutputType> | number
          }
        }
      }
      Like: {
        payload: Prisma.$LikePayload<ExtArgs>
        fields: Prisma.LikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findFirst: {
            args: Prisma.LikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findMany: {
            args: Prisma.LikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          create: {
            args: Prisma.LikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          createMany: {
            args: Prisma.LikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          delete: {
            args: Prisma.LikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          update: {
            args: Prisma.LikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          deleteMany: {
            args: Prisma.LikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          upsert: {
            args: Prisma.LikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          aggregate: {
            args: Prisma.LikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLike>
          }
          groupBy: {
            args: Prisma.LikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeCountArgs<ExtArgs>
            result: $Utils.Optional<LikeCountAggregateOutputType> | number
          }
        }
      }
      CartItem: {
        payload: Prisma.$CartItemPayload<ExtArgs>
        fields: Prisma.CartItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findFirst: {
            args: Prisma.CartItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findMany: {
            args: Prisma.CartItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          create: {
            args: Prisma.CartItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          createMany: {
            args: Prisma.CartItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          delete: {
            args: Prisma.CartItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          update: {
            args: Prisma.CartItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          deleteMany: {
            args: Prisma.CartItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          upsert: {
            args: Prisma.CartItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          aggregate: {
            args: Prisma.CartItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartItem>
          }
          groupBy: {
            args: Prisma.CartItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartItemCountArgs<ExtArgs>
            result: $Utils.Optional<CartItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: UsersOmit
    review?: ReviewOmit
    commande?: CommandeOmit
    payement?: PayementOmit
    ligneCommande?: LigneCommandeOmit
    produit?: ProduitOmit
    categorie?: CategorieOmit
    couleur?: CouleurOmit
    like?: LikeOmit
    cartItem?: CartItemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    commande: number
    produitsVendus: number
    likes: number
    cartItems: number
    authoredReviews: number
    vendeurReviews: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | UsersCountOutputTypeCountCommandeArgs
    produitsVendus?: boolean | UsersCountOutputTypeCountProduitsVendusArgs
    likes?: boolean | UsersCountOutputTypeCountLikesArgs
    cartItems?: boolean | UsersCountOutputTypeCountCartItemsArgs
    authoredReviews?: boolean | UsersCountOutputTypeCountAuthoredReviewsArgs
    vendeurReviews?: boolean | UsersCountOutputTypeCountVendeurReviewsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCommandeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountProduitsVendusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAuthoredReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountVendeurReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type CommandeCountOutputType
   */

  export type CommandeCountOutputType = {
    ligneCommande: number
    payement: number
  }

  export type CommandeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ligneCommande?: boolean | CommandeCountOutputTypeCountLigneCommandeArgs
    payement?: boolean | CommandeCountOutputTypeCountPayementArgs
  }

  // Custom InputTypes
  /**
   * CommandeCountOutputType without action
   */
  export type CommandeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeCountOutputType
     */
    select?: CommandeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommandeCountOutputType without action
   */
  export type CommandeCountOutputTypeCountLigneCommandeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LigneCommandeWhereInput
  }

  /**
   * CommandeCountOutputType without action
   */
  export type CommandeCountOutputTypeCountPayementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayementWhereInput
  }


  /**
   * Count Type ProduitCountOutputType
   */

  export type ProduitCountOutputType = {
    ligneCommande: number
    likes: number
    cartItems: number
  }

  export type ProduitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ligneCommande?: boolean | ProduitCountOutputTypeCountLigneCommandeArgs
    likes?: boolean | ProduitCountOutputTypeCountLikesArgs
    cartItems?: boolean | ProduitCountOutputTypeCountCartItemsArgs
  }

  // Custom InputTypes
  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProduitCountOutputType
     */
    select?: ProduitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountLigneCommandeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LigneCommandeWhereInput
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountCartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }


  /**
   * Count Type CategorieCountOutputType
   */

  export type CategorieCountOutputType = {
    produits: number
  }

  export type CategorieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | CategorieCountOutputTypeCountProduitsArgs
  }

  // Custom InputTypes
  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategorieCountOutputType
     */
    select?: CategorieCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeCountProduitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
  }


  /**
   * Count Type CouleurCountOutputType
   */

  export type CouleurCountOutputType = {
    produits: number
  }

  export type CouleurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | CouleurCountOutputTypeCountProduitsArgs
  }

  // Custom InputTypes
  /**
   * CouleurCountOutputType without action
   */
  export type CouleurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouleurCountOutputType
     */
    select?: CouleurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CouleurCountOutputType without action
   */
  export type CouleurCountOutputTypeCountProduitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    nom: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    token: string | null
    telephone: string | null
    photoProfil: string | null
    commentaire: string | null
    localisation: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    token: string | null
    telephone: string | null
    photoProfil: string | null
    commentaire: string | null
    localisation: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    nom: number
    email: number
    password: number
    role: number
    token: number
    telephone: number
    photoProfil: number
    typeCouture: number
    commentaire: number
    localisation: number
    specialite: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
    token?: true
    telephone?: true
    photoProfil?: true
    commentaire?: true
    localisation?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
    token?: true
    telephone?: true
    photoProfil?: true
    commentaire?: true
    localisation?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
    token?: true
    telephone?: true
    photoProfil?: true
    typeCouture?: true
    commentaire?: true
    localisation?: true
    specialite?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token: string | null
    telephone: string | null
    photoProfil: string | null
    typeCouture: $Enums.TypeCouture[]
    commentaire: string | null
    localisation: string | null
    specialite: $Enums.Specialite[]
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    token?: boolean
    telephone?: boolean
    photoProfil?: boolean
    typeCouture?: boolean
    commentaire?: boolean
    localisation?: boolean
    specialite?: boolean
    commande?: boolean | Users$commandeArgs<ExtArgs>
    produitsVendus?: boolean | Users$produitsVendusArgs<ExtArgs>
    likes?: boolean | Users$likesArgs<ExtArgs>
    cartItems?: boolean | Users$cartItemsArgs<ExtArgs>
    authoredReviews?: boolean | Users$authoredReviewsArgs<ExtArgs>
    vendeurReviews?: boolean | Users$vendeurReviewsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    token?: boolean
    telephone?: boolean
    photoProfil?: boolean
    typeCouture?: boolean
    commentaire?: boolean
    localisation?: boolean
    specialite?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    token?: boolean
    telephone?: boolean
    photoProfil?: boolean
    typeCouture?: boolean
    commentaire?: boolean
    localisation?: boolean
    specialite?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    token?: boolean
    telephone?: boolean
    photoProfil?: boolean
    typeCouture?: boolean
    commentaire?: boolean
    localisation?: boolean
    specialite?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "email" | "password" | "role" | "token" | "telephone" | "photoProfil" | "typeCouture" | "commentaire" | "localisation" | "specialite", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | Users$commandeArgs<ExtArgs>
    produitsVendus?: boolean | Users$produitsVendusArgs<ExtArgs>
    likes?: boolean | Users$likesArgs<ExtArgs>
    cartItems?: boolean | Users$cartItemsArgs<ExtArgs>
    authoredReviews?: boolean | Users$authoredReviewsArgs<ExtArgs>
    vendeurReviews?: boolean | Users$vendeurReviewsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      commande: Prisma.$CommandePayload<ExtArgs>[]
      produitsVendus: Prisma.$ProduitPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      cartItems: Prisma.$CartItemPayload<ExtArgs>[]
      authoredReviews: Prisma.$ReviewPayload<ExtArgs>[]
      vendeurReviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      email: string
      password: string
      role: $Enums.Role
      token: string | null
      telephone: string | null
      photoProfil: string | null
      typeCouture: $Enums.TypeCouture[]
      commentaire: string | null
      localisation: string | null
      specialite: $Enums.Specialite[]
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UsersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsersUpdateManyAndReturnArgs>(args: SelectSubset<T, UsersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commande<T extends Users$commandeArgs<ExtArgs> = {}>(args?: Subset<T, Users$commandeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    produitsVendus<T extends Users$produitsVendusArgs<ExtArgs> = {}>(args?: Subset<T, Users$produitsVendusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends Users$likesArgs<ExtArgs> = {}>(args?: Subset<T, Users$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cartItems<T extends Users$cartItemsArgs<ExtArgs> = {}>(args?: Subset<T, Users$cartItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    authoredReviews<T extends Users$authoredReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Users$authoredReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vendeurReviews<T extends Users$vendeurReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Users$vendeurReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly nom: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly role: FieldRef<"Users", 'Role'>
    readonly token: FieldRef<"Users", 'String'>
    readonly telephone: FieldRef<"Users", 'String'>
    readonly photoProfil: FieldRef<"Users", 'String'>
    readonly typeCouture: FieldRef<"Users", 'TypeCouture[]'>
    readonly commentaire: FieldRef<"Users", 'String'>
    readonly localisation: FieldRef<"Users", 'String'>
    readonly specialite: FieldRef<"Users", 'Specialite[]'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users updateManyAndReturn
   */
  export type UsersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.commande
   */
  export type Users$commandeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    where?: CommandeWhereInput
    orderBy?: CommandeOrderByWithRelationInput | CommandeOrderByWithRelationInput[]
    cursor?: CommandeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandeScalarFieldEnum | CommandeScalarFieldEnum[]
  }

  /**
   * Users.produitsVendus
   */
  export type Users$produitsVendusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    cursor?: ProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Users.likes
   */
  export type Users$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Users.cartItems
   */
  export type Users$cartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Users.authoredReviews
   */
  export type Users$authoredReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Users.vendeurReviews
   */
  export type Users$vendeurReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    vendeurId: number | null
    userId: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    vendeurId: number | null
    userId: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    vendeurId: number | null
    userId: number | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    vendeurId: number | null
    userId: number | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    vendeurId: number
    userId: number
    rating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    vendeurId?: true
    userId?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    vendeurId?: true
    userId?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    vendeurId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    vendeurId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    vendeurId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    vendeurId: number
    userId: number
    rating: number
    comment: string | null
    createdAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendeurId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    vendeur?: boolean | UsersDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendeurId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    vendeur?: boolean | UsersDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendeurId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    vendeur?: boolean | UsersDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    vendeurId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "vendeurId" | "userId" | "rating" | "comment" | "createdAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendeur?: boolean | UsersDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendeur?: boolean | UsersDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendeur?: boolean | UsersDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      vendeur: Prisma.$UsersPayload<ExtArgs>
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      vendeurId: number
      userId: number
      rating: number
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendeur<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly vendeurId: FieldRef<"Review", 'Int'>
    readonly userId: FieldRef<"Review", 'Int'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly comment: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Commande
   */

  export type AggregateCommande = {
    _count: CommandeCountAggregateOutputType | null
    _avg: CommandeAvgAggregateOutputType | null
    _sum: CommandeSumAggregateOutputType | null
    _min: CommandeMinAggregateOutputType | null
    _max: CommandeMaxAggregateOutputType | null
  }

  export type CommandeAvgAggregateOutputType = {
    id: number | null
    montant: Decimal | null
    usersId: number | null
  }

  export type CommandeSumAggregateOutputType = {
    id: number | null
    montant: Decimal | null
    usersId: number | null
  }

  export type CommandeMinAggregateOutputType = {
    id: number | null
    montant: Decimal | null
    localisation: string | null
    date: Date | null
    status: $Enums.Status | null
    usersId: number | null
  }

  export type CommandeMaxAggregateOutputType = {
    id: number | null
    montant: Decimal | null
    localisation: string | null
    date: Date | null
    status: $Enums.Status | null
    usersId: number | null
  }

  export type CommandeCountAggregateOutputType = {
    id: number
    montant: number
    localisation: number
    date: number
    status: number
    usersId: number
    _all: number
  }


  export type CommandeAvgAggregateInputType = {
    id?: true
    montant?: true
    usersId?: true
  }

  export type CommandeSumAggregateInputType = {
    id?: true
    montant?: true
    usersId?: true
  }

  export type CommandeMinAggregateInputType = {
    id?: true
    montant?: true
    localisation?: true
    date?: true
    status?: true
    usersId?: true
  }

  export type CommandeMaxAggregateInputType = {
    id?: true
    montant?: true
    localisation?: true
    date?: true
    status?: true
    usersId?: true
  }

  export type CommandeCountAggregateInputType = {
    id?: true
    montant?: true
    localisation?: true
    date?: true
    status?: true
    usersId?: true
    _all?: true
  }

  export type CommandeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Commande to aggregate.
     */
    where?: CommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commandes to fetch.
     */
    orderBy?: CommandeOrderByWithRelationInput | CommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Commandes
    **/
    _count?: true | CommandeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommandeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommandeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandeMaxAggregateInputType
  }

  export type GetCommandeAggregateType<T extends CommandeAggregateArgs> = {
        [P in keyof T & keyof AggregateCommande]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommande[P]>
      : GetScalarType<T[P], AggregateCommande[P]>
  }




  export type CommandeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeWhereInput
    orderBy?: CommandeOrderByWithAggregationInput | CommandeOrderByWithAggregationInput[]
    by: CommandeScalarFieldEnum[] | CommandeScalarFieldEnum
    having?: CommandeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandeCountAggregateInputType | true
    _avg?: CommandeAvgAggregateInputType
    _sum?: CommandeSumAggregateInputType
    _min?: CommandeMinAggregateInputType
    _max?: CommandeMaxAggregateInputType
  }

  export type CommandeGroupByOutputType = {
    id: number
    montant: Decimal
    localisation: string | null
    date: Date
    status: $Enums.Status
    usersId: number
    _count: CommandeCountAggregateOutputType | null
    _avg: CommandeAvgAggregateOutputType | null
    _sum: CommandeSumAggregateOutputType | null
    _min: CommandeMinAggregateOutputType | null
    _max: CommandeMaxAggregateOutputType | null
  }

  type GetCommandeGroupByPayload<T extends CommandeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandeGroupByOutputType[P]>
            : GetScalarType<T[P], CommandeGroupByOutputType[P]>
        }
      >
    >


  export type CommandeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    localisation?: boolean
    date?: boolean
    status?: boolean
    usersId?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    ligneCommande?: boolean | Commande$ligneCommandeArgs<ExtArgs>
    payement?: boolean | Commande$payementArgs<ExtArgs>
    _count?: boolean | CommandeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commande"]>

  export type CommandeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    localisation?: boolean
    date?: boolean
    status?: boolean
    usersId?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commande"]>

  export type CommandeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    localisation?: boolean
    date?: boolean
    status?: boolean
    usersId?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commande"]>

  export type CommandeSelectScalar = {
    id?: boolean
    montant?: boolean
    localisation?: boolean
    date?: boolean
    status?: boolean
    usersId?: boolean
  }

  export type CommandeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "montant" | "localisation" | "date" | "status" | "usersId", ExtArgs["result"]["commande"]>
  export type CommandeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    ligneCommande?: boolean | Commande$ligneCommandeArgs<ExtArgs>
    payement?: boolean | Commande$payementArgs<ExtArgs>
    _count?: boolean | CommandeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommandeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type CommandeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $CommandePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Commande"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>
      ligneCommande: Prisma.$LigneCommandePayload<ExtArgs>[]
      payement: Prisma.$PayementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      montant: Prisma.Decimal
      localisation: string | null
      date: Date
      status: $Enums.Status
      usersId: number
    }, ExtArgs["result"]["commande"]>
    composites: {}
  }

  type CommandeGetPayload<S extends boolean | null | undefined | CommandeDefaultArgs> = $Result.GetResult<Prisma.$CommandePayload, S>

  type CommandeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommandeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommandeCountAggregateInputType | true
    }

  export interface CommandeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Commande'], meta: { name: 'Commande' } }
    /**
     * Find zero or one Commande that matches the filter.
     * @param {CommandeFindUniqueArgs} args - Arguments to find a Commande
     * @example
     * // Get one Commande
     * const commande = await prisma.commande.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommandeFindUniqueArgs>(args: SelectSubset<T, CommandeFindUniqueArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Commande that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommandeFindUniqueOrThrowArgs} args - Arguments to find a Commande
     * @example
     * // Get one Commande
     * const commande = await prisma.commande.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommandeFindUniqueOrThrowArgs>(args: SelectSubset<T, CommandeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Commande that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFindFirstArgs} args - Arguments to find a Commande
     * @example
     * // Get one Commande
     * const commande = await prisma.commande.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommandeFindFirstArgs>(args?: SelectSubset<T, CommandeFindFirstArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Commande that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFindFirstOrThrowArgs} args - Arguments to find a Commande
     * @example
     * // Get one Commande
     * const commande = await prisma.commande.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommandeFindFirstOrThrowArgs>(args?: SelectSubset<T, CommandeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Commandes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commandes
     * const commandes = await prisma.commande.findMany()
     * 
     * // Get first 10 Commandes
     * const commandes = await prisma.commande.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commandeWithIdOnly = await prisma.commande.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommandeFindManyArgs>(args?: SelectSubset<T, CommandeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Commande.
     * @param {CommandeCreateArgs} args - Arguments to create a Commande.
     * @example
     * // Create one Commande
     * const Commande = await prisma.commande.create({
     *   data: {
     *     // ... data to create a Commande
     *   }
     * })
     * 
     */
    create<T extends CommandeCreateArgs>(args: SelectSubset<T, CommandeCreateArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Commandes.
     * @param {CommandeCreateManyArgs} args - Arguments to create many Commandes.
     * @example
     * // Create many Commandes
     * const commande = await prisma.commande.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommandeCreateManyArgs>(args?: SelectSubset<T, CommandeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Commandes and returns the data saved in the database.
     * @param {CommandeCreateManyAndReturnArgs} args - Arguments to create many Commandes.
     * @example
     * // Create many Commandes
     * const commande = await prisma.commande.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Commandes and only return the `id`
     * const commandeWithIdOnly = await prisma.commande.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommandeCreateManyAndReturnArgs>(args?: SelectSubset<T, CommandeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Commande.
     * @param {CommandeDeleteArgs} args - Arguments to delete one Commande.
     * @example
     * // Delete one Commande
     * const Commande = await prisma.commande.delete({
     *   where: {
     *     // ... filter to delete one Commande
     *   }
     * })
     * 
     */
    delete<T extends CommandeDeleteArgs>(args: SelectSubset<T, CommandeDeleteArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Commande.
     * @param {CommandeUpdateArgs} args - Arguments to update one Commande.
     * @example
     * // Update one Commande
     * const commande = await prisma.commande.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommandeUpdateArgs>(args: SelectSubset<T, CommandeUpdateArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Commandes.
     * @param {CommandeDeleteManyArgs} args - Arguments to filter Commandes to delete.
     * @example
     * // Delete a few Commandes
     * const { count } = await prisma.commande.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommandeDeleteManyArgs>(args?: SelectSubset<T, CommandeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commandes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commandes
     * const commande = await prisma.commande.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommandeUpdateManyArgs>(args: SelectSubset<T, CommandeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commandes and returns the data updated in the database.
     * @param {CommandeUpdateManyAndReturnArgs} args - Arguments to update many Commandes.
     * @example
     * // Update many Commandes
     * const commande = await prisma.commande.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Commandes and only return the `id`
     * const commandeWithIdOnly = await prisma.commande.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommandeUpdateManyAndReturnArgs>(args: SelectSubset<T, CommandeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Commande.
     * @param {CommandeUpsertArgs} args - Arguments to update or create a Commande.
     * @example
     * // Update or create a Commande
     * const commande = await prisma.commande.upsert({
     *   create: {
     *     // ... data to create a Commande
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commande we want to update
     *   }
     * })
     */
    upsert<T extends CommandeUpsertArgs>(args: SelectSubset<T, CommandeUpsertArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Commandes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeCountArgs} args - Arguments to filter Commandes to count.
     * @example
     * // Count the number of Commandes
     * const count = await prisma.commande.count({
     *   where: {
     *     // ... the filter for the Commandes we want to count
     *   }
     * })
    **/
    count<T extends CommandeCountArgs>(
      args?: Subset<T, CommandeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commande.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandeAggregateArgs>(args: Subset<T, CommandeAggregateArgs>): Prisma.PrismaPromise<GetCommandeAggregateType<T>>

    /**
     * Group by Commande.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommandeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommandeGroupByArgs['orderBy'] }
        : { orderBy?: CommandeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommandeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Commande model
   */
  readonly fields: CommandeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Commande.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommandeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ligneCommande<T extends Commande$ligneCommandeArgs<ExtArgs> = {}>(args?: Subset<T, Commande$ligneCommandeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payement<T extends Commande$payementArgs<ExtArgs> = {}>(args?: Subset<T, Commande$payementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Commande model
   */
  interface CommandeFieldRefs {
    readonly id: FieldRef<"Commande", 'Int'>
    readonly montant: FieldRef<"Commande", 'Decimal'>
    readonly localisation: FieldRef<"Commande", 'String'>
    readonly date: FieldRef<"Commande", 'DateTime'>
    readonly status: FieldRef<"Commande", 'Status'>
    readonly usersId: FieldRef<"Commande", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Commande findUnique
   */
  export type CommandeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * Filter, which Commande to fetch.
     */
    where: CommandeWhereUniqueInput
  }

  /**
   * Commande findUniqueOrThrow
   */
  export type CommandeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * Filter, which Commande to fetch.
     */
    where: CommandeWhereUniqueInput
  }

  /**
   * Commande findFirst
   */
  export type CommandeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * Filter, which Commande to fetch.
     */
    where?: CommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commandes to fetch.
     */
    orderBy?: CommandeOrderByWithRelationInput | CommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commandes.
     */
    cursor?: CommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commandes.
     */
    distinct?: CommandeScalarFieldEnum | CommandeScalarFieldEnum[]
  }

  /**
   * Commande findFirstOrThrow
   */
  export type CommandeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * Filter, which Commande to fetch.
     */
    where?: CommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commandes to fetch.
     */
    orderBy?: CommandeOrderByWithRelationInput | CommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commandes.
     */
    cursor?: CommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commandes.
     */
    distinct?: CommandeScalarFieldEnum | CommandeScalarFieldEnum[]
  }

  /**
   * Commande findMany
   */
  export type CommandeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * Filter, which Commandes to fetch.
     */
    where?: CommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commandes to fetch.
     */
    orderBy?: CommandeOrderByWithRelationInput | CommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Commandes.
     */
    cursor?: CommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commandes.
     */
    skip?: number
    distinct?: CommandeScalarFieldEnum | CommandeScalarFieldEnum[]
  }

  /**
   * Commande create
   */
  export type CommandeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * The data needed to create a Commande.
     */
    data: XOR<CommandeCreateInput, CommandeUncheckedCreateInput>
  }

  /**
   * Commande createMany
   */
  export type CommandeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Commandes.
     */
    data: CommandeCreateManyInput | CommandeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Commande createManyAndReturn
   */
  export type CommandeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * The data used to create many Commandes.
     */
    data: CommandeCreateManyInput | CommandeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Commande update
   */
  export type CommandeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * The data needed to update a Commande.
     */
    data: XOR<CommandeUpdateInput, CommandeUncheckedUpdateInput>
    /**
     * Choose, which Commande to update.
     */
    where: CommandeWhereUniqueInput
  }

  /**
   * Commande updateMany
   */
  export type CommandeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Commandes.
     */
    data: XOR<CommandeUpdateManyMutationInput, CommandeUncheckedUpdateManyInput>
    /**
     * Filter which Commandes to update
     */
    where?: CommandeWhereInput
    /**
     * Limit how many Commandes to update.
     */
    limit?: number
  }

  /**
   * Commande updateManyAndReturn
   */
  export type CommandeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * The data used to update Commandes.
     */
    data: XOR<CommandeUpdateManyMutationInput, CommandeUncheckedUpdateManyInput>
    /**
     * Filter which Commandes to update
     */
    where?: CommandeWhereInput
    /**
     * Limit how many Commandes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Commande upsert
   */
  export type CommandeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * The filter to search for the Commande to update in case it exists.
     */
    where: CommandeWhereUniqueInput
    /**
     * In case the Commande found by the `where` argument doesn't exist, create a new Commande with this data.
     */
    create: XOR<CommandeCreateInput, CommandeUncheckedCreateInput>
    /**
     * In case the Commande was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommandeUpdateInput, CommandeUncheckedUpdateInput>
  }

  /**
   * Commande delete
   */
  export type CommandeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
    /**
     * Filter which Commande to delete.
     */
    where: CommandeWhereUniqueInput
  }

  /**
   * Commande deleteMany
   */
  export type CommandeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Commandes to delete
     */
    where?: CommandeWhereInput
    /**
     * Limit how many Commandes to delete.
     */
    limit?: number
  }

  /**
   * Commande.ligneCommande
   */
  export type Commande$ligneCommandeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    where?: LigneCommandeWhereInput
    orderBy?: LigneCommandeOrderByWithRelationInput | LigneCommandeOrderByWithRelationInput[]
    cursor?: LigneCommandeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LigneCommandeScalarFieldEnum | LigneCommandeScalarFieldEnum[]
  }

  /**
   * Commande.payement
   */
  export type Commande$payementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    where?: PayementWhereInput
    orderBy?: PayementOrderByWithRelationInput | PayementOrderByWithRelationInput[]
    cursor?: PayementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayementScalarFieldEnum | PayementScalarFieldEnum[]
  }

  /**
   * Commande without action
   */
  export type CommandeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commande
     */
    select?: CommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commande
     */
    omit?: CommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeInclude<ExtArgs> | null
  }


  /**
   * Model Payement
   */

  export type AggregatePayement = {
    _count: PayementCountAggregateOutputType | null
    _avg: PayementAvgAggregateOutputType | null
    _sum: PayementSumAggregateOutputType | null
    _min: PayementMinAggregateOutputType | null
    _max: PayementMaxAggregateOutputType | null
  }

  export type PayementAvgAggregateOutputType = {
    id: number | null
    montant: Decimal | null
    commandeId: number | null
  }

  export type PayementSumAggregateOutputType = {
    id: number | null
    montant: Decimal | null
    commandeId: number | null
  }

  export type PayementMinAggregateOutputType = {
    id: number | null
    montant: Decimal | null
    moyenDePayement: $Enums.MoyenDePayement | null
    commandeId: number | null
  }

  export type PayementMaxAggregateOutputType = {
    id: number | null
    montant: Decimal | null
    moyenDePayement: $Enums.MoyenDePayement | null
    commandeId: number | null
  }

  export type PayementCountAggregateOutputType = {
    id: number
    montant: number
    moyenDePayement: number
    commandeId: number
    _all: number
  }


  export type PayementAvgAggregateInputType = {
    id?: true
    montant?: true
    commandeId?: true
  }

  export type PayementSumAggregateInputType = {
    id?: true
    montant?: true
    commandeId?: true
  }

  export type PayementMinAggregateInputType = {
    id?: true
    montant?: true
    moyenDePayement?: true
    commandeId?: true
  }

  export type PayementMaxAggregateInputType = {
    id?: true
    montant?: true
    moyenDePayement?: true
    commandeId?: true
  }

  export type PayementCountAggregateInputType = {
    id?: true
    montant?: true
    moyenDePayement?: true
    commandeId?: true
    _all?: true
  }

  export type PayementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payement to aggregate.
     */
    where?: PayementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payements to fetch.
     */
    orderBy?: PayementOrderByWithRelationInput | PayementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payements
    **/
    _count?: true | PayementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayementMaxAggregateInputType
  }

  export type GetPayementAggregateType<T extends PayementAggregateArgs> = {
        [P in keyof T & keyof AggregatePayement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayement[P]>
      : GetScalarType<T[P], AggregatePayement[P]>
  }




  export type PayementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayementWhereInput
    orderBy?: PayementOrderByWithAggregationInput | PayementOrderByWithAggregationInput[]
    by: PayementScalarFieldEnum[] | PayementScalarFieldEnum
    having?: PayementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayementCountAggregateInputType | true
    _avg?: PayementAvgAggregateInputType
    _sum?: PayementSumAggregateInputType
    _min?: PayementMinAggregateInputType
    _max?: PayementMaxAggregateInputType
  }

  export type PayementGroupByOutputType = {
    id: number
    montant: Decimal
    moyenDePayement: $Enums.MoyenDePayement
    commandeId: number
    _count: PayementCountAggregateOutputType | null
    _avg: PayementAvgAggregateOutputType | null
    _sum: PayementSumAggregateOutputType | null
    _min: PayementMinAggregateOutputType | null
    _max: PayementMaxAggregateOutputType | null
  }

  type GetPayementGroupByPayload<T extends PayementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayementGroupByOutputType[P]>
            : GetScalarType<T[P], PayementGroupByOutputType[P]>
        }
      >
    >


  export type PayementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    moyenDePayement?: boolean
    commandeId?: boolean
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payement"]>

  export type PayementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    moyenDePayement?: boolean
    commandeId?: boolean
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payement"]>

  export type PayementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    moyenDePayement?: boolean
    commandeId?: boolean
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payement"]>

  export type PayementSelectScalar = {
    id?: boolean
    montant?: boolean
    moyenDePayement?: boolean
    commandeId?: boolean
  }

  export type PayementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "montant" | "moyenDePayement" | "commandeId", ExtArgs["result"]["payement"]>
  export type PayementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
  }
  export type PayementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
  }
  export type PayementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
  }

  export type $PayementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payement"
    objects: {
      commande: Prisma.$CommandePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      montant: Prisma.Decimal
      moyenDePayement: $Enums.MoyenDePayement
      commandeId: number
    }, ExtArgs["result"]["payement"]>
    composites: {}
  }

  type PayementGetPayload<S extends boolean | null | undefined | PayementDefaultArgs> = $Result.GetResult<Prisma.$PayementPayload, S>

  type PayementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayementCountAggregateInputType | true
    }

  export interface PayementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payement'], meta: { name: 'Payement' } }
    /**
     * Find zero or one Payement that matches the filter.
     * @param {PayementFindUniqueArgs} args - Arguments to find a Payement
     * @example
     * // Get one Payement
     * const payement = await prisma.payement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayementFindUniqueArgs>(args: SelectSubset<T, PayementFindUniqueArgs<ExtArgs>>): Prisma__PayementClient<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayementFindUniqueOrThrowArgs} args - Arguments to find a Payement
     * @example
     * // Get one Payement
     * const payement = await prisma.payement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayementFindUniqueOrThrowArgs>(args: SelectSubset<T, PayementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayementClient<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayementFindFirstArgs} args - Arguments to find a Payement
     * @example
     * // Get one Payement
     * const payement = await prisma.payement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayementFindFirstArgs>(args?: SelectSubset<T, PayementFindFirstArgs<ExtArgs>>): Prisma__PayementClient<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayementFindFirstOrThrowArgs} args - Arguments to find a Payement
     * @example
     * // Get one Payement
     * const payement = await prisma.payement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayementFindFirstOrThrowArgs>(args?: SelectSubset<T, PayementFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayementClient<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payements
     * const payements = await prisma.payement.findMany()
     * 
     * // Get first 10 Payements
     * const payements = await prisma.payement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payementWithIdOnly = await prisma.payement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayementFindManyArgs>(args?: SelectSubset<T, PayementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payement.
     * @param {PayementCreateArgs} args - Arguments to create a Payement.
     * @example
     * // Create one Payement
     * const Payement = await prisma.payement.create({
     *   data: {
     *     // ... data to create a Payement
     *   }
     * })
     * 
     */
    create<T extends PayementCreateArgs>(args: SelectSubset<T, PayementCreateArgs<ExtArgs>>): Prisma__PayementClient<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payements.
     * @param {PayementCreateManyArgs} args - Arguments to create many Payements.
     * @example
     * // Create many Payements
     * const payement = await prisma.payement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayementCreateManyArgs>(args?: SelectSubset<T, PayementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payements and returns the data saved in the database.
     * @param {PayementCreateManyAndReturnArgs} args - Arguments to create many Payements.
     * @example
     * // Create many Payements
     * const payement = await prisma.payement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payements and only return the `id`
     * const payementWithIdOnly = await prisma.payement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayementCreateManyAndReturnArgs>(args?: SelectSubset<T, PayementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payement.
     * @param {PayementDeleteArgs} args - Arguments to delete one Payement.
     * @example
     * // Delete one Payement
     * const Payement = await prisma.payement.delete({
     *   where: {
     *     // ... filter to delete one Payement
     *   }
     * })
     * 
     */
    delete<T extends PayementDeleteArgs>(args: SelectSubset<T, PayementDeleteArgs<ExtArgs>>): Prisma__PayementClient<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payement.
     * @param {PayementUpdateArgs} args - Arguments to update one Payement.
     * @example
     * // Update one Payement
     * const payement = await prisma.payement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayementUpdateArgs>(args: SelectSubset<T, PayementUpdateArgs<ExtArgs>>): Prisma__PayementClient<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payements.
     * @param {PayementDeleteManyArgs} args - Arguments to filter Payements to delete.
     * @example
     * // Delete a few Payements
     * const { count } = await prisma.payement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayementDeleteManyArgs>(args?: SelectSubset<T, PayementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payements
     * const payement = await prisma.payement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayementUpdateManyArgs>(args: SelectSubset<T, PayementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payements and returns the data updated in the database.
     * @param {PayementUpdateManyAndReturnArgs} args - Arguments to update many Payements.
     * @example
     * // Update many Payements
     * const payement = await prisma.payement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payements and only return the `id`
     * const payementWithIdOnly = await prisma.payement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayementUpdateManyAndReturnArgs>(args: SelectSubset<T, PayementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payement.
     * @param {PayementUpsertArgs} args - Arguments to update or create a Payement.
     * @example
     * // Update or create a Payement
     * const payement = await prisma.payement.upsert({
     *   create: {
     *     // ... data to create a Payement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payement we want to update
     *   }
     * })
     */
    upsert<T extends PayementUpsertArgs>(args: SelectSubset<T, PayementUpsertArgs<ExtArgs>>): Prisma__PayementClient<$Result.GetResult<Prisma.$PayementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayementCountArgs} args - Arguments to filter Payements to count.
     * @example
     * // Count the number of Payements
     * const count = await prisma.payement.count({
     *   where: {
     *     // ... the filter for the Payements we want to count
     *   }
     * })
    **/
    count<T extends PayementCountArgs>(
      args?: Subset<T, PayementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayementAggregateArgs>(args: Subset<T, PayementAggregateArgs>): Prisma.PrismaPromise<GetPayementAggregateType<T>>

    /**
     * Group by Payement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayementGroupByArgs['orderBy'] }
        : { orderBy?: PayementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payement model
   */
  readonly fields: PayementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commande<T extends CommandeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommandeDefaultArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payement model
   */
  interface PayementFieldRefs {
    readonly id: FieldRef<"Payement", 'Int'>
    readonly montant: FieldRef<"Payement", 'Decimal'>
    readonly moyenDePayement: FieldRef<"Payement", 'MoyenDePayement'>
    readonly commandeId: FieldRef<"Payement", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Payement findUnique
   */
  export type PayementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * Filter, which Payement to fetch.
     */
    where: PayementWhereUniqueInput
  }

  /**
   * Payement findUniqueOrThrow
   */
  export type PayementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * Filter, which Payement to fetch.
     */
    where: PayementWhereUniqueInput
  }

  /**
   * Payement findFirst
   */
  export type PayementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * Filter, which Payement to fetch.
     */
    where?: PayementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payements to fetch.
     */
    orderBy?: PayementOrderByWithRelationInput | PayementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payements.
     */
    cursor?: PayementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payements.
     */
    distinct?: PayementScalarFieldEnum | PayementScalarFieldEnum[]
  }

  /**
   * Payement findFirstOrThrow
   */
  export type PayementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * Filter, which Payement to fetch.
     */
    where?: PayementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payements to fetch.
     */
    orderBy?: PayementOrderByWithRelationInput | PayementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payements.
     */
    cursor?: PayementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payements.
     */
    distinct?: PayementScalarFieldEnum | PayementScalarFieldEnum[]
  }

  /**
   * Payement findMany
   */
  export type PayementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * Filter, which Payements to fetch.
     */
    where?: PayementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payements to fetch.
     */
    orderBy?: PayementOrderByWithRelationInput | PayementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payements.
     */
    cursor?: PayementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payements.
     */
    skip?: number
    distinct?: PayementScalarFieldEnum | PayementScalarFieldEnum[]
  }

  /**
   * Payement create
   */
  export type PayementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * The data needed to create a Payement.
     */
    data: XOR<PayementCreateInput, PayementUncheckedCreateInput>
  }

  /**
   * Payement createMany
   */
  export type PayementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payements.
     */
    data: PayementCreateManyInput | PayementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payement createManyAndReturn
   */
  export type PayementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * The data used to create many Payements.
     */
    data: PayementCreateManyInput | PayementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payement update
   */
  export type PayementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * The data needed to update a Payement.
     */
    data: XOR<PayementUpdateInput, PayementUncheckedUpdateInput>
    /**
     * Choose, which Payement to update.
     */
    where: PayementWhereUniqueInput
  }

  /**
   * Payement updateMany
   */
  export type PayementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payements.
     */
    data: XOR<PayementUpdateManyMutationInput, PayementUncheckedUpdateManyInput>
    /**
     * Filter which Payements to update
     */
    where?: PayementWhereInput
    /**
     * Limit how many Payements to update.
     */
    limit?: number
  }

  /**
   * Payement updateManyAndReturn
   */
  export type PayementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * The data used to update Payements.
     */
    data: XOR<PayementUpdateManyMutationInput, PayementUncheckedUpdateManyInput>
    /**
     * Filter which Payements to update
     */
    where?: PayementWhereInput
    /**
     * Limit how many Payements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payement upsert
   */
  export type PayementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * The filter to search for the Payement to update in case it exists.
     */
    where: PayementWhereUniqueInput
    /**
     * In case the Payement found by the `where` argument doesn't exist, create a new Payement with this data.
     */
    create: XOR<PayementCreateInput, PayementUncheckedCreateInput>
    /**
     * In case the Payement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayementUpdateInput, PayementUncheckedUpdateInput>
  }

  /**
   * Payement delete
   */
  export type PayementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
    /**
     * Filter which Payement to delete.
     */
    where: PayementWhereUniqueInput
  }

  /**
   * Payement deleteMany
   */
  export type PayementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payements to delete
     */
    where?: PayementWhereInput
    /**
     * Limit how many Payements to delete.
     */
    limit?: number
  }

  /**
   * Payement without action
   */
  export type PayementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payement
     */
    select?: PayementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payement
     */
    omit?: PayementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayementInclude<ExtArgs> | null
  }


  /**
   * Model LigneCommande
   */

  export type AggregateLigneCommande = {
    _count: LigneCommandeCountAggregateOutputType | null
    _avg: LigneCommandeAvgAggregateOutputType | null
    _sum: LigneCommandeSumAggregateOutputType | null
    _min: LigneCommandeMinAggregateOutputType | null
    _max: LigneCommandeMaxAggregateOutputType | null
  }

  export type LigneCommandeAvgAggregateOutputType = {
    id: number | null
    prixUnitaire: Decimal | null
    quantite: number | null
    total: Decimal | null
    commandeId: number | null
    produitId: number | null
  }

  export type LigneCommandeSumAggregateOutputType = {
    id: number | null
    prixUnitaire: Decimal | null
    quantite: number | null
    total: Decimal | null
    commandeId: number | null
    produitId: number | null
  }

  export type LigneCommandeMinAggregateOutputType = {
    id: number | null
    prixUnitaire: Decimal | null
    quantite: number | null
    total: Decimal | null
    date: Date | null
    commandeId: number | null
    produitId: number | null
  }

  export type LigneCommandeMaxAggregateOutputType = {
    id: number | null
    prixUnitaire: Decimal | null
    quantite: number | null
    total: Decimal | null
    date: Date | null
    commandeId: number | null
    produitId: number | null
  }

  export type LigneCommandeCountAggregateOutputType = {
    id: number
    prixUnitaire: number
    quantite: number
    total: number
    date: number
    commandeId: number
    produitId: number
    _all: number
  }


  export type LigneCommandeAvgAggregateInputType = {
    id?: true
    prixUnitaire?: true
    quantite?: true
    total?: true
    commandeId?: true
    produitId?: true
  }

  export type LigneCommandeSumAggregateInputType = {
    id?: true
    prixUnitaire?: true
    quantite?: true
    total?: true
    commandeId?: true
    produitId?: true
  }

  export type LigneCommandeMinAggregateInputType = {
    id?: true
    prixUnitaire?: true
    quantite?: true
    total?: true
    date?: true
    commandeId?: true
    produitId?: true
  }

  export type LigneCommandeMaxAggregateInputType = {
    id?: true
    prixUnitaire?: true
    quantite?: true
    total?: true
    date?: true
    commandeId?: true
    produitId?: true
  }

  export type LigneCommandeCountAggregateInputType = {
    id?: true
    prixUnitaire?: true
    quantite?: true
    total?: true
    date?: true
    commandeId?: true
    produitId?: true
    _all?: true
  }

  export type LigneCommandeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LigneCommande to aggregate.
     */
    where?: LigneCommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LigneCommandes to fetch.
     */
    orderBy?: LigneCommandeOrderByWithRelationInput | LigneCommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LigneCommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LigneCommandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LigneCommandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LigneCommandes
    **/
    _count?: true | LigneCommandeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LigneCommandeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LigneCommandeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LigneCommandeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LigneCommandeMaxAggregateInputType
  }

  export type GetLigneCommandeAggregateType<T extends LigneCommandeAggregateArgs> = {
        [P in keyof T & keyof AggregateLigneCommande]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLigneCommande[P]>
      : GetScalarType<T[P], AggregateLigneCommande[P]>
  }




  export type LigneCommandeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LigneCommandeWhereInput
    orderBy?: LigneCommandeOrderByWithAggregationInput | LigneCommandeOrderByWithAggregationInput[]
    by: LigneCommandeScalarFieldEnum[] | LigneCommandeScalarFieldEnum
    having?: LigneCommandeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LigneCommandeCountAggregateInputType | true
    _avg?: LigneCommandeAvgAggregateInputType
    _sum?: LigneCommandeSumAggregateInputType
    _min?: LigneCommandeMinAggregateInputType
    _max?: LigneCommandeMaxAggregateInputType
  }

  export type LigneCommandeGroupByOutputType = {
    id: number
    prixUnitaire: Decimal
    quantite: number
    total: Decimal
    date: Date
    commandeId: number
    produitId: number
    _count: LigneCommandeCountAggregateOutputType | null
    _avg: LigneCommandeAvgAggregateOutputType | null
    _sum: LigneCommandeSumAggregateOutputType | null
    _min: LigneCommandeMinAggregateOutputType | null
    _max: LigneCommandeMaxAggregateOutputType | null
  }

  type GetLigneCommandeGroupByPayload<T extends LigneCommandeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LigneCommandeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LigneCommandeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LigneCommandeGroupByOutputType[P]>
            : GetScalarType<T[P], LigneCommandeGroupByOutputType[P]>
        }
      >
    >


  export type LigneCommandeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prixUnitaire?: boolean
    quantite?: boolean
    total?: boolean
    date?: boolean
    commandeId?: boolean
    produitId?: boolean
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ligneCommande"]>

  export type LigneCommandeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prixUnitaire?: boolean
    quantite?: boolean
    total?: boolean
    date?: boolean
    commandeId?: boolean
    produitId?: boolean
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ligneCommande"]>

  export type LigneCommandeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prixUnitaire?: boolean
    quantite?: boolean
    total?: boolean
    date?: boolean
    commandeId?: boolean
    produitId?: boolean
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ligneCommande"]>

  export type LigneCommandeSelectScalar = {
    id?: boolean
    prixUnitaire?: boolean
    quantite?: boolean
    total?: boolean
    date?: boolean
    commandeId?: boolean
    produitId?: boolean
  }

  export type LigneCommandeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "prixUnitaire" | "quantite" | "total" | "date" | "commandeId" | "produitId", ExtArgs["result"]["ligneCommande"]>
  export type LigneCommandeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }
  export type LigneCommandeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }
  export type LigneCommandeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }

  export type $LigneCommandePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LigneCommande"
    objects: {
      commande: Prisma.$CommandePayload<ExtArgs>
      produit: Prisma.$ProduitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      prixUnitaire: Prisma.Decimal
      quantite: number
      total: Prisma.Decimal
      date: Date
      commandeId: number
      produitId: number
    }, ExtArgs["result"]["ligneCommande"]>
    composites: {}
  }

  type LigneCommandeGetPayload<S extends boolean | null | undefined | LigneCommandeDefaultArgs> = $Result.GetResult<Prisma.$LigneCommandePayload, S>

  type LigneCommandeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LigneCommandeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LigneCommandeCountAggregateInputType | true
    }

  export interface LigneCommandeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LigneCommande'], meta: { name: 'LigneCommande' } }
    /**
     * Find zero or one LigneCommande that matches the filter.
     * @param {LigneCommandeFindUniqueArgs} args - Arguments to find a LigneCommande
     * @example
     * // Get one LigneCommande
     * const ligneCommande = await prisma.ligneCommande.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LigneCommandeFindUniqueArgs>(args: SelectSubset<T, LigneCommandeFindUniqueArgs<ExtArgs>>): Prisma__LigneCommandeClient<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LigneCommande that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LigneCommandeFindUniqueOrThrowArgs} args - Arguments to find a LigneCommande
     * @example
     * // Get one LigneCommande
     * const ligneCommande = await prisma.ligneCommande.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LigneCommandeFindUniqueOrThrowArgs>(args: SelectSubset<T, LigneCommandeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LigneCommandeClient<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LigneCommande that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneCommandeFindFirstArgs} args - Arguments to find a LigneCommande
     * @example
     * // Get one LigneCommande
     * const ligneCommande = await prisma.ligneCommande.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LigneCommandeFindFirstArgs>(args?: SelectSubset<T, LigneCommandeFindFirstArgs<ExtArgs>>): Prisma__LigneCommandeClient<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LigneCommande that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneCommandeFindFirstOrThrowArgs} args - Arguments to find a LigneCommande
     * @example
     * // Get one LigneCommande
     * const ligneCommande = await prisma.ligneCommande.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LigneCommandeFindFirstOrThrowArgs>(args?: SelectSubset<T, LigneCommandeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LigneCommandeClient<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LigneCommandes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneCommandeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LigneCommandes
     * const ligneCommandes = await prisma.ligneCommande.findMany()
     * 
     * // Get first 10 LigneCommandes
     * const ligneCommandes = await prisma.ligneCommande.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ligneCommandeWithIdOnly = await prisma.ligneCommande.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LigneCommandeFindManyArgs>(args?: SelectSubset<T, LigneCommandeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LigneCommande.
     * @param {LigneCommandeCreateArgs} args - Arguments to create a LigneCommande.
     * @example
     * // Create one LigneCommande
     * const LigneCommande = await prisma.ligneCommande.create({
     *   data: {
     *     // ... data to create a LigneCommande
     *   }
     * })
     * 
     */
    create<T extends LigneCommandeCreateArgs>(args: SelectSubset<T, LigneCommandeCreateArgs<ExtArgs>>): Prisma__LigneCommandeClient<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LigneCommandes.
     * @param {LigneCommandeCreateManyArgs} args - Arguments to create many LigneCommandes.
     * @example
     * // Create many LigneCommandes
     * const ligneCommande = await prisma.ligneCommande.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LigneCommandeCreateManyArgs>(args?: SelectSubset<T, LigneCommandeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LigneCommandes and returns the data saved in the database.
     * @param {LigneCommandeCreateManyAndReturnArgs} args - Arguments to create many LigneCommandes.
     * @example
     * // Create many LigneCommandes
     * const ligneCommande = await prisma.ligneCommande.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LigneCommandes and only return the `id`
     * const ligneCommandeWithIdOnly = await prisma.ligneCommande.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LigneCommandeCreateManyAndReturnArgs>(args?: SelectSubset<T, LigneCommandeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LigneCommande.
     * @param {LigneCommandeDeleteArgs} args - Arguments to delete one LigneCommande.
     * @example
     * // Delete one LigneCommande
     * const LigneCommande = await prisma.ligneCommande.delete({
     *   where: {
     *     // ... filter to delete one LigneCommande
     *   }
     * })
     * 
     */
    delete<T extends LigneCommandeDeleteArgs>(args: SelectSubset<T, LigneCommandeDeleteArgs<ExtArgs>>): Prisma__LigneCommandeClient<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LigneCommande.
     * @param {LigneCommandeUpdateArgs} args - Arguments to update one LigneCommande.
     * @example
     * // Update one LigneCommande
     * const ligneCommande = await prisma.ligneCommande.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LigneCommandeUpdateArgs>(args: SelectSubset<T, LigneCommandeUpdateArgs<ExtArgs>>): Prisma__LigneCommandeClient<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LigneCommandes.
     * @param {LigneCommandeDeleteManyArgs} args - Arguments to filter LigneCommandes to delete.
     * @example
     * // Delete a few LigneCommandes
     * const { count } = await prisma.ligneCommande.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LigneCommandeDeleteManyArgs>(args?: SelectSubset<T, LigneCommandeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LigneCommandes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneCommandeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LigneCommandes
     * const ligneCommande = await prisma.ligneCommande.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LigneCommandeUpdateManyArgs>(args: SelectSubset<T, LigneCommandeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LigneCommandes and returns the data updated in the database.
     * @param {LigneCommandeUpdateManyAndReturnArgs} args - Arguments to update many LigneCommandes.
     * @example
     * // Update many LigneCommandes
     * const ligneCommande = await prisma.ligneCommande.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LigneCommandes and only return the `id`
     * const ligneCommandeWithIdOnly = await prisma.ligneCommande.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LigneCommandeUpdateManyAndReturnArgs>(args: SelectSubset<T, LigneCommandeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LigneCommande.
     * @param {LigneCommandeUpsertArgs} args - Arguments to update or create a LigneCommande.
     * @example
     * // Update or create a LigneCommande
     * const ligneCommande = await prisma.ligneCommande.upsert({
     *   create: {
     *     // ... data to create a LigneCommande
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LigneCommande we want to update
     *   }
     * })
     */
    upsert<T extends LigneCommandeUpsertArgs>(args: SelectSubset<T, LigneCommandeUpsertArgs<ExtArgs>>): Prisma__LigneCommandeClient<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LigneCommandes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneCommandeCountArgs} args - Arguments to filter LigneCommandes to count.
     * @example
     * // Count the number of LigneCommandes
     * const count = await prisma.ligneCommande.count({
     *   where: {
     *     // ... the filter for the LigneCommandes we want to count
     *   }
     * })
    **/
    count<T extends LigneCommandeCountArgs>(
      args?: Subset<T, LigneCommandeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LigneCommandeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LigneCommande.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneCommandeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LigneCommandeAggregateArgs>(args: Subset<T, LigneCommandeAggregateArgs>): Prisma.PrismaPromise<GetLigneCommandeAggregateType<T>>

    /**
     * Group by LigneCommande.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneCommandeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LigneCommandeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LigneCommandeGroupByArgs['orderBy'] }
        : { orderBy?: LigneCommandeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LigneCommandeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLigneCommandeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LigneCommande model
   */
  readonly fields: LigneCommandeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LigneCommande.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LigneCommandeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commande<T extends CommandeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommandeDefaultArgs<ExtArgs>>): Prisma__CommandeClient<$Result.GetResult<Prisma.$CommandePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    produit<T extends ProduitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProduitDefaultArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LigneCommande model
   */
  interface LigneCommandeFieldRefs {
    readonly id: FieldRef<"LigneCommande", 'Int'>
    readonly prixUnitaire: FieldRef<"LigneCommande", 'Decimal'>
    readonly quantite: FieldRef<"LigneCommande", 'Int'>
    readonly total: FieldRef<"LigneCommande", 'Decimal'>
    readonly date: FieldRef<"LigneCommande", 'DateTime'>
    readonly commandeId: FieldRef<"LigneCommande", 'Int'>
    readonly produitId: FieldRef<"LigneCommande", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LigneCommande findUnique
   */
  export type LigneCommandeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * Filter, which LigneCommande to fetch.
     */
    where: LigneCommandeWhereUniqueInput
  }

  /**
   * LigneCommande findUniqueOrThrow
   */
  export type LigneCommandeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * Filter, which LigneCommande to fetch.
     */
    where: LigneCommandeWhereUniqueInput
  }

  /**
   * LigneCommande findFirst
   */
  export type LigneCommandeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * Filter, which LigneCommande to fetch.
     */
    where?: LigneCommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LigneCommandes to fetch.
     */
    orderBy?: LigneCommandeOrderByWithRelationInput | LigneCommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LigneCommandes.
     */
    cursor?: LigneCommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LigneCommandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LigneCommandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LigneCommandes.
     */
    distinct?: LigneCommandeScalarFieldEnum | LigneCommandeScalarFieldEnum[]
  }

  /**
   * LigneCommande findFirstOrThrow
   */
  export type LigneCommandeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * Filter, which LigneCommande to fetch.
     */
    where?: LigneCommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LigneCommandes to fetch.
     */
    orderBy?: LigneCommandeOrderByWithRelationInput | LigneCommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LigneCommandes.
     */
    cursor?: LigneCommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LigneCommandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LigneCommandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LigneCommandes.
     */
    distinct?: LigneCommandeScalarFieldEnum | LigneCommandeScalarFieldEnum[]
  }

  /**
   * LigneCommande findMany
   */
  export type LigneCommandeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * Filter, which LigneCommandes to fetch.
     */
    where?: LigneCommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LigneCommandes to fetch.
     */
    orderBy?: LigneCommandeOrderByWithRelationInput | LigneCommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LigneCommandes.
     */
    cursor?: LigneCommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LigneCommandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LigneCommandes.
     */
    skip?: number
    distinct?: LigneCommandeScalarFieldEnum | LigneCommandeScalarFieldEnum[]
  }

  /**
   * LigneCommande create
   */
  export type LigneCommandeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * The data needed to create a LigneCommande.
     */
    data: XOR<LigneCommandeCreateInput, LigneCommandeUncheckedCreateInput>
  }

  /**
   * LigneCommande createMany
   */
  export type LigneCommandeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LigneCommandes.
     */
    data: LigneCommandeCreateManyInput | LigneCommandeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LigneCommande createManyAndReturn
   */
  export type LigneCommandeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * The data used to create many LigneCommandes.
     */
    data: LigneCommandeCreateManyInput | LigneCommandeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LigneCommande update
   */
  export type LigneCommandeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * The data needed to update a LigneCommande.
     */
    data: XOR<LigneCommandeUpdateInput, LigneCommandeUncheckedUpdateInput>
    /**
     * Choose, which LigneCommande to update.
     */
    where: LigneCommandeWhereUniqueInput
  }

  /**
   * LigneCommande updateMany
   */
  export type LigneCommandeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LigneCommandes.
     */
    data: XOR<LigneCommandeUpdateManyMutationInput, LigneCommandeUncheckedUpdateManyInput>
    /**
     * Filter which LigneCommandes to update
     */
    where?: LigneCommandeWhereInput
    /**
     * Limit how many LigneCommandes to update.
     */
    limit?: number
  }

  /**
   * LigneCommande updateManyAndReturn
   */
  export type LigneCommandeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * The data used to update LigneCommandes.
     */
    data: XOR<LigneCommandeUpdateManyMutationInput, LigneCommandeUncheckedUpdateManyInput>
    /**
     * Filter which LigneCommandes to update
     */
    where?: LigneCommandeWhereInput
    /**
     * Limit how many LigneCommandes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LigneCommande upsert
   */
  export type LigneCommandeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * The filter to search for the LigneCommande to update in case it exists.
     */
    where: LigneCommandeWhereUniqueInput
    /**
     * In case the LigneCommande found by the `where` argument doesn't exist, create a new LigneCommande with this data.
     */
    create: XOR<LigneCommandeCreateInput, LigneCommandeUncheckedCreateInput>
    /**
     * In case the LigneCommande was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LigneCommandeUpdateInput, LigneCommandeUncheckedUpdateInput>
  }

  /**
   * LigneCommande delete
   */
  export type LigneCommandeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    /**
     * Filter which LigneCommande to delete.
     */
    where: LigneCommandeWhereUniqueInput
  }

  /**
   * LigneCommande deleteMany
   */
  export type LigneCommandeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LigneCommandes to delete
     */
    where?: LigneCommandeWhereInput
    /**
     * Limit how many LigneCommandes to delete.
     */
    limit?: number
  }

  /**
   * LigneCommande without action
   */
  export type LigneCommandeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
  }


  /**
   * Model Produit
   */

  export type AggregateProduit = {
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  export type ProduitAvgAggregateOutputType = {
    id: number | null
    prix: Decimal | null
    categorieId: number | null
    couleurId: number | null
    vendeurId: number | null
  }

  export type ProduitSumAggregateOutputType = {
    id: number | null
    prix: Decimal | null
    categorieId: number | null
    couleurId: number | null
    vendeurId: number | null
  }

  export type ProduitMinAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    prix: Decimal | null
    image: string | null
    taille: $Enums.Taille | null
    categorieId: number | null
    couleurId: number | null
    vendeurId: number | null
  }

  export type ProduitMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    prix: Decimal | null
    image: string | null
    taille: $Enums.Taille | null
    categorieId: number | null
    couleurId: number | null
    vendeurId: number | null
  }

  export type ProduitCountAggregateOutputType = {
    id: number
    nom: number
    description: number
    prix: number
    image: number
    taille: number
    categorieId: number
    couleurId: number
    vendeurId: number
    _all: number
  }


  export type ProduitAvgAggregateInputType = {
    id?: true
    prix?: true
    categorieId?: true
    couleurId?: true
    vendeurId?: true
  }

  export type ProduitSumAggregateInputType = {
    id?: true
    prix?: true
    categorieId?: true
    couleurId?: true
    vendeurId?: true
  }

  export type ProduitMinAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    prix?: true
    image?: true
    taille?: true
    categorieId?: true
    couleurId?: true
    vendeurId?: true
  }

  export type ProduitMaxAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    prix?: true
    image?: true
    taille?: true
    categorieId?: true
    couleurId?: true
    vendeurId?: true
  }

  export type ProduitCountAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    prix?: true
    image?: true
    taille?: true
    categorieId?: true
    couleurId?: true
    vendeurId?: true
    _all?: true
  }

  export type ProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produit to aggregate.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produits
    **/
    _count?: true | ProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProduitMaxAggregateInputType
  }

  export type GetProduitAggregateType<T extends ProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduit[P]>
      : GetScalarType<T[P], AggregateProduit[P]>
  }




  export type ProduitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithAggregationInput | ProduitOrderByWithAggregationInput[]
    by: ProduitScalarFieldEnum[] | ProduitScalarFieldEnum
    having?: ProduitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProduitCountAggregateInputType | true
    _avg?: ProduitAvgAggregateInputType
    _sum?: ProduitSumAggregateInputType
    _min?: ProduitMinAggregateInputType
    _max?: ProduitMaxAggregateInputType
  }

  export type ProduitGroupByOutputType = {
    id: number
    nom: string
    description: string
    prix: Decimal
    image: string | null
    taille: $Enums.Taille
    categorieId: number
    couleurId: number
    vendeurId: number | null
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  type GetProduitGroupByPayload<T extends ProduitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProduitGroupByOutputType[P]>
            : GetScalarType<T[P], ProduitGroupByOutputType[P]>
        }
      >
    >


  export type ProduitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    prix?: boolean
    image?: boolean
    taille?: boolean
    categorieId?: boolean
    couleurId?: boolean
    vendeurId?: boolean
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    couleur?: boolean | CouleurDefaultArgs<ExtArgs>
    ligneCommande?: boolean | Produit$ligneCommandeArgs<ExtArgs>
    vendeur?: boolean | Produit$vendeurArgs<ExtArgs>
    likes?: boolean | Produit$likesArgs<ExtArgs>
    cartItems?: boolean | Produit$cartItemsArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>

  export type ProduitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    prix?: boolean
    image?: boolean
    taille?: boolean
    categorieId?: boolean
    couleurId?: boolean
    vendeurId?: boolean
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    couleur?: boolean | CouleurDefaultArgs<ExtArgs>
    vendeur?: boolean | Produit$vendeurArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>

  export type ProduitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    prix?: boolean
    image?: boolean
    taille?: boolean
    categorieId?: boolean
    couleurId?: boolean
    vendeurId?: boolean
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    couleur?: boolean | CouleurDefaultArgs<ExtArgs>
    vendeur?: boolean | Produit$vendeurArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>

  export type ProduitSelectScalar = {
    id?: boolean
    nom?: boolean
    description?: boolean
    prix?: boolean
    image?: boolean
    taille?: boolean
    categorieId?: boolean
    couleurId?: boolean
    vendeurId?: boolean
  }

  export type ProduitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "description" | "prix" | "image" | "taille" | "categorieId" | "couleurId" | "vendeurId", ExtArgs["result"]["produit"]>
  export type ProduitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    couleur?: boolean | CouleurDefaultArgs<ExtArgs>
    ligneCommande?: boolean | Produit$ligneCommandeArgs<ExtArgs>
    vendeur?: boolean | Produit$vendeurArgs<ExtArgs>
    likes?: boolean | Produit$likesArgs<ExtArgs>
    cartItems?: boolean | Produit$cartItemsArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProduitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    couleur?: boolean | CouleurDefaultArgs<ExtArgs>
    vendeur?: boolean | Produit$vendeurArgs<ExtArgs>
  }
  export type ProduitIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    couleur?: boolean | CouleurDefaultArgs<ExtArgs>
    vendeur?: boolean | Produit$vendeurArgs<ExtArgs>
  }

  export type $ProduitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produit"
    objects: {
      categorie: Prisma.$CategoriePayload<ExtArgs>
      couleur: Prisma.$CouleurPayload<ExtArgs>
      ligneCommande: Prisma.$LigneCommandePayload<ExtArgs>[]
      vendeur: Prisma.$UsersPayload<ExtArgs> | null
      likes: Prisma.$LikePayload<ExtArgs>[]
      cartItems: Prisma.$CartItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      description: string
      prix: Prisma.Decimal
      image: string | null
      taille: $Enums.Taille
      categorieId: number
      couleurId: number
      vendeurId: number | null
    }, ExtArgs["result"]["produit"]>
    composites: {}
  }

  type ProduitGetPayload<S extends boolean | null | undefined | ProduitDefaultArgs> = $Result.GetResult<Prisma.$ProduitPayload, S>

  type ProduitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProduitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProduitCountAggregateInputType | true
    }

  export interface ProduitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produit'], meta: { name: 'Produit' } }
    /**
     * Find zero or one Produit that matches the filter.
     * @param {ProduitFindUniqueArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProduitFindUniqueArgs>(args: SelectSubset<T, ProduitFindUniqueArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Produit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProduitFindUniqueOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProduitFindUniqueOrThrowArgs>(args: SelectSubset<T, ProduitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Produit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProduitFindFirstArgs>(args?: SelectSubset<T, ProduitFindFirstArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Produit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProduitFindFirstOrThrowArgs>(args?: SelectSubset<T, ProduitFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Produits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produits
     * const produits = await prisma.produit.findMany()
     * 
     * // Get first 10 Produits
     * const produits = await prisma.produit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produitWithIdOnly = await prisma.produit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProduitFindManyArgs>(args?: SelectSubset<T, ProduitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Produit.
     * @param {ProduitCreateArgs} args - Arguments to create a Produit.
     * @example
     * // Create one Produit
     * const Produit = await prisma.produit.create({
     *   data: {
     *     // ... data to create a Produit
     *   }
     * })
     * 
     */
    create<T extends ProduitCreateArgs>(args: SelectSubset<T, ProduitCreateArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Produits.
     * @param {ProduitCreateManyArgs} args - Arguments to create many Produits.
     * @example
     * // Create many Produits
     * const produit = await prisma.produit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProduitCreateManyArgs>(args?: SelectSubset<T, ProduitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Produits and returns the data saved in the database.
     * @param {ProduitCreateManyAndReturnArgs} args - Arguments to create many Produits.
     * @example
     * // Create many Produits
     * const produit = await prisma.produit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Produits and only return the `id`
     * const produitWithIdOnly = await prisma.produit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProduitCreateManyAndReturnArgs>(args?: SelectSubset<T, ProduitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Produit.
     * @param {ProduitDeleteArgs} args - Arguments to delete one Produit.
     * @example
     * // Delete one Produit
     * const Produit = await prisma.produit.delete({
     *   where: {
     *     // ... filter to delete one Produit
     *   }
     * })
     * 
     */
    delete<T extends ProduitDeleteArgs>(args: SelectSubset<T, ProduitDeleteArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Produit.
     * @param {ProduitUpdateArgs} args - Arguments to update one Produit.
     * @example
     * // Update one Produit
     * const produit = await prisma.produit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProduitUpdateArgs>(args: SelectSubset<T, ProduitUpdateArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Produits.
     * @param {ProduitDeleteManyArgs} args - Arguments to filter Produits to delete.
     * @example
     * // Delete a few Produits
     * const { count } = await prisma.produit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProduitDeleteManyArgs>(args?: SelectSubset<T, ProduitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produits
     * const produit = await prisma.produit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProduitUpdateManyArgs>(args: SelectSubset<T, ProduitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produits and returns the data updated in the database.
     * @param {ProduitUpdateManyAndReturnArgs} args - Arguments to update many Produits.
     * @example
     * // Update many Produits
     * const produit = await prisma.produit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Produits and only return the `id`
     * const produitWithIdOnly = await prisma.produit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProduitUpdateManyAndReturnArgs>(args: SelectSubset<T, ProduitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Produit.
     * @param {ProduitUpsertArgs} args - Arguments to update or create a Produit.
     * @example
     * // Update or create a Produit
     * const produit = await prisma.produit.upsert({
     *   create: {
     *     // ... data to create a Produit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produit we want to update
     *   }
     * })
     */
    upsert<T extends ProduitUpsertArgs>(args: SelectSubset<T, ProduitUpsertArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitCountArgs} args - Arguments to filter Produits to count.
     * @example
     * // Count the number of Produits
     * const count = await prisma.produit.count({
     *   where: {
     *     // ... the filter for the Produits we want to count
     *   }
     * })
    **/
    count<T extends ProduitCountArgs>(
      args?: Subset<T, ProduitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProduitAggregateArgs>(args: Subset<T, ProduitAggregateArgs>): Prisma.PrismaPromise<GetProduitAggregateType<T>>

    /**
     * Group by Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProduitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProduitGroupByArgs['orderBy'] }
        : { orderBy?: ProduitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProduitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produit model
   */
  readonly fields: ProduitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProduitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categorie<T extends CategorieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategorieDefaultArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    couleur<T extends CouleurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CouleurDefaultArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ligneCommande<T extends Produit$ligneCommandeArgs<ExtArgs> = {}>(args?: Subset<T, Produit$ligneCommandeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LigneCommandePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vendeur<T extends Produit$vendeurArgs<ExtArgs> = {}>(args?: Subset<T, Produit$vendeurArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    likes<T extends Produit$likesArgs<ExtArgs> = {}>(args?: Subset<T, Produit$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cartItems<T extends Produit$cartItemsArgs<ExtArgs> = {}>(args?: Subset<T, Produit$cartItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produit model
   */
  interface ProduitFieldRefs {
    readonly id: FieldRef<"Produit", 'Int'>
    readonly nom: FieldRef<"Produit", 'String'>
    readonly description: FieldRef<"Produit", 'String'>
    readonly prix: FieldRef<"Produit", 'Decimal'>
    readonly image: FieldRef<"Produit", 'String'>
    readonly taille: FieldRef<"Produit", 'Taille'>
    readonly categorieId: FieldRef<"Produit", 'Int'>
    readonly couleurId: FieldRef<"Produit", 'Int'>
    readonly vendeurId: FieldRef<"Produit", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Produit findUnique
   */
  export type ProduitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findUniqueOrThrow
   */
  export type ProduitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findFirst
   */
  export type ProduitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findFirstOrThrow
   */
  export type ProduitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findMany
   */
  export type ProduitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produits to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit create
   */
  export type ProduitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to create a Produit.
     */
    data: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
  }

  /**
   * Produit createMany
   */
  export type ProduitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produits.
     */
    data: ProduitCreateManyInput | ProduitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produit createManyAndReturn
   */
  export type ProduitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * The data used to create many Produits.
     */
    data: ProduitCreateManyInput | ProduitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Produit update
   */
  export type ProduitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to update a Produit.
     */
    data: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
    /**
     * Choose, which Produit to update.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit updateMany
   */
  export type ProduitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produits.
     */
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyInput>
    /**
     * Filter which Produits to update
     */
    where?: ProduitWhereInput
    /**
     * Limit how many Produits to update.
     */
    limit?: number
  }

  /**
   * Produit updateManyAndReturn
   */
  export type ProduitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * The data used to update Produits.
     */
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyInput>
    /**
     * Filter which Produits to update
     */
    where?: ProduitWhereInput
    /**
     * Limit how many Produits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Produit upsert
   */
  export type ProduitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The filter to search for the Produit to update in case it exists.
     */
    where: ProduitWhereUniqueInput
    /**
     * In case the Produit found by the `where` argument doesn't exist, create a new Produit with this data.
     */
    create: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
    /**
     * In case the Produit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
  }

  /**
   * Produit delete
   */
  export type ProduitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter which Produit to delete.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit deleteMany
   */
  export type ProduitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produits to delete
     */
    where?: ProduitWhereInput
    /**
     * Limit how many Produits to delete.
     */
    limit?: number
  }

  /**
   * Produit.ligneCommande
   */
  export type Produit$ligneCommandeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneCommande
     */
    select?: LigneCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LigneCommande
     */
    omit?: LigneCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneCommandeInclude<ExtArgs> | null
    where?: LigneCommandeWhereInput
    orderBy?: LigneCommandeOrderByWithRelationInput | LigneCommandeOrderByWithRelationInput[]
    cursor?: LigneCommandeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LigneCommandeScalarFieldEnum | LigneCommandeScalarFieldEnum[]
  }

  /**
   * Produit.vendeur
   */
  export type Produit$vendeurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Produit.likes
   */
  export type Produit$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Produit.cartItems
   */
  export type Produit$cartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Produit without action
   */
  export type ProduitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
  }


  /**
   * Model Categorie
   */

  export type AggregateCategorie = {
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  export type CategorieAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorieSumAggregateOutputType = {
    id: number | null
  }

  export type CategorieMinAggregateOutputType = {
    id: number | null
    type: $Enums.TypeCategorie | null
  }

  export type CategorieMaxAggregateOutputType = {
    id: number | null
    type: $Enums.TypeCategorie | null
  }

  export type CategorieCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type CategorieAvgAggregateInputType = {
    id?: true
  }

  export type CategorieSumAggregateInputType = {
    id?: true
  }

  export type CategorieMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type CategorieMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type CategorieCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type CategorieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorie to aggregate.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategorieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategorieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorieMaxAggregateInputType
  }

  export type GetCategorieAggregateType<T extends CategorieAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorie[P]>
      : GetScalarType<T[P], AggregateCategorie[P]>
  }




  export type CategorieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategorieWhereInput
    orderBy?: CategorieOrderByWithAggregationInput | CategorieOrderByWithAggregationInput[]
    by: CategorieScalarFieldEnum[] | CategorieScalarFieldEnum
    having?: CategorieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorieCountAggregateInputType | true
    _avg?: CategorieAvgAggregateInputType
    _sum?: CategorieSumAggregateInputType
    _min?: CategorieMinAggregateInputType
    _max?: CategorieMaxAggregateInputType
  }

  export type CategorieGroupByOutputType = {
    id: number
    type: $Enums.TypeCategorie
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  type GetCategorieGroupByPayload<T extends CategorieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategorieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorieGroupByOutputType[P]>
            : GetScalarType<T[P], CategorieGroupByOutputType[P]>
        }
      >
    >


  export type CategorieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    produits?: boolean | Categorie$produitsArgs<ExtArgs>
    _count?: boolean | CategorieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorie"]>

  export type CategorieSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
  }, ExtArgs["result"]["categorie"]>

  export type CategorieSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
  }, ExtArgs["result"]["categorie"]>

  export type CategorieSelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type CategorieOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type", ExtArgs["result"]["categorie"]>
  export type CategorieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | Categorie$produitsArgs<ExtArgs>
    _count?: boolean | CategorieCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategorieIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategorieIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoriePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categorie"
    objects: {
      produits: Prisma.$ProduitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: $Enums.TypeCategorie
    }, ExtArgs["result"]["categorie"]>
    composites: {}
  }

  type CategorieGetPayload<S extends boolean | null | undefined | CategorieDefaultArgs> = $Result.GetResult<Prisma.$CategoriePayload, S>

  type CategorieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategorieFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategorieCountAggregateInputType | true
    }

  export interface CategorieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categorie'], meta: { name: 'Categorie' } }
    /**
     * Find zero or one Categorie that matches the filter.
     * @param {CategorieFindUniqueArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategorieFindUniqueArgs>(args: SelectSubset<T, CategorieFindUniqueArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Categorie that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategorieFindUniqueOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategorieFindUniqueOrThrowArgs>(args: SelectSubset<T, CategorieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categorie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategorieFindFirstArgs>(args?: SelectSubset<T, CategorieFindFirstArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categorie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategorieFindFirstOrThrowArgs>(args?: SelectSubset<T, CategorieFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categorie.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categorie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categorieWithIdOnly = await prisma.categorie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategorieFindManyArgs>(args?: SelectSubset<T, CategorieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Categorie.
     * @param {CategorieCreateArgs} args - Arguments to create a Categorie.
     * @example
     * // Create one Categorie
     * const Categorie = await prisma.categorie.create({
     *   data: {
     *     // ... data to create a Categorie
     *   }
     * })
     * 
     */
    create<T extends CategorieCreateArgs>(args: SelectSubset<T, CategorieCreateArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategorieCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categorie = await prisma.categorie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategorieCreateManyArgs>(args?: SelectSubset<T, CategorieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategorieCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categorie = await prisma.categorie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categorieWithIdOnly = await prisma.categorie.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategorieCreateManyAndReturnArgs>(args?: SelectSubset<T, CategorieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Categorie.
     * @param {CategorieDeleteArgs} args - Arguments to delete one Categorie.
     * @example
     * // Delete one Categorie
     * const Categorie = await prisma.categorie.delete({
     *   where: {
     *     // ... filter to delete one Categorie
     *   }
     * })
     * 
     */
    delete<T extends CategorieDeleteArgs>(args: SelectSubset<T, CategorieDeleteArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Categorie.
     * @param {CategorieUpdateArgs} args - Arguments to update one Categorie.
     * @example
     * // Update one Categorie
     * const categorie = await prisma.categorie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategorieUpdateArgs>(args: SelectSubset<T, CategorieUpdateArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategorieDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categorie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategorieDeleteManyArgs>(args?: SelectSubset<T, CategorieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categorie = await prisma.categorie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategorieUpdateManyArgs>(args: SelectSubset<T, CategorieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategorieUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const categorie = await prisma.categorie.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categorieWithIdOnly = await prisma.categorie.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategorieUpdateManyAndReturnArgs>(args: SelectSubset<T, CategorieUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Categorie.
     * @param {CategorieUpsertArgs} args - Arguments to update or create a Categorie.
     * @example
     * // Update or create a Categorie
     * const categorie = await prisma.categorie.upsert({
     *   create: {
     *     // ... data to create a Categorie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorie we want to update
     *   }
     * })
     */
    upsert<T extends CategorieUpsertArgs>(args: SelectSubset<T, CategorieUpsertArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categorie.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategorieCountArgs>(
      args?: Subset<T, CategorieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorieAggregateArgs>(args: Subset<T, CategorieAggregateArgs>): Prisma.PrismaPromise<GetCategorieAggregateType<T>>

    /**
     * Group by Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorieGroupByArgs['orderBy'] }
        : { orderBy?: CategorieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categorie model
   */
  readonly fields: CategorieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategorieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produits<T extends Categorie$produitsArgs<ExtArgs> = {}>(args?: Subset<T, Categorie$produitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categorie model
   */
  interface CategorieFieldRefs {
    readonly id: FieldRef<"Categorie", 'Int'>
    readonly type: FieldRef<"Categorie", 'TypeCategorie'>
  }
    

  // Custom InputTypes
  /**
   * Categorie findUnique
   */
  export type CategorieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie findUniqueOrThrow
   */
  export type CategorieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie findFirst
   */
  export type CategorieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie findFirstOrThrow
   */
  export type CategorieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie findMany
   */
  export type CategorieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie create
   */
  export type CategorieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The data needed to create a Categorie.
     */
    data: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
  }

  /**
   * Categorie createMany
   */
  export type CategorieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategorieCreateManyInput | CategorieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categorie createManyAndReturn
   */
  export type CategorieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategorieCreateManyInput | CategorieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categorie update
   */
  export type CategorieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The data needed to update a Categorie.
     */
    data: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
    /**
     * Choose, which Categorie to update.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie updateMany
   */
  export type CategorieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategorieUpdateManyMutationInput, CategorieUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategorieWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Categorie updateManyAndReturn
   */
  export type CategorieUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategorieUpdateManyMutationInput, CategorieUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategorieWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Categorie upsert
   */
  export type CategorieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The filter to search for the Categorie to update in case it exists.
     */
    where: CategorieWhereUniqueInput
    /**
     * In case the Categorie found by the `where` argument doesn't exist, create a new Categorie with this data.
     */
    create: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
    /**
     * In case the Categorie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
  }

  /**
   * Categorie delete
   */
  export type CategorieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter which Categorie to delete.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie deleteMany
   */
  export type CategorieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategorieWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Categorie.produits
   */
  export type Categorie$produitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    cursor?: ProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Categorie without action
   */
  export type CategorieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorie
     */
    omit?: CategorieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
  }


  /**
   * Model Couleur
   */

  export type AggregateCouleur = {
    _count: CouleurCountAggregateOutputType | null
    _avg: CouleurAvgAggregateOutputType | null
    _sum: CouleurSumAggregateOutputType | null
    _min: CouleurMinAggregateOutputType | null
    _max: CouleurMaxAggregateOutputType | null
  }

  export type CouleurAvgAggregateOutputType = {
    id: number | null
  }

  export type CouleurSumAggregateOutputType = {
    id: number | null
  }

  export type CouleurMinAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type CouleurMaxAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type CouleurCountAggregateOutputType = {
    id: number
    nom: number
    _all: number
  }


  export type CouleurAvgAggregateInputType = {
    id?: true
  }

  export type CouleurSumAggregateInputType = {
    id?: true
  }

  export type CouleurMinAggregateInputType = {
    id?: true
    nom?: true
  }

  export type CouleurMaxAggregateInputType = {
    id?: true
    nom?: true
  }

  export type CouleurCountAggregateInputType = {
    id?: true
    nom?: true
    _all?: true
  }

  export type CouleurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Couleur to aggregate.
     */
    where?: CouleurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Couleurs to fetch.
     */
    orderBy?: CouleurOrderByWithRelationInput | CouleurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CouleurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Couleurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Couleurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Couleurs
    **/
    _count?: true | CouleurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CouleurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CouleurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CouleurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CouleurMaxAggregateInputType
  }

  export type GetCouleurAggregateType<T extends CouleurAggregateArgs> = {
        [P in keyof T & keyof AggregateCouleur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCouleur[P]>
      : GetScalarType<T[P], AggregateCouleur[P]>
  }




  export type CouleurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CouleurWhereInput
    orderBy?: CouleurOrderByWithAggregationInput | CouleurOrderByWithAggregationInput[]
    by: CouleurScalarFieldEnum[] | CouleurScalarFieldEnum
    having?: CouleurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CouleurCountAggregateInputType | true
    _avg?: CouleurAvgAggregateInputType
    _sum?: CouleurSumAggregateInputType
    _min?: CouleurMinAggregateInputType
    _max?: CouleurMaxAggregateInputType
  }

  export type CouleurGroupByOutputType = {
    id: number
    nom: string
    _count: CouleurCountAggregateOutputType | null
    _avg: CouleurAvgAggregateOutputType | null
    _sum: CouleurSumAggregateOutputType | null
    _min: CouleurMinAggregateOutputType | null
    _max: CouleurMaxAggregateOutputType | null
  }

  type GetCouleurGroupByPayload<T extends CouleurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CouleurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CouleurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CouleurGroupByOutputType[P]>
            : GetScalarType<T[P], CouleurGroupByOutputType[P]>
        }
      >
    >


  export type CouleurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    produits?: boolean | Couleur$produitsArgs<ExtArgs>
    _count?: boolean | CouleurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["couleur"]>

  export type CouleurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
  }, ExtArgs["result"]["couleur"]>

  export type CouleurSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
  }, ExtArgs["result"]["couleur"]>

  export type CouleurSelectScalar = {
    id?: boolean
    nom?: boolean
  }

  export type CouleurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom", ExtArgs["result"]["couleur"]>
  export type CouleurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | Couleur$produitsArgs<ExtArgs>
    _count?: boolean | CouleurCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CouleurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CouleurIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CouleurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Couleur"
    objects: {
      produits: Prisma.$ProduitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
    }, ExtArgs["result"]["couleur"]>
    composites: {}
  }

  type CouleurGetPayload<S extends boolean | null | undefined | CouleurDefaultArgs> = $Result.GetResult<Prisma.$CouleurPayload, S>

  type CouleurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CouleurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CouleurCountAggregateInputType | true
    }

  export interface CouleurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Couleur'], meta: { name: 'Couleur' } }
    /**
     * Find zero or one Couleur that matches the filter.
     * @param {CouleurFindUniqueArgs} args - Arguments to find a Couleur
     * @example
     * // Get one Couleur
     * const couleur = await prisma.couleur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CouleurFindUniqueArgs>(args: SelectSubset<T, CouleurFindUniqueArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Couleur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CouleurFindUniqueOrThrowArgs} args - Arguments to find a Couleur
     * @example
     * // Get one Couleur
     * const couleur = await prisma.couleur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CouleurFindUniqueOrThrowArgs>(args: SelectSubset<T, CouleurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Couleur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouleurFindFirstArgs} args - Arguments to find a Couleur
     * @example
     * // Get one Couleur
     * const couleur = await prisma.couleur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CouleurFindFirstArgs>(args?: SelectSubset<T, CouleurFindFirstArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Couleur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouleurFindFirstOrThrowArgs} args - Arguments to find a Couleur
     * @example
     * // Get one Couleur
     * const couleur = await prisma.couleur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CouleurFindFirstOrThrowArgs>(args?: SelectSubset<T, CouleurFindFirstOrThrowArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Couleurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouleurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Couleurs
     * const couleurs = await prisma.couleur.findMany()
     * 
     * // Get first 10 Couleurs
     * const couleurs = await prisma.couleur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const couleurWithIdOnly = await prisma.couleur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CouleurFindManyArgs>(args?: SelectSubset<T, CouleurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Couleur.
     * @param {CouleurCreateArgs} args - Arguments to create a Couleur.
     * @example
     * // Create one Couleur
     * const Couleur = await prisma.couleur.create({
     *   data: {
     *     // ... data to create a Couleur
     *   }
     * })
     * 
     */
    create<T extends CouleurCreateArgs>(args: SelectSubset<T, CouleurCreateArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Couleurs.
     * @param {CouleurCreateManyArgs} args - Arguments to create many Couleurs.
     * @example
     * // Create many Couleurs
     * const couleur = await prisma.couleur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CouleurCreateManyArgs>(args?: SelectSubset<T, CouleurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Couleurs and returns the data saved in the database.
     * @param {CouleurCreateManyAndReturnArgs} args - Arguments to create many Couleurs.
     * @example
     * // Create many Couleurs
     * const couleur = await prisma.couleur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Couleurs and only return the `id`
     * const couleurWithIdOnly = await prisma.couleur.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CouleurCreateManyAndReturnArgs>(args?: SelectSubset<T, CouleurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Couleur.
     * @param {CouleurDeleteArgs} args - Arguments to delete one Couleur.
     * @example
     * // Delete one Couleur
     * const Couleur = await prisma.couleur.delete({
     *   where: {
     *     // ... filter to delete one Couleur
     *   }
     * })
     * 
     */
    delete<T extends CouleurDeleteArgs>(args: SelectSubset<T, CouleurDeleteArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Couleur.
     * @param {CouleurUpdateArgs} args - Arguments to update one Couleur.
     * @example
     * // Update one Couleur
     * const couleur = await prisma.couleur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CouleurUpdateArgs>(args: SelectSubset<T, CouleurUpdateArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Couleurs.
     * @param {CouleurDeleteManyArgs} args - Arguments to filter Couleurs to delete.
     * @example
     * // Delete a few Couleurs
     * const { count } = await prisma.couleur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CouleurDeleteManyArgs>(args?: SelectSubset<T, CouleurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Couleurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouleurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Couleurs
     * const couleur = await prisma.couleur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CouleurUpdateManyArgs>(args: SelectSubset<T, CouleurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Couleurs and returns the data updated in the database.
     * @param {CouleurUpdateManyAndReturnArgs} args - Arguments to update many Couleurs.
     * @example
     * // Update many Couleurs
     * const couleur = await prisma.couleur.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Couleurs and only return the `id`
     * const couleurWithIdOnly = await prisma.couleur.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CouleurUpdateManyAndReturnArgs>(args: SelectSubset<T, CouleurUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Couleur.
     * @param {CouleurUpsertArgs} args - Arguments to update or create a Couleur.
     * @example
     * // Update or create a Couleur
     * const couleur = await prisma.couleur.upsert({
     *   create: {
     *     // ... data to create a Couleur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Couleur we want to update
     *   }
     * })
     */
    upsert<T extends CouleurUpsertArgs>(args: SelectSubset<T, CouleurUpsertArgs<ExtArgs>>): Prisma__CouleurClient<$Result.GetResult<Prisma.$CouleurPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Couleurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouleurCountArgs} args - Arguments to filter Couleurs to count.
     * @example
     * // Count the number of Couleurs
     * const count = await prisma.couleur.count({
     *   where: {
     *     // ... the filter for the Couleurs we want to count
     *   }
     * })
    **/
    count<T extends CouleurCountArgs>(
      args?: Subset<T, CouleurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CouleurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Couleur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouleurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CouleurAggregateArgs>(args: Subset<T, CouleurAggregateArgs>): Prisma.PrismaPromise<GetCouleurAggregateType<T>>

    /**
     * Group by Couleur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouleurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CouleurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CouleurGroupByArgs['orderBy'] }
        : { orderBy?: CouleurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CouleurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCouleurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Couleur model
   */
  readonly fields: CouleurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Couleur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CouleurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produits<T extends Couleur$produitsArgs<ExtArgs> = {}>(args?: Subset<T, Couleur$produitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Couleur model
   */
  interface CouleurFieldRefs {
    readonly id: FieldRef<"Couleur", 'Int'>
    readonly nom: FieldRef<"Couleur", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Couleur findUnique
   */
  export type CouleurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * Filter, which Couleur to fetch.
     */
    where: CouleurWhereUniqueInput
  }

  /**
   * Couleur findUniqueOrThrow
   */
  export type CouleurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * Filter, which Couleur to fetch.
     */
    where: CouleurWhereUniqueInput
  }

  /**
   * Couleur findFirst
   */
  export type CouleurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * Filter, which Couleur to fetch.
     */
    where?: CouleurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Couleurs to fetch.
     */
    orderBy?: CouleurOrderByWithRelationInput | CouleurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Couleurs.
     */
    cursor?: CouleurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Couleurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Couleurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Couleurs.
     */
    distinct?: CouleurScalarFieldEnum | CouleurScalarFieldEnum[]
  }

  /**
   * Couleur findFirstOrThrow
   */
  export type CouleurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * Filter, which Couleur to fetch.
     */
    where?: CouleurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Couleurs to fetch.
     */
    orderBy?: CouleurOrderByWithRelationInput | CouleurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Couleurs.
     */
    cursor?: CouleurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Couleurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Couleurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Couleurs.
     */
    distinct?: CouleurScalarFieldEnum | CouleurScalarFieldEnum[]
  }

  /**
   * Couleur findMany
   */
  export type CouleurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * Filter, which Couleurs to fetch.
     */
    where?: CouleurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Couleurs to fetch.
     */
    orderBy?: CouleurOrderByWithRelationInput | CouleurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Couleurs.
     */
    cursor?: CouleurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Couleurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Couleurs.
     */
    skip?: number
    distinct?: CouleurScalarFieldEnum | CouleurScalarFieldEnum[]
  }

  /**
   * Couleur create
   */
  export type CouleurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * The data needed to create a Couleur.
     */
    data: XOR<CouleurCreateInput, CouleurUncheckedCreateInput>
  }

  /**
   * Couleur createMany
   */
  export type CouleurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Couleurs.
     */
    data: CouleurCreateManyInput | CouleurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Couleur createManyAndReturn
   */
  export type CouleurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * The data used to create many Couleurs.
     */
    data: CouleurCreateManyInput | CouleurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Couleur update
   */
  export type CouleurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * The data needed to update a Couleur.
     */
    data: XOR<CouleurUpdateInput, CouleurUncheckedUpdateInput>
    /**
     * Choose, which Couleur to update.
     */
    where: CouleurWhereUniqueInput
  }

  /**
   * Couleur updateMany
   */
  export type CouleurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Couleurs.
     */
    data: XOR<CouleurUpdateManyMutationInput, CouleurUncheckedUpdateManyInput>
    /**
     * Filter which Couleurs to update
     */
    where?: CouleurWhereInput
    /**
     * Limit how many Couleurs to update.
     */
    limit?: number
  }

  /**
   * Couleur updateManyAndReturn
   */
  export type CouleurUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * The data used to update Couleurs.
     */
    data: XOR<CouleurUpdateManyMutationInput, CouleurUncheckedUpdateManyInput>
    /**
     * Filter which Couleurs to update
     */
    where?: CouleurWhereInput
    /**
     * Limit how many Couleurs to update.
     */
    limit?: number
  }

  /**
   * Couleur upsert
   */
  export type CouleurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * The filter to search for the Couleur to update in case it exists.
     */
    where: CouleurWhereUniqueInput
    /**
     * In case the Couleur found by the `where` argument doesn't exist, create a new Couleur with this data.
     */
    create: XOR<CouleurCreateInput, CouleurUncheckedCreateInput>
    /**
     * In case the Couleur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CouleurUpdateInput, CouleurUncheckedUpdateInput>
  }

  /**
   * Couleur delete
   */
  export type CouleurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
    /**
     * Filter which Couleur to delete.
     */
    where: CouleurWhereUniqueInput
  }

  /**
   * Couleur deleteMany
   */
  export type CouleurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Couleurs to delete
     */
    where?: CouleurWhereInput
    /**
     * Limit how many Couleurs to delete.
     */
    limit?: number
  }

  /**
   * Couleur.produits
   */
  export type Couleur$produitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produit
     */
    omit?: ProduitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    cursor?: ProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Couleur without action
   */
  export type CouleurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Couleur
     */
    select?: CouleurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Couleur
     */
    omit?: CouleurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouleurInclude<ExtArgs> | null
  }


  /**
   * Model Like
   */

  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeAvgAggregateOutputType = {
    id: number | null
    usersId: number | null
    produitId: number | null
  }

  export type LikeSumAggregateOutputType = {
    id: number | null
    usersId: number | null
    produitId: number | null
  }

  export type LikeMinAggregateOutputType = {
    id: number | null
    usersId: number | null
    produitId: number | null
    createdAt: Date | null
  }

  export type LikeMaxAggregateOutputType = {
    id: number | null
    usersId: number | null
    produitId: number | null
    createdAt: Date | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    usersId: number
    produitId: number
    createdAt: number
    _all: number
  }


  export type LikeAvgAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
  }

  export type LikeSumAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
  }

  export type LikeMinAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
    createdAt?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
    createdAt?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
    createdAt?: true
    _all?: true
  }

  export type LikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithAggregationInput | LikeOrderByWithAggregationInput[]
    by: LikeScalarFieldEnum[] | LikeScalarFieldEnum
    having?: LikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _avg?: LikeAvgAggregateInputType
    _sum?: LikeSumAggregateInputType
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }

  export type LikeGroupByOutputType = {
    id: number
    usersId: number
    produitId: number
    createdAt: Date
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type LikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    produitId?: boolean
    createdAt?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    produitId?: boolean
    createdAt?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    produitId?: boolean
    createdAt?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectScalar = {
    id?: boolean
    usersId?: boolean
    produitId?: boolean
    createdAt?: boolean
  }

  export type LikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usersId" | "produitId" | "createdAt", ExtArgs["result"]["like"]>
  export type LikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }
  export type LikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }
  export type LikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }

  export type $LikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Like"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>
      produit: Prisma.$ProduitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usersId: number
      produitId: number
      createdAt: Date
    }, ExtArgs["result"]["like"]>
    composites: {}
  }

  type LikeGetPayload<S extends boolean | null | undefined | LikeDefaultArgs> = $Result.GetResult<Prisma.$LikePayload, S>

  type LikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface LikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Like'], meta: { name: 'Like' } }
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeFindUniqueArgs>(args: SelectSubset<T, LikeFindUniqueArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Like that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeFindFirstArgs>(args?: SelectSubset<T, LikeFindFirstArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Like that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeFindManyArgs>(args?: SelectSubset<T, LikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
     */
    create<T extends LikeCreateArgs>(args: SelectSubset<T, LikeCreateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Likes.
     * @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeCreateManyArgs>(args?: SelectSubset<T, LikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likes and returns the data saved in the database.
     * @param {LikeCreateManyAndReturnArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikeCreateManyAndReturnArgs>(args?: SelectSubset<T, LikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
     */
    delete<T extends LikeDeleteArgs>(args: SelectSubset<T, LikeDeleteArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeUpdateArgs>(args: SelectSubset<T, LikeUpdateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeDeleteManyArgs>(args?: SelectSubset<T, LikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeUpdateManyArgs>(args: SelectSubset<T, LikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes and returns the data updated in the database.
     * @param {LikeUpdateManyAndReturnArgs} args - Arguments to update many Likes.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LikeUpdateManyAndReturnArgs>(args: SelectSubset<T, LikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
     */
    upsert<T extends LikeUpsertArgs>(args: SelectSubset<T, LikeUpsertArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Like model
   */
  readonly fields: LikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    produit<T extends ProduitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProduitDefaultArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Like model
   */
  interface LikeFieldRefs {
    readonly id: FieldRef<"Like", 'Int'>
    readonly usersId: FieldRef<"Like", 'Int'>
    readonly produitId: FieldRef<"Like", 'Int'>
    readonly createdAt: FieldRef<"Like", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findMany
   */
  export type LikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like create
   */
  export type LikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }

  /**
   * Like createMany
   */
  export type LikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Like createManyAndReturn
   */
  export type LikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Like update
   */
  export type LikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
    /**
     * Limit how many Likes to update.
     */
    limit?: number
  }

  /**
   * Like updateManyAndReturn
   */
  export type LikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
    /**
     * Limit how many Likes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Like upsert
   */
  export type LikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }

  /**
   * Like delete
   */
  export type LikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput
    /**
     * Limit how many Likes to delete.
     */
    limit?: number
  }

  /**
   * Like without action
   */
  export type LikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
  }


  /**
   * Model CartItem
   */

  export type AggregateCartItem = {
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  export type CartItemAvgAggregateOutputType = {
    id: number | null
    usersId: number | null
    produitId: number | null
    quantite: number | null
  }

  export type CartItemSumAggregateOutputType = {
    id: number | null
    usersId: number | null
    produitId: number | null
    quantite: number | null
  }

  export type CartItemMinAggregateOutputType = {
    id: number | null
    usersId: number | null
    produitId: number | null
    quantite: number | null
    createdAt: Date | null
  }

  export type CartItemMaxAggregateOutputType = {
    id: number | null
    usersId: number | null
    produitId: number | null
    quantite: number | null
    createdAt: Date | null
  }

  export type CartItemCountAggregateOutputType = {
    id: number
    usersId: number
    produitId: number
    quantite: number
    createdAt: number
    _all: number
  }


  export type CartItemAvgAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
    quantite?: true
  }

  export type CartItemSumAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
    quantite?: true
  }

  export type CartItemMinAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
    quantite?: true
    createdAt?: true
  }

  export type CartItemMaxAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
    quantite?: true
    createdAt?: true
  }

  export type CartItemCountAggregateInputType = {
    id?: true
    usersId?: true
    produitId?: true
    quantite?: true
    createdAt?: true
    _all?: true
  }

  export type CartItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItem to aggregate.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartItems
    **/
    _count?: true | CartItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartItemMaxAggregateInputType
  }

  export type GetCartItemAggregateType<T extends CartItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCartItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartItem[P]>
      : GetScalarType<T[P], AggregateCartItem[P]>
  }




  export type CartItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithAggregationInput | CartItemOrderByWithAggregationInput[]
    by: CartItemScalarFieldEnum[] | CartItemScalarFieldEnum
    having?: CartItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartItemCountAggregateInputType | true
    _avg?: CartItemAvgAggregateInputType
    _sum?: CartItemSumAggregateInputType
    _min?: CartItemMinAggregateInputType
    _max?: CartItemMaxAggregateInputType
  }

  export type CartItemGroupByOutputType = {
    id: number
    usersId: number
    produitId: number
    quantite: number
    createdAt: Date
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  type GetCartItemGroupByPayload<T extends CartItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartItemGroupByOutputType[P]>
            : GetScalarType<T[P], CartItemGroupByOutputType[P]>
        }
      >
    >


  export type CartItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    produitId?: boolean
    quantite?: boolean
    createdAt?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    produitId?: boolean
    quantite?: boolean
    createdAt?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    produitId?: boolean
    quantite?: boolean
    createdAt?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectScalar = {
    id?: boolean
    usersId?: boolean
    produitId?: boolean
    quantite?: boolean
    createdAt?: boolean
  }

  export type CartItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usersId" | "produitId" | "quantite" | "createdAt", ExtArgs["result"]["cartItem"]>
  export type CartItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }
  export type CartItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }
  export type CartItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }

  export type $CartItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartItem"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>
      produit: Prisma.$ProduitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usersId: number
      produitId: number
      quantite: number
      createdAt: Date
    }, ExtArgs["result"]["cartItem"]>
    composites: {}
  }

  type CartItemGetPayload<S extends boolean | null | undefined | CartItemDefaultArgs> = $Result.GetResult<Prisma.$CartItemPayload, S>

  type CartItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartItemCountAggregateInputType | true
    }

  export interface CartItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartItem'], meta: { name: 'CartItem' } }
    /**
     * Find zero or one CartItem that matches the filter.
     * @param {CartItemFindUniqueArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartItemFindUniqueArgs>(args: SelectSubset<T, CartItemFindUniqueArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CartItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartItemFindUniqueOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CartItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CartItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartItemFindFirstArgs>(args?: SelectSubset<T, CartItemFindFirstArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CartItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CartItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CartItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartItems
     * const cartItems = await prisma.cartItem.findMany()
     * 
     * // Get first 10 CartItems
     * const cartItems = await prisma.cartItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartItemFindManyArgs>(args?: SelectSubset<T, CartItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CartItem.
     * @param {CartItemCreateArgs} args - Arguments to create a CartItem.
     * @example
     * // Create one CartItem
     * const CartItem = await prisma.cartItem.create({
     *   data: {
     *     // ... data to create a CartItem
     *   }
     * })
     * 
     */
    create<T extends CartItemCreateArgs>(args: SelectSubset<T, CartItemCreateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CartItems.
     * @param {CartItemCreateManyArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartItemCreateManyArgs>(args?: SelectSubset<T, CartItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CartItems and returns the data saved in the database.
     * @param {CartItemCreateManyAndReturnArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CartItems and only return the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CartItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CartItem.
     * @param {CartItemDeleteArgs} args - Arguments to delete one CartItem.
     * @example
     * // Delete one CartItem
     * const CartItem = await prisma.cartItem.delete({
     *   where: {
     *     // ... filter to delete one CartItem
     *   }
     * })
     * 
     */
    delete<T extends CartItemDeleteArgs>(args: SelectSubset<T, CartItemDeleteArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CartItem.
     * @param {CartItemUpdateArgs} args - Arguments to update one CartItem.
     * @example
     * // Update one CartItem
     * const cartItem = await prisma.cartItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartItemUpdateArgs>(args: SelectSubset<T, CartItemUpdateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CartItems.
     * @param {CartItemDeleteManyArgs} args - Arguments to filter CartItems to delete.
     * @example
     * // Delete a few CartItems
     * const { count } = await prisma.cartItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartItemDeleteManyArgs>(args?: SelectSubset<T, CartItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartItemUpdateManyArgs>(args: SelectSubset<T, CartItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems and returns the data updated in the database.
     * @param {CartItemUpdateManyAndReturnArgs} args - Arguments to update many CartItems.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CartItems and only return the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartItemUpdateManyAndReturnArgs>(args: SelectSubset<T, CartItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CartItem.
     * @param {CartItemUpsertArgs} args - Arguments to update or create a CartItem.
     * @example
     * // Update or create a CartItem
     * const cartItem = await prisma.cartItem.upsert({
     *   create: {
     *     // ... data to create a CartItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartItem we want to update
     *   }
     * })
     */
    upsert<T extends CartItemUpsertArgs>(args: SelectSubset<T, CartItemUpsertArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemCountArgs} args - Arguments to filter CartItems to count.
     * @example
     * // Count the number of CartItems
     * const count = await prisma.cartItem.count({
     *   where: {
     *     // ... the filter for the CartItems we want to count
     *   }
     * })
    **/
    count<T extends CartItemCountArgs>(
      args?: Subset<T, CartItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartItemAggregateArgs>(args: Subset<T, CartItemAggregateArgs>): Prisma.PrismaPromise<GetCartItemAggregateType<T>>

    /**
     * Group by CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartItemGroupByArgs['orderBy'] }
        : { orderBy?: CartItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartItem model
   */
  readonly fields: CartItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    produit<T extends ProduitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProduitDefaultArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CartItem model
   */
  interface CartItemFieldRefs {
    readonly id: FieldRef<"CartItem", 'Int'>
    readonly usersId: FieldRef<"CartItem", 'Int'>
    readonly produitId: FieldRef<"CartItem", 'Int'>
    readonly quantite: FieldRef<"CartItem", 'Int'>
    readonly createdAt: FieldRef<"CartItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CartItem findUnique
   */
  export type CartItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findUniqueOrThrow
   */
  export type CartItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findFirst
   */
  export type CartItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findFirstOrThrow
   */
  export type CartItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findMany
   */
  export type CartItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItems to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem create
   */
  export type CartItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CartItem.
     */
    data: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
  }

  /**
   * CartItem createMany
   */
  export type CartItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartItem createManyAndReturn
   */
  export type CartItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartItem update
   */
  export type CartItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CartItem.
     */
    data: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
    /**
     * Choose, which CartItem to update.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem updateMany
   */
  export type CartItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
  }

  /**
   * CartItem updateManyAndReturn
   */
  export type CartItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartItem upsert
   */
  export type CartItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CartItem to update in case it exists.
     */
    where: CartItemWhereUniqueInput
    /**
     * In case the CartItem found by the `where` argument doesn't exist, create a new CartItem with this data.
     */
    create: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
    /**
     * In case the CartItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
  }

  /**
   * CartItem delete
   */
  export type CartItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter which CartItem to delete.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem deleteMany
   */
  export type CartItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItems to delete
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to delete.
     */
    limit?: number
  }

  /**
   * CartItem without action
   */
  export type CartItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    email: 'email',
    password: 'password',
    role: 'role',
    token: 'token',
    telephone: 'telephone',
    photoProfil: 'photoProfil',
    typeCouture: 'typeCouture',
    commentaire: 'commentaire',
    localisation: 'localisation',
    specialite: 'specialite'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    vendeurId: 'vendeurId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const CommandeScalarFieldEnum: {
    id: 'id',
    montant: 'montant',
    localisation: 'localisation',
    date: 'date',
    status: 'status',
    usersId: 'usersId'
  };

  export type CommandeScalarFieldEnum = (typeof CommandeScalarFieldEnum)[keyof typeof CommandeScalarFieldEnum]


  export const PayementScalarFieldEnum: {
    id: 'id',
    montant: 'montant',
    moyenDePayement: 'moyenDePayement',
    commandeId: 'commandeId'
  };

  export type PayementScalarFieldEnum = (typeof PayementScalarFieldEnum)[keyof typeof PayementScalarFieldEnum]


  export const LigneCommandeScalarFieldEnum: {
    id: 'id',
    prixUnitaire: 'prixUnitaire',
    quantite: 'quantite',
    total: 'total',
    date: 'date',
    commandeId: 'commandeId',
    produitId: 'produitId'
  };

  export type LigneCommandeScalarFieldEnum = (typeof LigneCommandeScalarFieldEnum)[keyof typeof LigneCommandeScalarFieldEnum]


  export const ProduitScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    description: 'description',
    prix: 'prix',
    image: 'image',
    taille: 'taille',
    categorieId: 'categorieId',
    couleurId: 'couleurId',
    vendeurId: 'vendeurId'
  };

  export type ProduitScalarFieldEnum = (typeof ProduitScalarFieldEnum)[keyof typeof ProduitScalarFieldEnum]


  export const CategorieScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type CategorieScalarFieldEnum = (typeof CategorieScalarFieldEnum)[keyof typeof CategorieScalarFieldEnum]


  export const CouleurScalarFieldEnum: {
    id: 'id',
    nom: 'nom'
  };

  export type CouleurScalarFieldEnum = (typeof CouleurScalarFieldEnum)[keyof typeof CouleurScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    usersId: 'usersId',
    produitId: 'produitId',
    createdAt: 'createdAt'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const CartItemScalarFieldEnum: {
    id: 'id',
    usersId: 'usersId',
    produitId: 'produitId',
    quantite: 'quantite',
    createdAt: 'createdAt'
  };

  export type CartItemScalarFieldEnum = (typeof CartItemScalarFieldEnum)[keyof typeof CartItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'TypeCouture[]'
   */
  export type ListEnumTypeCoutureFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeCouture[]'>
    


  /**
   * Reference to a field of type 'TypeCouture'
   */
  export type EnumTypeCoutureFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeCouture'>
    


  /**
   * Reference to a field of type 'Specialite[]'
   */
  export type ListEnumSpecialiteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Specialite[]'>
    


  /**
   * Reference to a field of type 'Specialite'
   */
  export type EnumSpecialiteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Specialite'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'MoyenDePayement'
   */
  export type EnumMoyenDePayementFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MoyenDePayement'>
    


  /**
   * Reference to a field of type 'MoyenDePayement[]'
   */
  export type ListEnumMoyenDePayementFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MoyenDePayement[]'>
    


  /**
   * Reference to a field of type 'Taille'
   */
  export type EnumTailleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Taille'>
    


  /**
   * Reference to a field of type 'Taille[]'
   */
  export type ListEnumTailleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Taille[]'>
    


  /**
   * Reference to a field of type 'TypeCategorie'
   */
  export type EnumTypeCategorieFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeCategorie'>
    


  /**
   * Reference to a field of type 'TypeCategorie[]'
   */
  export type ListEnumTypeCategorieFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeCategorie[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    nom?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role?: EnumRoleFilter<"Users"> | $Enums.Role
    token?: StringNullableFilter<"Users"> | string | null
    telephone?: StringNullableFilter<"Users"> | string | null
    photoProfil?: StringNullableFilter<"Users"> | string | null
    typeCouture?: EnumTypeCoutureNullableListFilter<"Users">
    commentaire?: StringNullableFilter<"Users"> | string | null
    localisation?: StringNullableFilter<"Users"> | string | null
    specialite?: EnumSpecialiteNullableListFilter<"Users">
    commande?: CommandeListRelationFilter
    produitsVendus?: ProduitListRelationFilter
    likes?: LikeListRelationFilter
    cartItems?: CartItemListRelationFilter
    authoredReviews?: ReviewListRelationFilter
    vendeurReviews?: ReviewListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    token?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    photoProfil?: SortOrderInput | SortOrder
    typeCouture?: SortOrder
    commentaire?: SortOrderInput | SortOrder
    localisation?: SortOrderInput | SortOrder
    specialite?: SortOrder
    commande?: CommandeOrderByRelationAggregateInput
    produitsVendus?: ProduitOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    cartItems?: CartItemOrderByRelationAggregateInput
    authoredReviews?: ReviewOrderByRelationAggregateInput
    vendeurReviews?: ReviewOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    token?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    nom?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role?: EnumRoleFilter<"Users"> | $Enums.Role
    telephone?: StringNullableFilter<"Users"> | string | null
    photoProfil?: StringNullableFilter<"Users"> | string | null
    typeCouture?: EnumTypeCoutureNullableListFilter<"Users">
    commentaire?: StringNullableFilter<"Users"> | string | null
    localisation?: StringNullableFilter<"Users"> | string | null
    specialite?: EnumSpecialiteNullableListFilter<"Users">
    commande?: CommandeListRelationFilter
    produitsVendus?: ProduitListRelationFilter
    likes?: LikeListRelationFilter
    cartItems?: CartItemListRelationFilter
    authoredReviews?: ReviewListRelationFilter
    vendeurReviews?: ReviewListRelationFilter
  }, "id" | "email" | "token">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    token?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    photoProfil?: SortOrderInput | SortOrder
    typeCouture?: SortOrder
    commentaire?: SortOrderInput | SortOrder
    localisation?: SortOrderInput | SortOrder
    specialite?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    nom?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    role?: EnumRoleWithAggregatesFilter<"Users"> | $Enums.Role
    token?: StringNullableWithAggregatesFilter<"Users"> | string | null
    telephone?: StringNullableWithAggregatesFilter<"Users"> | string | null
    photoProfil?: StringNullableWithAggregatesFilter<"Users"> | string | null
    typeCouture?: EnumTypeCoutureNullableListFilter<"Users">
    commentaire?: StringNullableWithAggregatesFilter<"Users"> | string | null
    localisation?: StringNullableWithAggregatesFilter<"Users"> | string | null
    specialite?: EnumSpecialiteNullableListFilter<"Users">
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    vendeurId?: IntFilter<"Review"> | number
    userId?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    vendeur?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    vendeurId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    vendeur?: UsersOrderByWithRelationInput
    user?: UsersOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    vendeurId?: IntFilter<"Review"> | number
    userId?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    vendeur?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    vendeurId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    vendeurId?: IntWithAggregatesFilter<"Review"> | number
    userId?: IntWithAggregatesFilter<"Review"> | number
    rating?: IntWithAggregatesFilter<"Review"> | number
    comment?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type CommandeWhereInput = {
    AND?: CommandeWhereInput | CommandeWhereInput[]
    OR?: CommandeWhereInput[]
    NOT?: CommandeWhereInput | CommandeWhereInput[]
    id?: IntFilter<"Commande"> | number
    montant?: DecimalFilter<"Commande"> | Decimal | DecimalJsLike | number | string
    localisation?: StringNullableFilter<"Commande"> | string | null
    date?: DateTimeFilter<"Commande"> | Date | string
    status?: EnumStatusFilter<"Commande"> | $Enums.Status
    usersId?: IntFilter<"Commande"> | number
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    ligneCommande?: LigneCommandeListRelationFilter
    payement?: PayementListRelationFilter
  }

  export type CommandeOrderByWithRelationInput = {
    id?: SortOrder
    montant?: SortOrder
    localisation?: SortOrderInput | SortOrder
    date?: SortOrder
    status?: SortOrder
    usersId?: SortOrder
    users?: UsersOrderByWithRelationInput
    ligneCommande?: LigneCommandeOrderByRelationAggregateInput
    payement?: PayementOrderByRelationAggregateInput
  }

  export type CommandeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommandeWhereInput | CommandeWhereInput[]
    OR?: CommandeWhereInput[]
    NOT?: CommandeWhereInput | CommandeWhereInput[]
    montant?: DecimalFilter<"Commande"> | Decimal | DecimalJsLike | number | string
    localisation?: StringNullableFilter<"Commande"> | string | null
    date?: DateTimeFilter<"Commande"> | Date | string
    status?: EnumStatusFilter<"Commande"> | $Enums.Status
    usersId?: IntFilter<"Commande"> | number
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    ligneCommande?: LigneCommandeListRelationFilter
    payement?: PayementListRelationFilter
  }, "id">

  export type CommandeOrderByWithAggregationInput = {
    id?: SortOrder
    montant?: SortOrder
    localisation?: SortOrderInput | SortOrder
    date?: SortOrder
    status?: SortOrder
    usersId?: SortOrder
    _count?: CommandeCountOrderByAggregateInput
    _avg?: CommandeAvgOrderByAggregateInput
    _max?: CommandeMaxOrderByAggregateInput
    _min?: CommandeMinOrderByAggregateInput
    _sum?: CommandeSumOrderByAggregateInput
  }

  export type CommandeScalarWhereWithAggregatesInput = {
    AND?: CommandeScalarWhereWithAggregatesInput | CommandeScalarWhereWithAggregatesInput[]
    OR?: CommandeScalarWhereWithAggregatesInput[]
    NOT?: CommandeScalarWhereWithAggregatesInput | CommandeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Commande"> | number
    montant?: DecimalWithAggregatesFilter<"Commande"> | Decimal | DecimalJsLike | number | string
    localisation?: StringNullableWithAggregatesFilter<"Commande"> | string | null
    date?: DateTimeWithAggregatesFilter<"Commande"> | Date | string
    status?: EnumStatusWithAggregatesFilter<"Commande"> | $Enums.Status
    usersId?: IntWithAggregatesFilter<"Commande"> | number
  }

  export type PayementWhereInput = {
    AND?: PayementWhereInput | PayementWhereInput[]
    OR?: PayementWhereInput[]
    NOT?: PayementWhereInput | PayementWhereInput[]
    id?: IntFilter<"Payement"> | number
    montant?: DecimalFilter<"Payement"> | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFilter<"Payement"> | $Enums.MoyenDePayement
    commandeId?: IntFilter<"Payement"> | number
    commande?: XOR<CommandeScalarRelationFilter, CommandeWhereInput>
  }

  export type PayementOrderByWithRelationInput = {
    id?: SortOrder
    montant?: SortOrder
    moyenDePayement?: SortOrder
    commandeId?: SortOrder
    commande?: CommandeOrderByWithRelationInput
  }

  export type PayementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    commandeId?: number
    AND?: PayementWhereInput | PayementWhereInput[]
    OR?: PayementWhereInput[]
    NOT?: PayementWhereInput | PayementWhereInput[]
    montant?: DecimalFilter<"Payement"> | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFilter<"Payement"> | $Enums.MoyenDePayement
    commande?: XOR<CommandeScalarRelationFilter, CommandeWhereInput>
  }, "id" | "commandeId">

  export type PayementOrderByWithAggregationInput = {
    id?: SortOrder
    montant?: SortOrder
    moyenDePayement?: SortOrder
    commandeId?: SortOrder
    _count?: PayementCountOrderByAggregateInput
    _avg?: PayementAvgOrderByAggregateInput
    _max?: PayementMaxOrderByAggregateInput
    _min?: PayementMinOrderByAggregateInput
    _sum?: PayementSumOrderByAggregateInput
  }

  export type PayementScalarWhereWithAggregatesInput = {
    AND?: PayementScalarWhereWithAggregatesInput | PayementScalarWhereWithAggregatesInput[]
    OR?: PayementScalarWhereWithAggregatesInput[]
    NOT?: PayementScalarWhereWithAggregatesInput | PayementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payement"> | number
    montant?: DecimalWithAggregatesFilter<"Payement"> | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementWithAggregatesFilter<"Payement"> | $Enums.MoyenDePayement
    commandeId?: IntWithAggregatesFilter<"Payement"> | number
  }

  export type LigneCommandeWhereInput = {
    AND?: LigneCommandeWhereInput | LigneCommandeWhereInput[]
    OR?: LigneCommandeWhereInput[]
    NOT?: LigneCommandeWhereInput | LigneCommandeWhereInput[]
    id?: IntFilter<"LigneCommande"> | number
    prixUnitaire?: DecimalFilter<"LigneCommande"> | Decimal | DecimalJsLike | number | string
    quantite?: IntFilter<"LigneCommande"> | number
    total?: DecimalFilter<"LigneCommande"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"LigneCommande"> | Date | string
    commandeId?: IntFilter<"LigneCommande"> | number
    produitId?: IntFilter<"LigneCommande"> | number
    commande?: XOR<CommandeScalarRelationFilter, CommandeWhereInput>
    produit?: XOR<ProduitScalarRelationFilter, ProduitWhereInput>
  }

  export type LigneCommandeOrderByWithRelationInput = {
    id?: SortOrder
    prixUnitaire?: SortOrder
    quantite?: SortOrder
    total?: SortOrder
    date?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    commande?: CommandeOrderByWithRelationInput
    produit?: ProduitOrderByWithRelationInput
  }

  export type LigneCommandeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LigneCommandeWhereInput | LigneCommandeWhereInput[]
    OR?: LigneCommandeWhereInput[]
    NOT?: LigneCommandeWhereInput | LigneCommandeWhereInput[]
    prixUnitaire?: DecimalFilter<"LigneCommande"> | Decimal | DecimalJsLike | number | string
    quantite?: IntFilter<"LigneCommande"> | number
    total?: DecimalFilter<"LigneCommande"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"LigneCommande"> | Date | string
    commandeId?: IntFilter<"LigneCommande"> | number
    produitId?: IntFilter<"LigneCommande"> | number
    commande?: XOR<CommandeScalarRelationFilter, CommandeWhereInput>
    produit?: XOR<ProduitScalarRelationFilter, ProduitWhereInput>
  }, "id">

  export type LigneCommandeOrderByWithAggregationInput = {
    id?: SortOrder
    prixUnitaire?: SortOrder
    quantite?: SortOrder
    total?: SortOrder
    date?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    _count?: LigneCommandeCountOrderByAggregateInput
    _avg?: LigneCommandeAvgOrderByAggregateInput
    _max?: LigneCommandeMaxOrderByAggregateInput
    _min?: LigneCommandeMinOrderByAggregateInput
    _sum?: LigneCommandeSumOrderByAggregateInput
  }

  export type LigneCommandeScalarWhereWithAggregatesInput = {
    AND?: LigneCommandeScalarWhereWithAggregatesInput | LigneCommandeScalarWhereWithAggregatesInput[]
    OR?: LigneCommandeScalarWhereWithAggregatesInput[]
    NOT?: LigneCommandeScalarWhereWithAggregatesInput | LigneCommandeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LigneCommande"> | number
    prixUnitaire?: DecimalWithAggregatesFilter<"LigneCommande"> | Decimal | DecimalJsLike | number | string
    quantite?: IntWithAggregatesFilter<"LigneCommande"> | number
    total?: DecimalWithAggregatesFilter<"LigneCommande"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeWithAggregatesFilter<"LigneCommande"> | Date | string
    commandeId?: IntWithAggregatesFilter<"LigneCommande"> | number
    produitId?: IntWithAggregatesFilter<"LigneCommande"> | number
  }

  export type ProduitWhereInput = {
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    id?: IntFilter<"Produit"> | number
    nom?: StringFilter<"Produit"> | string
    description?: StringFilter<"Produit"> | string
    prix?: DecimalFilter<"Produit"> | Decimal | DecimalJsLike | number | string
    image?: StringNullableFilter<"Produit"> | string | null
    taille?: EnumTailleFilter<"Produit"> | $Enums.Taille
    categorieId?: IntFilter<"Produit"> | number
    couleurId?: IntFilter<"Produit"> | number
    vendeurId?: IntNullableFilter<"Produit"> | number | null
    categorie?: XOR<CategorieScalarRelationFilter, CategorieWhereInput>
    couleur?: XOR<CouleurScalarRelationFilter, CouleurWhereInput>
    ligneCommande?: LigneCommandeListRelationFilter
    vendeur?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
    likes?: LikeListRelationFilter
    cartItems?: CartItemListRelationFilter
  }

  export type ProduitOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    image?: SortOrderInput | SortOrder
    taille?: SortOrder
    categorieId?: SortOrder
    couleurId?: SortOrder
    vendeurId?: SortOrderInput | SortOrder
    categorie?: CategorieOrderByWithRelationInput
    couleur?: CouleurOrderByWithRelationInput
    ligneCommande?: LigneCommandeOrderByRelationAggregateInput
    vendeur?: UsersOrderByWithRelationInput
    likes?: LikeOrderByRelationAggregateInput
    cartItems?: CartItemOrderByRelationAggregateInput
  }

  export type ProduitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    nom?: StringFilter<"Produit"> | string
    description?: StringFilter<"Produit"> | string
    prix?: DecimalFilter<"Produit"> | Decimal | DecimalJsLike | number | string
    image?: StringNullableFilter<"Produit"> | string | null
    taille?: EnumTailleFilter<"Produit"> | $Enums.Taille
    categorieId?: IntFilter<"Produit"> | number
    couleurId?: IntFilter<"Produit"> | number
    vendeurId?: IntNullableFilter<"Produit"> | number | null
    categorie?: XOR<CategorieScalarRelationFilter, CategorieWhereInput>
    couleur?: XOR<CouleurScalarRelationFilter, CouleurWhereInput>
    ligneCommande?: LigneCommandeListRelationFilter
    vendeur?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
    likes?: LikeListRelationFilter
    cartItems?: CartItemListRelationFilter
  }, "id">

  export type ProduitOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    image?: SortOrderInput | SortOrder
    taille?: SortOrder
    categorieId?: SortOrder
    couleurId?: SortOrder
    vendeurId?: SortOrderInput | SortOrder
    _count?: ProduitCountOrderByAggregateInput
    _avg?: ProduitAvgOrderByAggregateInput
    _max?: ProduitMaxOrderByAggregateInput
    _min?: ProduitMinOrderByAggregateInput
    _sum?: ProduitSumOrderByAggregateInput
  }

  export type ProduitScalarWhereWithAggregatesInput = {
    AND?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    OR?: ProduitScalarWhereWithAggregatesInput[]
    NOT?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produit"> | number
    nom?: StringWithAggregatesFilter<"Produit"> | string
    description?: StringWithAggregatesFilter<"Produit"> | string
    prix?: DecimalWithAggregatesFilter<"Produit"> | Decimal | DecimalJsLike | number | string
    image?: StringNullableWithAggregatesFilter<"Produit"> | string | null
    taille?: EnumTailleWithAggregatesFilter<"Produit"> | $Enums.Taille
    categorieId?: IntWithAggregatesFilter<"Produit"> | number
    couleurId?: IntWithAggregatesFilter<"Produit"> | number
    vendeurId?: IntNullableWithAggregatesFilter<"Produit"> | number | null
  }

  export type CategorieWhereInput = {
    AND?: CategorieWhereInput | CategorieWhereInput[]
    OR?: CategorieWhereInput[]
    NOT?: CategorieWhereInput | CategorieWhereInput[]
    id?: IntFilter<"Categorie"> | number
    type?: EnumTypeCategorieFilter<"Categorie"> | $Enums.TypeCategorie
    produits?: ProduitListRelationFilter
  }

  export type CategorieOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    produits?: ProduitOrderByRelationAggregateInput
  }

  export type CategorieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategorieWhereInput | CategorieWhereInput[]
    OR?: CategorieWhereInput[]
    NOT?: CategorieWhereInput | CategorieWhereInput[]
    type?: EnumTypeCategorieFilter<"Categorie"> | $Enums.TypeCategorie
    produits?: ProduitListRelationFilter
  }, "id">

  export type CategorieOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: CategorieCountOrderByAggregateInput
    _avg?: CategorieAvgOrderByAggregateInput
    _max?: CategorieMaxOrderByAggregateInput
    _min?: CategorieMinOrderByAggregateInput
    _sum?: CategorieSumOrderByAggregateInput
  }

  export type CategorieScalarWhereWithAggregatesInput = {
    AND?: CategorieScalarWhereWithAggregatesInput | CategorieScalarWhereWithAggregatesInput[]
    OR?: CategorieScalarWhereWithAggregatesInput[]
    NOT?: CategorieScalarWhereWithAggregatesInput | CategorieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categorie"> | number
    type?: EnumTypeCategorieWithAggregatesFilter<"Categorie"> | $Enums.TypeCategorie
  }

  export type CouleurWhereInput = {
    AND?: CouleurWhereInput | CouleurWhereInput[]
    OR?: CouleurWhereInput[]
    NOT?: CouleurWhereInput | CouleurWhereInput[]
    id?: IntFilter<"Couleur"> | number
    nom?: StringFilter<"Couleur"> | string
    produits?: ProduitListRelationFilter
  }

  export type CouleurOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    produits?: ProduitOrderByRelationAggregateInput
  }

  export type CouleurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: CouleurWhereInput | CouleurWhereInput[]
    OR?: CouleurWhereInput[]
    NOT?: CouleurWhereInput | CouleurWhereInput[]
    produits?: ProduitListRelationFilter
  }, "id" | "nom">

  export type CouleurOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    _count?: CouleurCountOrderByAggregateInput
    _avg?: CouleurAvgOrderByAggregateInput
    _max?: CouleurMaxOrderByAggregateInput
    _min?: CouleurMinOrderByAggregateInput
    _sum?: CouleurSumOrderByAggregateInput
  }

  export type CouleurScalarWhereWithAggregatesInput = {
    AND?: CouleurScalarWhereWithAggregatesInput | CouleurScalarWhereWithAggregatesInput[]
    OR?: CouleurScalarWhereWithAggregatesInput[]
    NOT?: CouleurScalarWhereWithAggregatesInput | CouleurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Couleur"> | number
    nom?: StringWithAggregatesFilter<"Couleur"> | string
  }

  export type LikeWhereInput = {
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    id?: IntFilter<"Like"> | number
    usersId?: IntFilter<"Like"> | number
    produitId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    produit?: XOR<ProduitScalarRelationFilter, ProduitWhereInput>
  }

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    createdAt?: SortOrder
    users?: UsersOrderByWithRelationInput
    produit?: ProduitOrderByWithRelationInput
  }

  export type LikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usersId_produitId?: LikeUsersIdProduitIdCompoundUniqueInput
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    usersId?: IntFilter<"Like"> | number
    produitId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    produit?: XOR<ProduitScalarRelationFilter, ProduitWhereInput>
  }, "id" | "usersId_produitId">

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    createdAt?: SortOrder
    _count?: LikeCountOrderByAggregateInput
    _avg?: LikeAvgOrderByAggregateInput
    _max?: LikeMaxOrderByAggregateInput
    _min?: LikeMinOrderByAggregateInput
    _sum?: LikeSumOrderByAggregateInput
  }

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    OR?: LikeScalarWhereWithAggregatesInput[]
    NOT?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Like"> | number
    usersId?: IntWithAggregatesFilter<"Like"> | number
    produitId?: IntWithAggregatesFilter<"Like"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Like"> | Date | string
  }

  export type CartItemWhereInput = {
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    id?: IntFilter<"CartItem"> | number
    usersId?: IntFilter<"CartItem"> | number
    produitId?: IntFilter<"CartItem"> | number
    quantite?: IntFilter<"CartItem"> | number
    createdAt?: DateTimeFilter<"CartItem"> | Date | string
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    produit?: XOR<ProduitScalarRelationFilter, ProduitWhereInput>
  }

  export type CartItemOrderByWithRelationInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    createdAt?: SortOrder
    users?: UsersOrderByWithRelationInput
    produit?: ProduitOrderByWithRelationInput
  }

  export type CartItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usersId_produitId?: CartItemUsersIdProduitIdCompoundUniqueInput
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    usersId?: IntFilter<"CartItem"> | number
    produitId?: IntFilter<"CartItem"> | number
    quantite?: IntFilter<"CartItem"> | number
    createdAt?: DateTimeFilter<"CartItem"> | Date | string
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    produit?: XOR<ProduitScalarRelationFilter, ProduitWhereInput>
  }, "id" | "usersId_produitId">

  export type CartItemOrderByWithAggregationInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    createdAt?: SortOrder
    _count?: CartItemCountOrderByAggregateInput
    _avg?: CartItemAvgOrderByAggregateInput
    _max?: CartItemMaxOrderByAggregateInput
    _min?: CartItemMinOrderByAggregateInput
    _sum?: CartItemSumOrderByAggregateInput
  }

  export type CartItemScalarWhereWithAggregatesInput = {
    AND?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    OR?: CartItemScalarWhereWithAggregatesInput[]
    NOT?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CartItem"> | number
    usersId?: IntWithAggregatesFilter<"CartItem"> | number
    produitId?: IntWithAggregatesFilter<"CartItem"> | number
    quantite?: IntWithAggregatesFilter<"CartItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CartItem"> | Date | string
  }

  export type UsersCreateInput = {
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitCreateNestedManyWithoutVendeurInput
    likes?: LikeCreateNestedManyWithoutUsersInput
    cartItems?: CartItemCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewCreateNestedManyWithoutVendeurInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitUncheckedCreateNestedManyWithoutVendeurInput
    likes?: LikeUncheckedCreateNestedManyWithoutUsersInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type UsersUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUpdateManyWithoutVendeurNestedInput
    likes?: LikeUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUpdateManyWithoutVendeurNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUncheckedUpdateManyWithoutVendeurNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
  }

  export type UsersUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
  }

  export type ReviewCreateInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    vendeur: UsersCreateNestedOneWithoutVendeurReviewsInput
    user: UsersCreateNestedOneWithoutAuthoredReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    vendeurId: number
    userId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendeur?: UsersUpdateOneRequiredWithoutVendeurReviewsNestedInput
    user?: UsersUpdateOneRequiredWithoutAuthoredReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendeurId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: number
    vendeurId: number
    userId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendeurId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommandeCreateInput = {
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    users: UsersCreateNestedOneWithoutCommandeInput
    ligneCommande?: LigneCommandeCreateNestedManyWithoutCommandeInput
    payement?: PayementCreateNestedManyWithoutCommandeInput
  }

  export type CommandeUncheckedCreateInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    usersId: number
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutCommandeInput
    payement?: PayementUncheckedCreateNestedManyWithoutCommandeInput
  }

  export type CommandeUpdateInput = {
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    users?: UsersUpdateOneRequiredWithoutCommandeNestedInput
    ligneCommande?: LigneCommandeUpdateManyWithoutCommandeNestedInput
    payement?: PayementUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    usersId?: IntFieldUpdateOperationsInput | number
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutCommandeNestedInput
    payement?: PayementUncheckedUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeCreateManyInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    usersId: number
  }

  export type CommandeUpdateManyMutationInput = {
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type CommandeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    usersId?: IntFieldUpdateOperationsInput | number
  }

  export type PayementCreateInput = {
    montant: Decimal | DecimalJsLike | number | string
    moyenDePayement: $Enums.MoyenDePayement
    commande: CommandeCreateNestedOneWithoutPayementInput
  }

  export type PayementUncheckedCreateInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    moyenDePayement: $Enums.MoyenDePayement
    commandeId: number
  }

  export type PayementUpdateInput = {
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFieldUpdateOperationsInput | $Enums.MoyenDePayement
    commande?: CommandeUpdateOneRequiredWithoutPayementNestedInput
  }

  export type PayementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFieldUpdateOperationsInput | $Enums.MoyenDePayement
    commandeId?: IntFieldUpdateOperationsInput | number
  }

  export type PayementCreateManyInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    moyenDePayement: $Enums.MoyenDePayement
    commandeId: number
  }

  export type PayementUpdateManyMutationInput = {
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFieldUpdateOperationsInput | $Enums.MoyenDePayement
  }

  export type PayementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFieldUpdateOperationsInput | $Enums.MoyenDePayement
    commandeId?: IntFieldUpdateOperationsInput | number
  }

  export type LigneCommandeCreateInput = {
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    commande: CommandeCreateNestedOneWithoutLigneCommandeInput
    produit: ProduitCreateNestedOneWithoutLigneCommandeInput
  }

  export type LigneCommandeUncheckedCreateInput = {
    id?: number
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    commandeId: number
    produitId: number
  }

  export type LigneCommandeUpdateInput = {
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commande?: CommandeUpdateOneRequiredWithoutLigneCommandeNestedInput
    produit?: ProduitUpdateOneRequiredWithoutLigneCommandeNestedInput
  }

  export type LigneCommandeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commandeId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type LigneCommandeCreateManyInput = {
    id?: number
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    commandeId: number
    produitId: number
  }

  export type LigneCommandeUpdateManyMutationInput = {
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LigneCommandeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commandeId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type ProduitCreateInput = {
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorie: CategorieCreateNestedOneWithoutProduitsInput
    couleur: CouleurCreateNestedOneWithoutProduitsInput
    ligneCommande?: LigneCommandeCreateNestedManyWithoutProduitInput
    vendeur?: UsersCreateNestedOneWithoutProduitsVendusInput
    likes?: LikeCreateNestedManyWithoutProduitInput
    cartItems?: CartItemCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    couleurId: number
    vendeurId?: number | null
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutProduitInput
    likes?: LikeUncheckedCreateNestedManyWithoutProduitInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorie?: CategorieUpdateOneRequiredWithoutProduitsNestedInput
    couleur?: CouleurUpdateOneRequiredWithoutProduitsNestedInput
    ligneCommande?: LigneCommandeUpdateManyWithoutProduitNestedInput
    vendeur?: UsersUpdateOneWithoutProduitsVendusNestedInput
    likes?: LikeUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    couleurId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutProduitNestedInput
    likes?: LikeUncheckedUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitCreateManyInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    couleurId: number
    vendeurId?: number | null
  }

  export type ProduitUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
  }

  export type ProduitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    couleurId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategorieCreateInput = {
    type: $Enums.TypeCategorie
    produits?: ProduitCreateNestedManyWithoutCategorieInput
  }

  export type CategorieUncheckedCreateInput = {
    id?: number
    type: $Enums.TypeCategorie
    produits?: ProduitUncheckedCreateNestedManyWithoutCategorieInput
  }

  export type CategorieUpdateInput = {
    type?: EnumTypeCategorieFieldUpdateOperationsInput | $Enums.TypeCategorie
    produits?: ProduitUpdateManyWithoutCategorieNestedInput
  }

  export type CategorieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeCategorieFieldUpdateOperationsInput | $Enums.TypeCategorie
    produits?: ProduitUncheckedUpdateManyWithoutCategorieNestedInput
  }

  export type CategorieCreateManyInput = {
    id?: number
    type: $Enums.TypeCategorie
  }

  export type CategorieUpdateManyMutationInput = {
    type?: EnumTypeCategorieFieldUpdateOperationsInput | $Enums.TypeCategorie
  }

  export type CategorieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeCategorieFieldUpdateOperationsInput | $Enums.TypeCategorie
  }

  export type CouleurCreateInput = {
    nom: string
    produits?: ProduitCreateNestedManyWithoutCouleurInput
  }

  export type CouleurUncheckedCreateInput = {
    id?: number
    nom: string
    produits?: ProduitUncheckedCreateNestedManyWithoutCouleurInput
  }

  export type CouleurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    produits?: ProduitUpdateManyWithoutCouleurNestedInput
  }

  export type CouleurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    produits?: ProduitUncheckedUpdateManyWithoutCouleurNestedInput
  }

  export type CouleurCreateManyInput = {
    id?: number
    nom: string
  }

  export type CouleurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type CouleurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type LikeCreateInput = {
    createdAt?: Date | string
    users: UsersCreateNestedOneWithoutLikesInput
    produit: ProduitCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateInput = {
    id?: number
    usersId: number
    produitId: number
    createdAt?: Date | string
  }

  export type LikeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutLikesNestedInput
    produit?: ProduitUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateManyInput = {
    id?: number
    usersId: number
    produitId: number
    createdAt?: Date | string
  }

  export type LikeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemCreateInput = {
    quantite?: number
    createdAt?: Date | string
    users: UsersCreateNestedOneWithoutCartItemsInput
    produit: ProduitCreateNestedOneWithoutCartItemsInput
  }

  export type CartItemUncheckedCreateInput = {
    id?: number
    usersId: number
    produitId: number
    quantite?: number
    createdAt?: Date | string
  }

  export type CartItemUpdateInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutCartItemsNestedInput
    produit?: ProduitUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type CartItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemCreateManyInput = {
    id?: number
    usersId: number
    produitId: number
    quantite?: number
    createdAt?: Date | string
  }

  export type CartItemUpdateManyMutationInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumTypeCoutureNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeCouture[] | ListEnumTypeCoutureFieldRefInput<$PrismaModel> | null
    has?: $Enums.TypeCouture | EnumTypeCoutureFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.TypeCouture[] | ListEnumTypeCoutureFieldRefInput<$PrismaModel>
    hasSome?: $Enums.TypeCouture[] | ListEnumTypeCoutureFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumSpecialiteNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Specialite[] | ListEnumSpecialiteFieldRefInput<$PrismaModel> | null
    has?: $Enums.Specialite | EnumSpecialiteFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Specialite[] | ListEnumSpecialiteFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Specialite[] | ListEnumSpecialiteFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CommandeListRelationFilter = {
    every?: CommandeWhereInput
    some?: CommandeWhereInput
    none?: CommandeWhereInput
  }

  export type ProduitListRelationFilter = {
    every?: ProduitWhereInput
    some?: ProduitWhereInput
    none?: ProduitWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type CartItemListRelationFilter = {
    every?: CartItemWhereInput
    some?: CartItemWhereInput
    none?: CartItemWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CommandeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProduitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    token?: SortOrder
    telephone?: SortOrder
    photoProfil?: SortOrder
    typeCouture?: SortOrder
    commentaire?: SortOrder
    localisation?: SortOrder
    specialite?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    token?: SortOrder
    telephone?: SortOrder
    photoProfil?: SortOrder
    commentaire?: SortOrder
    localisation?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    token?: SortOrder
    telephone?: SortOrder
    photoProfil?: SortOrder
    commentaire?: SortOrder
    localisation?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    vendeurId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    vendeurId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    vendeurId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    vendeurId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    vendeurId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type LigneCommandeListRelationFilter = {
    every?: LigneCommandeWhereInput
    some?: LigneCommandeWhereInput
    none?: LigneCommandeWhereInput
  }

  export type PayementListRelationFilter = {
    every?: PayementWhereInput
    some?: PayementWhereInput
    none?: PayementWhereInput
  }

  export type LigneCommandeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommandeCountOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    localisation?: SortOrder
    date?: SortOrder
    status?: SortOrder
    usersId?: SortOrder
  }

  export type CommandeAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    usersId?: SortOrder
  }

  export type CommandeMaxOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    localisation?: SortOrder
    date?: SortOrder
    status?: SortOrder
    usersId?: SortOrder
  }

  export type CommandeMinOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    localisation?: SortOrder
    date?: SortOrder
    status?: SortOrder
    usersId?: SortOrder
  }

  export type CommandeSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    usersId?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type EnumMoyenDePayementFilter<$PrismaModel = never> = {
    equals?: $Enums.MoyenDePayement | EnumMoyenDePayementFieldRefInput<$PrismaModel>
    in?: $Enums.MoyenDePayement[] | ListEnumMoyenDePayementFieldRefInput<$PrismaModel>
    notIn?: $Enums.MoyenDePayement[] | ListEnumMoyenDePayementFieldRefInput<$PrismaModel>
    not?: NestedEnumMoyenDePayementFilter<$PrismaModel> | $Enums.MoyenDePayement
  }

  export type CommandeScalarRelationFilter = {
    is?: CommandeWhereInput
    isNot?: CommandeWhereInput
  }

  export type PayementCountOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    moyenDePayement?: SortOrder
    commandeId?: SortOrder
  }

  export type PayementAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    commandeId?: SortOrder
  }

  export type PayementMaxOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    moyenDePayement?: SortOrder
    commandeId?: SortOrder
  }

  export type PayementMinOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    moyenDePayement?: SortOrder
    commandeId?: SortOrder
  }

  export type PayementSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    commandeId?: SortOrder
  }

  export type EnumMoyenDePayementWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MoyenDePayement | EnumMoyenDePayementFieldRefInput<$PrismaModel>
    in?: $Enums.MoyenDePayement[] | ListEnumMoyenDePayementFieldRefInput<$PrismaModel>
    notIn?: $Enums.MoyenDePayement[] | ListEnumMoyenDePayementFieldRefInput<$PrismaModel>
    not?: NestedEnumMoyenDePayementWithAggregatesFilter<$PrismaModel> | $Enums.MoyenDePayement
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMoyenDePayementFilter<$PrismaModel>
    _max?: NestedEnumMoyenDePayementFilter<$PrismaModel>
  }

  export type ProduitScalarRelationFilter = {
    is?: ProduitWhereInput
    isNot?: ProduitWhereInput
  }

  export type LigneCommandeCountOrderByAggregateInput = {
    id?: SortOrder
    prixUnitaire?: SortOrder
    quantite?: SortOrder
    total?: SortOrder
    date?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
  }

  export type LigneCommandeAvgOrderByAggregateInput = {
    id?: SortOrder
    prixUnitaire?: SortOrder
    quantite?: SortOrder
    total?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
  }

  export type LigneCommandeMaxOrderByAggregateInput = {
    id?: SortOrder
    prixUnitaire?: SortOrder
    quantite?: SortOrder
    total?: SortOrder
    date?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
  }

  export type LigneCommandeMinOrderByAggregateInput = {
    id?: SortOrder
    prixUnitaire?: SortOrder
    quantite?: SortOrder
    total?: SortOrder
    date?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
  }

  export type LigneCommandeSumOrderByAggregateInput = {
    id?: SortOrder
    prixUnitaire?: SortOrder
    quantite?: SortOrder
    total?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
  }

  export type EnumTailleFilter<$PrismaModel = never> = {
    equals?: $Enums.Taille | EnumTailleFieldRefInput<$PrismaModel>
    in?: $Enums.Taille[] | ListEnumTailleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Taille[] | ListEnumTailleFieldRefInput<$PrismaModel>
    not?: NestedEnumTailleFilter<$PrismaModel> | $Enums.Taille
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategorieScalarRelationFilter = {
    is?: CategorieWhereInput
    isNot?: CategorieWhereInput
  }

  export type CouleurScalarRelationFilter = {
    is?: CouleurWhereInput
    isNot?: CouleurWhereInput
  }

  export type UsersNullableScalarRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type ProduitCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    image?: SortOrder
    taille?: SortOrder
    categorieId?: SortOrder
    couleurId?: SortOrder
    vendeurId?: SortOrder
  }

  export type ProduitAvgOrderByAggregateInput = {
    id?: SortOrder
    prix?: SortOrder
    categorieId?: SortOrder
    couleurId?: SortOrder
    vendeurId?: SortOrder
  }

  export type ProduitMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    image?: SortOrder
    taille?: SortOrder
    categorieId?: SortOrder
    couleurId?: SortOrder
    vendeurId?: SortOrder
  }

  export type ProduitMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    image?: SortOrder
    taille?: SortOrder
    categorieId?: SortOrder
    couleurId?: SortOrder
    vendeurId?: SortOrder
  }

  export type ProduitSumOrderByAggregateInput = {
    id?: SortOrder
    prix?: SortOrder
    categorieId?: SortOrder
    couleurId?: SortOrder
    vendeurId?: SortOrder
  }

  export type EnumTailleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Taille | EnumTailleFieldRefInput<$PrismaModel>
    in?: $Enums.Taille[] | ListEnumTailleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Taille[] | ListEnumTailleFieldRefInput<$PrismaModel>
    not?: NestedEnumTailleWithAggregatesFilter<$PrismaModel> | $Enums.Taille
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTailleFilter<$PrismaModel>
    _max?: NestedEnumTailleFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTypeCategorieFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeCategorie | EnumTypeCategorieFieldRefInput<$PrismaModel>
    in?: $Enums.TypeCategorie[] | ListEnumTypeCategorieFieldRefInput<$PrismaModel>
    notIn?: $Enums.TypeCategorie[] | ListEnumTypeCategorieFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeCategorieFilter<$PrismaModel> | $Enums.TypeCategorie
  }

  export type CategorieCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type CategorieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategorieMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type CategorieMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type CategorieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumTypeCategorieWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeCategorie | EnumTypeCategorieFieldRefInput<$PrismaModel>
    in?: $Enums.TypeCategorie[] | ListEnumTypeCategorieFieldRefInput<$PrismaModel>
    notIn?: $Enums.TypeCategorie[] | ListEnumTypeCategorieFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeCategorieWithAggregatesFilter<$PrismaModel> | $Enums.TypeCategorie
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeCategorieFilter<$PrismaModel>
    _max?: NestedEnumTypeCategorieFilter<$PrismaModel>
  }

  export type CouleurCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CouleurAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CouleurMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CouleurMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CouleurSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LikeUsersIdProduitIdCompoundUniqueInput = {
    usersId: number
    produitId: number
  }

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeAvgOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
  }

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeSumOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
  }

  export type CartItemUsersIdProduitIdCompoundUniqueInput = {
    usersId: number
    produitId: number
  }

  export type CartItemCountOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    createdAt?: SortOrder
  }

  export type CartItemAvgOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
  }

  export type CartItemMaxOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    createdAt?: SortOrder
  }

  export type CartItemMinOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    createdAt?: SortOrder
  }

  export type CartItemSumOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
  }

  export type UsersCreatetypeCoutureInput = {
    set: $Enums.TypeCouture[]
  }

  export type UsersCreatespecialiteInput = {
    set: $Enums.Specialite[]
  }

  export type CommandeCreateNestedManyWithoutUsersInput = {
    create?: XOR<CommandeCreateWithoutUsersInput, CommandeUncheckedCreateWithoutUsersInput> | CommandeCreateWithoutUsersInput[] | CommandeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CommandeCreateOrConnectWithoutUsersInput | CommandeCreateOrConnectWithoutUsersInput[]
    createMany?: CommandeCreateManyUsersInputEnvelope
    connect?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
  }

  export type ProduitCreateNestedManyWithoutVendeurInput = {
    create?: XOR<ProduitCreateWithoutVendeurInput, ProduitUncheckedCreateWithoutVendeurInput> | ProduitCreateWithoutVendeurInput[] | ProduitUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutVendeurInput | ProduitCreateOrConnectWithoutVendeurInput[]
    createMany?: ProduitCreateManyVendeurInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutUsersInput = {
    create?: XOR<LikeCreateWithoutUsersInput, LikeUncheckedCreateWithoutUsersInput> | LikeCreateWithoutUsersInput[] | LikeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUsersInput | LikeCreateOrConnectWithoutUsersInput[]
    createMany?: LikeCreateManyUsersInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutUsersInput = {
    create?: XOR<CartItemCreateWithoutUsersInput, CartItemUncheckedCreateWithoutUsersInput> | CartItemCreateWithoutUsersInput[] | CartItemUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutUsersInput | CartItemCreateOrConnectWithoutUsersInput[]
    createMany?: CartItemCreateManyUsersInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutVendeurInput = {
    create?: XOR<ReviewCreateWithoutVendeurInput, ReviewUncheckedCreateWithoutVendeurInput> | ReviewCreateWithoutVendeurInput[] | ReviewUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutVendeurInput | ReviewCreateOrConnectWithoutVendeurInput[]
    createMany?: ReviewCreateManyVendeurInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type CommandeUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<CommandeCreateWithoutUsersInput, CommandeUncheckedCreateWithoutUsersInput> | CommandeCreateWithoutUsersInput[] | CommandeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CommandeCreateOrConnectWithoutUsersInput | CommandeCreateOrConnectWithoutUsersInput[]
    createMany?: CommandeCreateManyUsersInputEnvelope
    connect?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
  }

  export type ProduitUncheckedCreateNestedManyWithoutVendeurInput = {
    create?: XOR<ProduitCreateWithoutVendeurInput, ProduitUncheckedCreateWithoutVendeurInput> | ProduitCreateWithoutVendeurInput[] | ProduitUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutVendeurInput | ProduitCreateOrConnectWithoutVendeurInput[]
    createMany?: ProduitCreateManyVendeurInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<LikeCreateWithoutUsersInput, LikeUncheckedCreateWithoutUsersInput> | LikeCreateWithoutUsersInput[] | LikeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUsersInput | LikeCreateOrConnectWithoutUsersInput[]
    createMany?: LikeCreateManyUsersInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<CartItemCreateWithoutUsersInput, CartItemUncheckedCreateWithoutUsersInput> | CartItemCreateWithoutUsersInput[] | CartItemUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutUsersInput | CartItemCreateOrConnectWithoutUsersInput[]
    createMany?: CartItemCreateManyUsersInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutVendeurInput = {
    create?: XOR<ReviewCreateWithoutVendeurInput, ReviewUncheckedCreateWithoutVendeurInput> | ReviewCreateWithoutVendeurInput[] | ReviewUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutVendeurInput | ReviewCreateOrConnectWithoutVendeurInput[]
    createMany?: ReviewCreateManyVendeurInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsersUpdatetypeCoutureInput = {
    set?: $Enums.TypeCouture[]
    push?: $Enums.TypeCouture | $Enums.TypeCouture[]
  }

  export type UsersUpdatespecialiteInput = {
    set?: $Enums.Specialite[]
    push?: $Enums.Specialite | $Enums.Specialite[]
  }

  export type CommandeUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CommandeCreateWithoutUsersInput, CommandeUncheckedCreateWithoutUsersInput> | CommandeCreateWithoutUsersInput[] | CommandeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CommandeCreateOrConnectWithoutUsersInput | CommandeCreateOrConnectWithoutUsersInput[]
    upsert?: CommandeUpsertWithWhereUniqueWithoutUsersInput | CommandeUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: CommandeCreateManyUsersInputEnvelope
    set?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
    disconnect?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
    delete?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
    connect?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
    update?: CommandeUpdateWithWhereUniqueWithoutUsersInput | CommandeUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CommandeUpdateManyWithWhereWithoutUsersInput | CommandeUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CommandeScalarWhereInput | CommandeScalarWhereInput[]
  }

  export type ProduitUpdateManyWithoutVendeurNestedInput = {
    create?: XOR<ProduitCreateWithoutVendeurInput, ProduitUncheckedCreateWithoutVendeurInput> | ProduitCreateWithoutVendeurInput[] | ProduitUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutVendeurInput | ProduitCreateOrConnectWithoutVendeurInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutVendeurInput | ProduitUpsertWithWhereUniqueWithoutVendeurInput[]
    createMany?: ProduitCreateManyVendeurInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutVendeurInput | ProduitUpdateWithWhereUniqueWithoutVendeurInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutVendeurInput | ProduitUpdateManyWithWhereWithoutVendeurInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LikeCreateWithoutUsersInput, LikeUncheckedCreateWithoutUsersInput> | LikeCreateWithoutUsersInput[] | LikeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUsersInput | LikeCreateOrConnectWithoutUsersInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUsersInput | LikeUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: LikeCreateManyUsersInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUsersInput | LikeUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUsersInput | LikeUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CartItemCreateWithoutUsersInput, CartItemUncheckedCreateWithoutUsersInput> | CartItemCreateWithoutUsersInput[] | CartItemUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutUsersInput | CartItemCreateOrConnectWithoutUsersInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutUsersInput | CartItemUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: CartItemCreateManyUsersInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutUsersInput | CartItemUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutUsersInput | CartItemUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutVendeurNestedInput = {
    create?: XOR<ReviewCreateWithoutVendeurInput, ReviewUncheckedCreateWithoutVendeurInput> | ReviewCreateWithoutVendeurInput[] | ReviewUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutVendeurInput | ReviewCreateOrConnectWithoutVendeurInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutVendeurInput | ReviewUpsertWithWhereUniqueWithoutVendeurInput[]
    createMany?: ReviewCreateManyVendeurInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutVendeurInput | ReviewUpdateWithWhereUniqueWithoutVendeurInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutVendeurInput | ReviewUpdateManyWithWhereWithoutVendeurInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CommandeUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CommandeCreateWithoutUsersInput, CommandeUncheckedCreateWithoutUsersInput> | CommandeCreateWithoutUsersInput[] | CommandeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CommandeCreateOrConnectWithoutUsersInput | CommandeCreateOrConnectWithoutUsersInput[]
    upsert?: CommandeUpsertWithWhereUniqueWithoutUsersInput | CommandeUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: CommandeCreateManyUsersInputEnvelope
    set?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
    disconnect?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
    delete?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
    connect?: CommandeWhereUniqueInput | CommandeWhereUniqueInput[]
    update?: CommandeUpdateWithWhereUniqueWithoutUsersInput | CommandeUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CommandeUpdateManyWithWhereWithoutUsersInput | CommandeUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CommandeScalarWhereInput | CommandeScalarWhereInput[]
  }

  export type ProduitUncheckedUpdateManyWithoutVendeurNestedInput = {
    create?: XOR<ProduitCreateWithoutVendeurInput, ProduitUncheckedCreateWithoutVendeurInput> | ProduitCreateWithoutVendeurInput[] | ProduitUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutVendeurInput | ProduitCreateOrConnectWithoutVendeurInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutVendeurInput | ProduitUpsertWithWhereUniqueWithoutVendeurInput[]
    createMany?: ProduitCreateManyVendeurInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutVendeurInput | ProduitUpdateWithWhereUniqueWithoutVendeurInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutVendeurInput | ProduitUpdateManyWithWhereWithoutVendeurInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LikeCreateWithoutUsersInput, LikeUncheckedCreateWithoutUsersInput> | LikeCreateWithoutUsersInput[] | LikeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUsersInput | LikeCreateOrConnectWithoutUsersInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUsersInput | LikeUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: LikeCreateManyUsersInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUsersInput | LikeUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUsersInput | LikeUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CartItemCreateWithoutUsersInput, CartItemUncheckedCreateWithoutUsersInput> | CartItemCreateWithoutUsersInput[] | CartItemUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutUsersInput | CartItemCreateOrConnectWithoutUsersInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutUsersInput | CartItemUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: CartItemCreateManyUsersInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutUsersInput | CartItemUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutUsersInput | CartItemUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutVendeurNestedInput = {
    create?: XOR<ReviewCreateWithoutVendeurInput, ReviewUncheckedCreateWithoutVendeurInput> | ReviewCreateWithoutVendeurInput[] | ReviewUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutVendeurInput | ReviewCreateOrConnectWithoutVendeurInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutVendeurInput | ReviewUpsertWithWhereUniqueWithoutVendeurInput[]
    createMany?: ReviewCreateManyVendeurInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutVendeurInput | ReviewUpdateWithWhereUniqueWithoutVendeurInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutVendeurInput | ReviewUpdateManyWithWhereWithoutVendeurInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutVendeurReviewsInput = {
    create?: XOR<UsersCreateWithoutVendeurReviewsInput, UsersUncheckedCreateWithoutVendeurReviewsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutVendeurReviewsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutAuthoredReviewsInput = {
    create?: XOR<UsersCreateWithoutAuthoredReviewsInput, UsersUncheckedCreateWithoutAuthoredReviewsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAuthoredReviewsInput
    connect?: UsersWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsersUpdateOneRequiredWithoutVendeurReviewsNestedInput = {
    create?: XOR<UsersCreateWithoutVendeurReviewsInput, UsersUncheckedCreateWithoutVendeurReviewsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutVendeurReviewsInput
    upsert?: UsersUpsertWithoutVendeurReviewsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutVendeurReviewsInput, UsersUpdateWithoutVendeurReviewsInput>, UsersUncheckedUpdateWithoutVendeurReviewsInput>
  }

  export type UsersUpdateOneRequiredWithoutAuthoredReviewsNestedInput = {
    create?: XOR<UsersCreateWithoutAuthoredReviewsInput, UsersUncheckedCreateWithoutAuthoredReviewsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAuthoredReviewsInput
    upsert?: UsersUpsertWithoutAuthoredReviewsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAuthoredReviewsInput, UsersUpdateWithoutAuthoredReviewsInput>, UsersUncheckedUpdateWithoutAuthoredReviewsInput>
  }

  export type UsersCreateNestedOneWithoutCommandeInput = {
    create?: XOR<UsersCreateWithoutCommandeInput, UsersUncheckedCreateWithoutCommandeInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCommandeInput
    connect?: UsersWhereUniqueInput
  }

  export type LigneCommandeCreateNestedManyWithoutCommandeInput = {
    create?: XOR<LigneCommandeCreateWithoutCommandeInput, LigneCommandeUncheckedCreateWithoutCommandeInput> | LigneCommandeCreateWithoutCommandeInput[] | LigneCommandeUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: LigneCommandeCreateOrConnectWithoutCommandeInput | LigneCommandeCreateOrConnectWithoutCommandeInput[]
    createMany?: LigneCommandeCreateManyCommandeInputEnvelope
    connect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
  }

  export type PayementCreateNestedManyWithoutCommandeInput = {
    create?: XOR<PayementCreateWithoutCommandeInput, PayementUncheckedCreateWithoutCommandeInput> | PayementCreateWithoutCommandeInput[] | PayementUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: PayementCreateOrConnectWithoutCommandeInput | PayementCreateOrConnectWithoutCommandeInput[]
    createMany?: PayementCreateManyCommandeInputEnvelope
    connect?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
  }

  export type LigneCommandeUncheckedCreateNestedManyWithoutCommandeInput = {
    create?: XOR<LigneCommandeCreateWithoutCommandeInput, LigneCommandeUncheckedCreateWithoutCommandeInput> | LigneCommandeCreateWithoutCommandeInput[] | LigneCommandeUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: LigneCommandeCreateOrConnectWithoutCommandeInput | LigneCommandeCreateOrConnectWithoutCommandeInput[]
    createMany?: LigneCommandeCreateManyCommandeInputEnvelope
    connect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
  }

  export type PayementUncheckedCreateNestedManyWithoutCommandeInput = {
    create?: XOR<PayementCreateWithoutCommandeInput, PayementUncheckedCreateWithoutCommandeInput> | PayementCreateWithoutCommandeInput[] | PayementUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: PayementCreateOrConnectWithoutCommandeInput | PayementCreateOrConnectWithoutCommandeInput[]
    createMany?: PayementCreateManyCommandeInputEnvelope
    connect?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UsersUpdateOneRequiredWithoutCommandeNestedInput = {
    create?: XOR<UsersCreateWithoutCommandeInput, UsersUncheckedCreateWithoutCommandeInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCommandeInput
    upsert?: UsersUpsertWithoutCommandeInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCommandeInput, UsersUpdateWithoutCommandeInput>, UsersUncheckedUpdateWithoutCommandeInput>
  }

  export type LigneCommandeUpdateManyWithoutCommandeNestedInput = {
    create?: XOR<LigneCommandeCreateWithoutCommandeInput, LigneCommandeUncheckedCreateWithoutCommandeInput> | LigneCommandeCreateWithoutCommandeInput[] | LigneCommandeUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: LigneCommandeCreateOrConnectWithoutCommandeInput | LigneCommandeCreateOrConnectWithoutCommandeInput[]
    upsert?: LigneCommandeUpsertWithWhereUniqueWithoutCommandeInput | LigneCommandeUpsertWithWhereUniqueWithoutCommandeInput[]
    createMany?: LigneCommandeCreateManyCommandeInputEnvelope
    set?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    disconnect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    delete?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    connect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    update?: LigneCommandeUpdateWithWhereUniqueWithoutCommandeInput | LigneCommandeUpdateWithWhereUniqueWithoutCommandeInput[]
    updateMany?: LigneCommandeUpdateManyWithWhereWithoutCommandeInput | LigneCommandeUpdateManyWithWhereWithoutCommandeInput[]
    deleteMany?: LigneCommandeScalarWhereInput | LigneCommandeScalarWhereInput[]
  }

  export type PayementUpdateManyWithoutCommandeNestedInput = {
    create?: XOR<PayementCreateWithoutCommandeInput, PayementUncheckedCreateWithoutCommandeInput> | PayementCreateWithoutCommandeInput[] | PayementUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: PayementCreateOrConnectWithoutCommandeInput | PayementCreateOrConnectWithoutCommandeInput[]
    upsert?: PayementUpsertWithWhereUniqueWithoutCommandeInput | PayementUpsertWithWhereUniqueWithoutCommandeInput[]
    createMany?: PayementCreateManyCommandeInputEnvelope
    set?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
    disconnect?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
    delete?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
    connect?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
    update?: PayementUpdateWithWhereUniqueWithoutCommandeInput | PayementUpdateWithWhereUniqueWithoutCommandeInput[]
    updateMany?: PayementUpdateManyWithWhereWithoutCommandeInput | PayementUpdateManyWithWhereWithoutCommandeInput[]
    deleteMany?: PayementScalarWhereInput | PayementScalarWhereInput[]
  }

  export type LigneCommandeUncheckedUpdateManyWithoutCommandeNestedInput = {
    create?: XOR<LigneCommandeCreateWithoutCommandeInput, LigneCommandeUncheckedCreateWithoutCommandeInput> | LigneCommandeCreateWithoutCommandeInput[] | LigneCommandeUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: LigneCommandeCreateOrConnectWithoutCommandeInput | LigneCommandeCreateOrConnectWithoutCommandeInput[]
    upsert?: LigneCommandeUpsertWithWhereUniqueWithoutCommandeInput | LigneCommandeUpsertWithWhereUniqueWithoutCommandeInput[]
    createMany?: LigneCommandeCreateManyCommandeInputEnvelope
    set?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    disconnect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    delete?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    connect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    update?: LigneCommandeUpdateWithWhereUniqueWithoutCommandeInput | LigneCommandeUpdateWithWhereUniqueWithoutCommandeInput[]
    updateMany?: LigneCommandeUpdateManyWithWhereWithoutCommandeInput | LigneCommandeUpdateManyWithWhereWithoutCommandeInput[]
    deleteMany?: LigneCommandeScalarWhereInput | LigneCommandeScalarWhereInput[]
  }

  export type PayementUncheckedUpdateManyWithoutCommandeNestedInput = {
    create?: XOR<PayementCreateWithoutCommandeInput, PayementUncheckedCreateWithoutCommandeInput> | PayementCreateWithoutCommandeInput[] | PayementUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: PayementCreateOrConnectWithoutCommandeInput | PayementCreateOrConnectWithoutCommandeInput[]
    upsert?: PayementUpsertWithWhereUniqueWithoutCommandeInput | PayementUpsertWithWhereUniqueWithoutCommandeInput[]
    createMany?: PayementCreateManyCommandeInputEnvelope
    set?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
    disconnect?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
    delete?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
    connect?: PayementWhereUniqueInput | PayementWhereUniqueInput[]
    update?: PayementUpdateWithWhereUniqueWithoutCommandeInput | PayementUpdateWithWhereUniqueWithoutCommandeInput[]
    updateMany?: PayementUpdateManyWithWhereWithoutCommandeInput | PayementUpdateManyWithWhereWithoutCommandeInput[]
    deleteMany?: PayementScalarWhereInput | PayementScalarWhereInput[]
  }

  export type CommandeCreateNestedOneWithoutPayementInput = {
    create?: XOR<CommandeCreateWithoutPayementInput, CommandeUncheckedCreateWithoutPayementInput>
    connectOrCreate?: CommandeCreateOrConnectWithoutPayementInput
    connect?: CommandeWhereUniqueInput
  }

  export type EnumMoyenDePayementFieldUpdateOperationsInput = {
    set?: $Enums.MoyenDePayement
  }

  export type CommandeUpdateOneRequiredWithoutPayementNestedInput = {
    create?: XOR<CommandeCreateWithoutPayementInput, CommandeUncheckedCreateWithoutPayementInput>
    connectOrCreate?: CommandeCreateOrConnectWithoutPayementInput
    upsert?: CommandeUpsertWithoutPayementInput
    connect?: CommandeWhereUniqueInput
    update?: XOR<XOR<CommandeUpdateToOneWithWhereWithoutPayementInput, CommandeUpdateWithoutPayementInput>, CommandeUncheckedUpdateWithoutPayementInput>
  }

  export type CommandeCreateNestedOneWithoutLigneCommandeInput = {
    create?: XOR<CommandeCreateWithoutLigneCommandeInput, CommandeUncheckedCreateWithoutLigneCommandeInput>
    connectOrCreate?: CommandeCreateOrConnectWithoutLigneCommandeInput
    connect?: CommandeWhereUniqueInput
  }

  export type ProduitCreateNestedOneWithoutLigneCommandeInput = {
    create?: XOR<ProduitCreateWithoutLigneCommandeInput, ProduitUncheckedCreateWithoutLigneCommandeInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutLigneCommandeInput
    connect?: ProduitWhereUniqueInput
  }

  export type CommandeUpdateOneRequiredWithoutLigneCommandeNestedInput = {
    create?: XOR<CommandeCreateWithoutLigneCommandeInput, CommandeUncheckedCreateWithoutLigneCommandeInput>
    connectOrCreate?: CommandeCreateOrConnectWithoutLigneCommandeInput
    upsert?: CommandeUpsertWithoutLigneCommandeInput
    connect?: CommandeWhereUniqueInput
    update?: XOR<XOR<CommandeUpdateToOneWithWhereWithoutLigneCommandeInput, CommandeUpdateWithoutLigneCommandeInput>, CommandeUncheckedUpdateWithoutLigneCommandeInput>
  }

  export type ProduitUpdateOneRequiredWithoutLigneCommandeNestedInput = {
    create?: XOR<ProduitCreateWithoutLigneCommandeInput, ProduitUncheckedCreateWithoutLigneCommandeInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutLigneCommandeInput
    upsert?: ProduitUpsertWithoutLigneCommandeInput
    connect?: ProduitWhereUniqueInput
    update?: XOR<XOR<ProduitUpdateToOneWithWhereWithoutLigneCommandeInput, ProduitUpdateWithoutLigneCommandeInput>, ProduitUncheckedUpdateWithoutLigneCommandeInput>
  }

  export type CategorieCreateNestedOneWithoutProduitsInput = {
    create?: XOR<CategorieCreateWithoutProduitsInput, CategorieUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutProduitsInput
    connect?: CategorieWhereUniqueInput
  }

  export type CouleurCreateNestedOneWithoutProduitsInput = {
    create?: XOR<CouleurCreateWithoutProduitsInput, CouleurUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: CouleurCreateOrConnectWithoutProduitsInput
    connect?: CouleurWhereUniqueInput
  }

  export type LigneCommandeCreateNestedManyWithoutProduitInput = {
    create?: XOR<LigneCommandeCreateWithoutProduitInput, LigneCommandeUncheckedCreateWithoutProduitInput> | LigneCommandeCreateWithoutProduitInput[] | LigneCommandeUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LigneCommandeCreateOrConnectWithoutProduitInput | LigneCommandeCreateOrConnectWithoutProduitInput[]
    createMany?: LigneCommandeCreateManyProduitInputEnvelope
    connect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
  }

  export type UsersCreateNestedOneWithoutProduitsVendusInput = {
    create?: XOR<UsersCreateWithoutProduitsVendusInput, UsersUncheckedCreateWithoutProduitsVendusInput>
    connectOrCreate?: UsersCreateOrConnectWithoutProduitsVendusInput
    connect?: UsersWhereUniqueInput
  }

  export type LikeCreateNestedManyWithoutProduitInput = {
    create?: XOR<LikeCreateWithoutProduitInput, LikeUncheckedCreateWithoutProduitInput> | LikeCreateWithoutProduitInput[] | LikeUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutProduitInput | LikeCreateOrConnectWithoutProduitInput[]
    createMany?: LikeCreateManyProduitInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutProduitInput = {
    create?: XOR<CartItemCreateWithoutProduitInput, CartItemUncheckedCreateWithoutProduitInput> | CartItemCreateWithoutProduitInput[] | CartItemUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProduitInput | CartItemCreateOrConnectWithoutProduitInput[]
    createMany?: CartItemCreateManyProduitInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type LigneCommandeUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<LigneCommandeCreateWithoutProduitInput, LigneCommandeUncheckedCreateWithoutProduitInput> | LigneCommandeCreateWithoutProduitInput[] | LigneCommandeUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LigneCommandeCreateOrConnectWithoutProduitInput | LigneCommandeCreateOrConnectWithoutProduitInput[]
    createMany?: LigneCommandeCreateManyProduitInputEnvelope
    connect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<LikeCreateWithoutProduitInput, LikeUncheckedCreateWithoutProduitInput> | LikeCreateWithoutProduitInput[] | LikeUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutProduitInput | LikeCreateOrConnectWithoutProduitInput[]
    createMany?: LikeCreateManyProduitInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<CartItemCreateWithoutProduitInput, CartItemUncheckedCreateWithoutProduitInput> | CartItemCreateWithoutProduitInput[] | CartItemUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProduitInput | CartItemCreateOrConnectWithoutProduitInput[]
    createMany?: CartItemCreateManyProduitInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type EnumTailleFieldUpdateOperationsInput = {
    set?: $Enums.Taille
  }

  export type CategorieUpdateOneRequiredWithoutProduitsNestedInput = {
    create?: XOR<CategorieCreateWithoutProduitsInput, CategorieUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutProduitsInput
    upsert?: CategorieUpsertWithoutProduitsInput
    connect?: CategorieWhereUniqueInput
    update?: XOR<XOR<CategorieUpdateToOneWithWhereWithoutProduitsInput, CategorieUpdateWithoutProduitsInput>, CategorieUncheckedUpdateWithoutProduitsInput>
  }

  export type CouleurUpdateOneRequiredWithoutProduitsNestedInput = {
    create?: XOR<CouleurCreateWithoutProduitsInput, CouleurUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: CouleurCreateOrConnectWithoutProduitsInput
    upsert?: CouleurUpsertWithoutProduitsInput
    connect?: CouleurWhereUniqueInput
    update?: XOR<XOR<CouleurUpdateToOneWithWhereWithoutProduitsInput, CouleurUpdateWithoutProduitsInput>, CouleurUncheckedUpdateWithoutProduitsInput>
  }

  export type LigneCommandeUpdateManyWithoutProduitNestedInput = {
    create?: XOR<LigneCommandeCreateWithoutProduitInput, LigneCommandeUncheckedCreateWithoutProduitInput> | LigneCommandeCreateWithoutProduitInput[] | LigneCommandeUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LigneCommandeCreateOrConnectWithoutProduitInput | LigneCommandeCreateOrConnectWithoutProduitInput[]
    upsert?: LigneCommandeUpsertWithWhereUniqueWithoutProduitInput | LigneCommandeUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: LigneCommandeCreateManyProduitInputEnvelope
    set?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    disconnect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    delete?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    connect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    update?: LigneCommandeUpdateWithWhereUniqueWithoutProduitInput | LigneCommandeUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: LigneCommandeUpdateManyWithWhereWithoutProduitInput | LigneCommandeUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: LigneCommandeScalarWhereInput | LigneCommandeScalarWhereInput[]
  }

  export type UsersUpdateOneWithoutProduitsVendusNestedInput = {
    create?: XOR<UsersCreateWithoutProduitsVendusInput, UsersUncheckedCreateWithoutProduitsVendusInput>
    connectOrCreate?: UsersCreateOrConnectWithoutProduitsVendusInput
    upsert?: UsersUpsertWithoutProduitsVendusInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutProduitsVendusInput, UsersUpdateWithoutProduitsVendusInput>, UsersUncheckedUpdateWithoutProduitsVendusInput>
  }

  export type LikeUpdateManyWithoutProduitNestedInput = {
    create?: XOR<LikeCreateWithoutProduitInput, LikeUncheckedCreateWithoutProduitInput> | LikeCreateWithoutProduitInput[] | LikeUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutProduitInput | LikeCreateOrConnectWithoutProduitInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutProduitInput | LikeUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: LikeCreateManyProduitInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutProduitInput | LikeUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutProduitInput | LikeUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutProduitNestedInput = {
    create?: XOR<CartItemCreateWithoutProduitInput, CartItemUncheckedCreateWithoutProduitInput> | CartItemCreateWithoutProduitInput[] | CartItemUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProduitInput | CartItemCreateOrConnectWithoutProduitInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProduitInput | CartItemUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: CartItemCreateManyProduitInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProduitInput | CartItemUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProduitInput | CartItemUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LigneCommandeUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<LigneCommandeCreateWithoutProduitInput, LigneCommandeUncheckedCreateWithoutProduitInput> | LigneCommandeCreateWithoutProduitInput[] | LigneCommandeUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LigneCommandeCreateOrConnectWithoutProduitInput | LigneCommandeCreateOrConnectWithoutProduitInput[]
    upsert?: LigneCommandeUpsertWithWhereUniqueWithoutProduitInput | LigneCommandeUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: LigneCommandeCreateManyProduitInputEnvelope
    set?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    disconnect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    delete?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    connect?: LigneCommandeWhereUniqueInput | LigneCommandeWhereUniqueInput[]
    update?: LigneCommandeUpdateWithWhereUniqueWithoutProduitInput | LigneCommandeUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: LigneCommandeUpdateManyWithWhereWithoutProduitInput | LigneCommandeUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: LigneCommandeScalarWhereInput | LigneCommandeScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<LikeCreateWithoutProduitInput, LikeUncheckedCreateWithoutProduitInput> | LikeCreateWithoutProduitInput[] | LikeUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutProduitInput | LikeCreateOrConnectWithoutProduitInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutProduitInput | LikeUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: LikeCreateManyProduitInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutProduitInput | LikeUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutProduitInput | LikeUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<CartItemCreateWithoutProduitInput, CartItemUncheckedCreateWithoutProduitInput> | CartItemCreateWithoutProduitInput[] | CartItemUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProduitInput | CartItemCreateOrConnectWithoutProduitInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProduitInput | CartItemUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: CartItemCreateManyProduitInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProduitInput | CartItemUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProduitInput | CartItemUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type ProduitCreateNestedManyWithoutCategorieInput = {
    create?: XOR<ProduitCreateWithoutCategorieInput, ProduitUncheckedCreateWithoutCategorieInput> | ProduitCreateWithoutCategorieInput[] | ProduitUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutCategorieInput | ProduitCreateOrConnectWithoutCategorieInput[]
    createMany?: ProduitCreateManyCategorieInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type ProduitUncheckedCreateNestedManyWithoutCategorieInput = {
    create?: XOR<ProduitCreateWithoutCategorieInput, ProduitUncheckedCreateWithoutCategorieInput> | ProduitCreateWithoutCategorieInput[] | ProduitUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutCategorieInput | ProduitCreateOrConnectWithoutCategorieInput[]
    createMany?: ProduitCreateManyCategorieInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type EnumTypeCategorieFieldUpdateOperationsInput = {
    set?: $Enums.TypeCategorie
  }

  export type ProduitUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<ProduitCreateWithoutCategorieInput, ProduitUncheckedCreateWithoutCategorieInput> | ProduitCreateWithoutCategorieInput[] | ProduitUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutCategorieInput | ProduitCreateOrConnectWithoutCategorieInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutCategorieInput | ProduitUpsertWithWhereUniqueWithoutCategorieInput[]
    createMany?: ProduitCreateManyCategorieInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutCategorieInput | ProduitUpdateWithWhereUniqueWithoutCategorieInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutCategorieInput | ProduitUpdateManyWithWhereWithoutCategorieInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type ProduitUncheckedUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<ProduitCreateWithoutCategorieInput, ProduitUncheckedCreateWithoutCategorieInput> | ProduitCreateWithoutCategorieInput[] | ProduitUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutCategorieInput | ProduitCreateOrConnectWithoutCategorieInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutCategorieInput | ProduitUpsertWithWhereUniqueWithoutCategorieInput[]
    createMany?: ProduitCreateManyCategorieInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutCategorieInput | ProduitUpdateWithWhereUniqueWithoutCategorieInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutCategorieInput | ProduitUpdateManyWithWhereWithoutCategorieInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type ProduitCreateNestedManyWithoutCouleurInput = {
    create?: XOR<ProduitCreateWithoutCouleurInput, ProduitUncheckedCreateWithoutCouleurInput> | ProduitCreateWithoutCouleurInput[] | ProduitUncheckedCreateWithoutCouleurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutCouleurInput | ProduitCreateOrConnectWithoutCouleurInput[]
    createMany?: ProduitCreateManyCouleurInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type ProduitUncheckedCreateNestedManyWithoutCouleurInput = {
    create?: XOR<ProduitCreateWithoutCouleurInput, ProduitUncheckedCreateWithoutCouleurInput> | ProduitCreateWithoutCouleurInput[] | ProduitUncheckedCreateWithoutCouleurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutCouleurInput | ProduitCreateOrConnectWithoutCouleurInput[]
    createMany?: ProduitCreateManyCouleurInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type ProduitUpdateManyWithoutCouleurNestedInput = {
    create?: XOR<ProduitCreateWithoutCouleurInput, ProduitUncheckedCreateWithoutCouleurInput> | ProduitCreateWithoutCouleurInput[] | ProduitUncheckedCreateWithoutCouleurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutCouleurInput | ProduitCreateOrConnectWithoutCouleurInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutCouleurInput | ProduitUpsertWithWhereUniqueWithoutCouleurInput[]
    createMany?: ProduitCreateManyCouleurInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutCouleurInput | ProduitUpdateWithWhereUniqueWithoutCouleurInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutCouleurInput | ProduitUpdateManyWithWhereWithoutCouleurInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type ProduitUncheckedUpdateManyWithoutCouleurNestedInput = {
    create?: XOR<ProduitCreateWithoutCouleurInput, ProduitUncheckedCreateWithoutCouleurInput> | ProduitCreateWithoutCouleurInput[] | ProduitUncheckedCreateWithoutCouleurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutCouleurInput | ProduitCreateOrConnectWithoutCouleurInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutCouleurInput | ProduitUpsertWithWhereUniqueWithoutCouleurInput[]
    createMany?: ProduitCreateManyCouleurInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutCouleurInput | ProduitUpdateWithWhereUniqueWithoutCouleurInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutCouleurInput | ProduitUpdateManyWithWhereWithoutCouleurInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutLikesInput = {
    create?: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikesInput
    connect?: UsersWhereUniqueInput
  }

  export type ProduitCreateNestedOneWithoutLikesInput = {
    create?: XOR<ProduitCreateWithoutLikesInput, ProduitUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutLikesInput
    connect?: ProduitWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikesInput
    upsert?: UsersUpsertWithoutLikesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutLikesInput, UsersUpdateWithoutLikesInput>, UsersUncheckedUpdateWithoutLikesInput>
  }

  export type ProduitUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<ProduitCreateWithoutLikesInput, ProduitUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutLikesInput
    upsert?: ProduitUpsertWithoutLikesInput
    connect?: ProduitWhereUniqueInput
    update?: XOR<XOR<ProduitUpdateToOneWithWhereWithoutLikesInput, ProduitUpdateWithoutLikesInput>, ProduitUncheckedUpdateWithoutLikesInput>
  }

  export type UsersCreateNestedOneWithoutCartItemsInput = {
    create?: XOR<UsersCreateWithoutCartItemsInput, UsersUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCartItemsInput
    connect?: UsersWhereUniqueInput
  }

  export type ProduitCreateNestedOneWithoutCartItemsInput = {
    create?: XOR<ProduitCreateWithoutCartItemsInput, ProduitUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutCartItemsInput
    connect?: ProduitWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutCartItemsNestedInput = {
    create?: XOR<UsersCreateWithoutCartItemsInput, UsersUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCartItemsInput
    upsert?: UsersUpsertWithoutCartItemsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCartItemsInput, UsersUpdateWithoutCartItemsInput>, UsersUncheckedUpdateWithoutCartItemsInput>
  }

  export type ProduitUpdateOneRequiredWithoutCartItemsNestedInput = {
    create?: XOR<ProduitCreateWithoutCartItemsInput, ProduitUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutCartItemsInput
    upsert?: ProduitUpsertWithoutCartItemsInput
    connect?: ProduitWhereUniqueInput
    update?: XOR<XOR<ProduitUpdateToOneWithWhereWithoutCartItemsInput, ProduitUpdateWithoutCartItemsInput>, ProduitUncheckedUpdateWithoutCartItemsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumMoyenDePayementFilter<$PrismaModel = never> = {
    equals?: $Enums.MoyenDePayement | EnumMoyenDePayementFieldRefInput<$PrismaModel>
    in?: $Enums.MoyenDePayement[] | ListEnumMoyenDePayementFieldRefInput<$PrismaModel>
    notIn?: $Enums.MoyenDePayement[] | ListEnumMoyenDePayementFieldRefInput<$PrismaModel>
    not?: NestedEnumMoyenDePayementFilter<$PrismaModel> | $Enums.MoyenDePayement
  }

  export type NestedEnumMoyenDePayementWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MoyenDePayement | EnumMoyenDePayementFieldRefInput<$PrismaModel>
    in?: $Enums.MoyenDePayement[] | ListEnumMoyenDePayementFieldRefInput<$PrismaModel>
    notIn?: $Enums.MoyenDePayement[] | ListEnumMoyenDePayementFieldRefInput<$PrismaModel>
    not?: NestedEnumMoyenDePayementWithAggregatesFilter<$PrismaModel> | $Enums.MoyenDePayement
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMoyenDePayementFilter<$PrismaModel>
    _max?: NestedEnumMoyenDePayementFilter<$PrismaModel>
  }

  export type NestedEnumTailleFilter<$PrismaModel = never> = {
    equals?: $Enums.Taille | EnumTailleFieldRefInput<$PrismaModel>
    in?: $Enums.Taille[] | ListEnumTailleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Taille[] | ListEnumTailleFieldRefInput<$PrismaModel>
    not?: NestedEnumTailleFilter<$PrismaModel> | $Enums.Taille
  }

  export type NestedEnumTailleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Taille | EnumTailleFieldRefInput<$PrismaModel>
    in?: $Enums.Taille[] | ListEnumTailleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Taille[] | ListEnumTailleFieldRefInput<$PrismaModel>
    not?: NestedEnumTailleWithAggregatesFilter<$PrismaModel> | $Enums.Taille
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTailleFilter<$PrismaModel>
    _max?: NestedEnumTailleFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTypeCategorieFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeCategorie | EnumTypeCategorieFieldRefInput<$PrismaModel>
    in?: $Enums.TypeCategorie[] | ListEnumTypeCategorieFieldRefInput<$PrismaModel>
    notIn?: $Enums.TypeCategorie[] | ListEnumTypeCategorieFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeCategorieFilter<$PrismaModel> | $Enums.TypeCategorie
  }

  export type NestedEnumTypeCategorieWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeCategorie | EnumTypeCategorieFieldRefInput<$PrismaModel>
    in?: $Enums.TypeCategorie[] | ListEnumTypeCategorieFieldRefInput<$PrismaModel>
    notIn?: $Enums.TypeCategorie[] | ListEnumTypeCategorieFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeCategorieWithAggregatesFilter<$PrismaModel> | $Enums.TypeCategorie
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeCategorieFilter<$PrismaModel>
    _max?: NestedEnumTypeCategorieFilter<$PrismaModel>
  }

  export type CommandeCreateWithoutUsersInput = {
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    ligneCommande?: LigneCommandeCreateNestedManyWithoutCommandeInput
    payement?: PayementCreateNestedManyWithoutCommandeInput
  }

  export type CommandeUncheckedCreateWithoutUsersInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutCommandeInput
    payement?: PayementUncheckedCreateNestedManyWithoutCommandeInput
  }

  export type CommandeCreateOrConnectWithoutUsersInput = {
    where: CommandeWhereUniqueInput
    create: XOR<CommandeCreateWithoutUsersInput, CommandeUncheckedCreateWithoutUsersInput>
  }

  export type CommandeCreateManyUsersInputEnvelope = {
    data: CommandeCreateManyUsersInput | CommandeCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ProduitCreateWithoutVendeurInput = {
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorie: CategorieCreateNestedOneWithoutProduitsInput
    couleur: CouleurCreateNestedOneWithoutProduitsInput
    ligneCommande?: LigneCommandeCreateNestedManyWithoutProduitInput
    likes?: LikeCreateNestedManyWithoutProduitInput
    cartItems?: CartItemCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutVendeurInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    couleurId: number
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutProduitInput
    likes?: LikeUncheckedCreateNestedManyWithoutProduitInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutVendeurInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutVendeurInput, ProduitUncheckedCreateWithoutVendeurInput>
  }

  export type ProduitCreateManyVendeurInputEnvelope = {
    data: ProduitCreateManyVendeurInput | ProduitCreateManyVendeurInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutUsersInput = {
    createdAt?: Date | string
    produit: ProduitCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutUsersInput = {
    id?: number
    produitId: number
    createdAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutUsersInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutUsersInput, LikeUncheckedCreateWithoutUsersInput>
  }

  export type LikeCreateManyUsersInputEnvelope = {
    data: LikeCreateManyUsersInput | LikeCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type CartItemCreateWithoutUsersInput = {
    quantite?: number
    createdAt?: Date | string
    produit: ProduitCreateNestedOneWithoutCartItemsInput
  }

  export type CartItemUncheckedCreateWithoutUsersInput = {
    id?: number
    produitId: number
    quantite?: number
    createdAt?: Date | string
  }

  export type CartItemCreateOrConnectWithoutUsersInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutUsersInput, CartItemUncheckedCreateWithoutUsersInput>
  }

  export type CartItemCreateManyUsersInputEnvelope = {
    data: CartItemCreateManyUsersInput | CartItemCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    vendeur: UsersCreateNestedOneWithoutVendeurReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: number
    vendeurId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutVendeurInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    user: UsersCreateNestedOneWithoutAuthoredReviewsInput
  }

  export type ReviewUncheckedCreateWithoutVendeurInput = {
    id?: number
    userId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutVendeurInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutVendeurInput, ReviewUncheckedCreateWithoutVendeurInput>
  }

  export type ReviewCreateManyVendeurInputEnvelope = {
    data: ReviewCreateManyVendeurInput | ReviewCreateManyVendeurInput[]
    skipDuplicates?: boolean
  }

  export type CommandeUpsertWithWhereUniqueWithoutUsersInput = {
    where: CommandeWhereUniqueInput
    update: XOR<CommandeUpdateWithoutUsersInput, CommandeUncheckedUpdateWithoutUsersInput>
    create: XOR<CommandeCreateWithoutUsersInput, CommandeUncheckedCreateWithoutUsersInput>
  }

  export type CommandeUpdateWithWhereUniqueWithoutUsersInput = {
    where: CommandeWhereUniqueInput
    data: XOR<CommandeUpdateWithoutUsersInput, CommandeUncheckedUpdateWithoutUsersInput>
  }

  export type CommandeUpdateManyWithWhereWithoutUsersInput = {
    where: CommandeScalarWhereInput
    data: XOR<CommandeUpdateManyMutationInput, CommandeUncheckedUpdateManyWithoutUsersInput>
  }

  export type CommandeScalarWhereInput = {
    AND?: CommandeScalarWhereInput | CommandeScalarWhereInput[]
    OR?: CommandeScalarWhereInput[]
    NOT?: CommandeScalarWhereInput | CommandeScalarWhereInput[]
    id?: IntFilter<"Commande"> | number
    montant?: DecimalFilter<"Commande"> | Decimal | DecimalJsLike | number | string
    localisation?: StringNullableFilter<"Commande"> | string | null
    date?: DateTimeFilter<"Commande"> | Date | string
    status?: EnumStatusFilter<"Commande"> | $Enums.Status
    usersId?: IntFilter<"Commande"> | number
  }

  export type ProduitUpsertWithWhereUniqueWithoutVendeurInput = {
    where: ProduitWhereUniqueInput
    update: XOR<ProduitUpdateWithoutVendeurInput, ProduitUncheckedUpdateWithoutVendeurInput>
    create: XOR<ProduitCreateWithoutVendeurInput, ProduitUncheckedCreateWithoutVendeurInput>
  }

  export type ProduitUpdateWithWhereUniqueWithoutVendeurInput = {
    where: ProduitWhereUniqueInput
    data: XOR<ProduitUpdateWithoutVendeurInput, ProduitUncheckedUpdateWithoutVendeurInput>
  }

  export type ProduitUpdateManyWithWhereWithoutVendeurInput = {
    where: ProduitScalarWhereInput
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyWithoutVendeurInput>
  }

  export type ProduitScalarWhereInput = {
    AND?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
    OR?: ProduitScalarWhereInput[]
    NOT?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
    id?: IntFilter<"Produit"> | number
    nom?: StringFilter<"Produit"> | string
    description?: StringFilter<"Produit"> | string
    prix?: DecimalFilter<"Produit"> | Decimal | DecimalJsLike | number | string
    image?: StringNullableFilter<"Produit"> | string | null
    taille?: EnumTailleFilter<"Produit"> | $Enums.Taille
    categorieId?: IntFilter<"Produit"> | number
    couleurId?: IntFilter<"Produit"> | number
    vendeurId?: IntNullableFilter<"Produit"> | number | null
  }

  export type LikeUpsertWithWhereUniqueWithoutUsersInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutUsersInput, LikeUncheckedUpdateWithoutUsersInput>
    create: XOR<LikeCreateWithoutUsersInput, LikeUncheckedCreateWithoutUsersInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutUsersInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutUsersInput, LikeUncheckedUpdateWithoutUsersInput>
  }

  export type LikeUpdateManyWithWhereWithoutUsersInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutUsersInput>
  }

  export type LikeScalarWhereInput = {
    AND?: LikeScalarWhereInput | LikeScalarWhereInput[]
    OR?: LikeScalarWhereInput[]
    NOT?: LikeScalarWhereInput | LikeScalarWhereInput[]
    id?: IntFilter<"Like"> | number
    usersId?: IntFilter<"Like"> | number
    produitId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
  }

  export type CartItemUpsertWithWhereUniqueWithoutUsersInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutUsersInput, CartItemUncheckedUpdateWithoutUsersInput>
    create: XOR<CartItemCreateWithoutUsersInput, CartItemUncheckedCreateWithoutUsersInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutUsersInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutUsersInput, CartItemUncheckedUpdateWithoutUsersInput>
  }

  export type CartItemUpdateManyWithWhereWithoutUsersInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutUsersInput>
  }

  export type CartItemScalarWhereInput = {
    AND?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    OR?: CartItemScalarWhereInput[]
    NOT?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    id?: IntFilter<"CartItem"> | number
    usersId?: IntFilter<"CartItem"> | number
    produitId?: IntFilter<"CartItem"> | number
    quantite?: IntFilter<"CartItem"> | number
    createdAt?: DateTimeFilter<"CartItem"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    vendeurId?: IntFilter<"Review"> | number
    userId?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutVendeurInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutVendeurInput, ReviewUncheckedUpdateWithoutVendeurInput>
    create: XOR<ReviewCreateWithoutVendeurInput, ReviewUncheckedCreateWithoutVendeurInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutVendeurInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutVendeurInput, ReviewUncheckedUpdateWithoutVendeurInput>
  }

  export type ReviewUpdateManyWithWhereWithoutVendeurInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutVendeurInput>
  }

  export type UsersCreateWithoutVendeurReviewsInput = {
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitCreateNestedManyWithoutVendeurInput
    likes?: LikeCreateNestedManyWithoutUsersInput
    cartItems?: CartItemCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutVendeurReviewsInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitUncheckedCreateNestedManyWithoutVendeurInput
    likes?: LikeUncheckedCreateNestedManyWithoutUsersInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutVendeurReviewsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutVendeurReviewsInput, UsersUncheckedCreateWithoutVendeurReviewsInput>
  }

  export type UsersCreateWithoutAuthoredReviewsInput = {
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitCreateNestedManyWithoutVendeurInput
    likes?: LikeCreateNestedManyWithoutUsersInput
    cartItems?: CartItemCreateNestedManyWithoutUsersInput
    vendeurReviews?: ReviewCreateNestedManyWithoutVendeurInput
  }

  export type UsersUncheckedCreateWithoutAuthoredReviewsInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitUncheckedCreateNestedManyWithoutVendeurInput
    likes?: LikeUncheckedCreateNestedManyWithoutUsersInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutUsersInput
    vendeurReviews?: ReviewUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type UsersCreateOrConnectWithoutAuthoredReviewsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAuthoredReviewsInput, UsersUncheckedCreateWithoutAuthoredReviewsInput>
  }

  export type UsersUpsertWithoutVendeurReviewsInput = {
    update: XOR<UsersUpdateWithoutVendeurReviewsInput, UsersUncheckedUpdateWithoutVendeurReviewsInput>
    create: XOR<UsersCreateWithoutVendeurReviewsInput, UsersUncheckedCreateWithoutVendeurReviewsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutVendeurReviewsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutVendeurReviewsInput, UsersUncheckedUpdateWithoutVendeurReviewsInput>
  }

  export type UsersUpdateWithoutVendeurReviewsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUpdateManyWithoutVendeurNestedInput
    likes?: LikeUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutVendeurReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUncheckedUpdateManyWithoutVendeurNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersUpsertWithoutAuthoredReviewsInput = {
    update: XOR<UsersUpdateWithoutAuthoredReviewsInput, UsersUncheckedUpdateWithoutAuthoredReviewsInput>
    create: XOR<UsersCreateWithoutAuthoredReviewsInput, UsersUncheckedCreateWithoutAuthoredReviewsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutAuthoredReviewsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutAuthoredReviewsInput, UsersUncheckedUpdateWithoutAuthoredReviewsInput>
  }

  export type UsersUpdateWithoutAuthoredReviewsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUpdateManyWithoutVendeurNestedInput
    likes?: LikeUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUpdateManyWithoutUsersNestedInput
    vendeurReviews?: ReviewUpdateManyWithoutVendeurNestedInput
  }

  export type UsersUncheckedUpdateWithoutAuthoredReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUncheckedUpdateManyWithoutVendeurNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutUsersNestedInput
    vendeurReviews?: ReviewUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type UsersCreateWithoutCommandeInput = {
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    produitsVendus?: ProduitCreateNestedManyWithoutVendeurInput
    likes?: LikeCreateNestedManyWithoutUsersInput
    cartItems?: CartItemCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewCreateNestedManyWithoutVendeurInput
  }

  export type UsersUncheckedCreateWithoutCommandeInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    produitsVendus?: ProduitUncheckedCreateNestedManyWithoutVendeurInput
    likes?: LikeUncheckedCreateNestedManyWithoutUsersInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type UsersCreateOrConnectWithoutCommandeInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCommandeInput, UsersUncheckedCreateWithoutCommandeInput>
  }

  export type LigneCommandeCreateWithoutCommandeInput = {
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    produit: ProduitCreateNestedOneWithoutLigneCommandeInput
  }

  export type LigneCommandeUncheckedCreateWithoutCommandeInput = {
    id?: number
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    produitId: number
  }

  export type LigneCommandeCreateOrConnectWithoutCommandeInput = {
    where: LigneCommandeWhereUniqueInput
    create: XOR<LigneCommandeCreateWithoutCommandeInput, LigneCommandeUncheckedCreateWithoutCommandeInput>
  }

  export type LigneCommandeCreateManyCommandeInputEnvelope = {
    data: LigneCommandeCreateManyCommandeInput | LigneCommandeCreateManyCommandeInput[]
    skipDuplicates?: boolean
  }

  export type PayementCreateWithoutCommandeInput = {
    montant: Decimal | DecimalJsLike | number | string
    moyenDePayement: $Enums.MoyenDePayement
  }

  export type PayementUncheckedCreateWithoutCommandeInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    moyenDePayement: $Enums.MoyenDePayement
  }

  export type PayementCreateOrConnectWithoutCommandeInput = {
    where: PayementWhereUniqueInput
    create: XOR<PayementCreateWithoutCommandeInput, PayementUncheckedCreateWithoutCommandeInput>
  }

  export type PayementCreateManyCommandeInputEnvelope = {
    data: PayementCreateManyCommandeInput | PayementCreateManyCommandeInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutCommandeInput = {
    update: XOR<UsersUpdateWithoutCommandeInput, UsersUncheckedUpdateWithoutCommandeInput>
    create: XOR<UsersCreateWithoutCommandeInput, UsersUncheckedCreateWithoutCommandeInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCommandeInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCommandeInput, UsersUncheckedUpdateWithoutCommandeInput>
  }

  export type UsersUpdateWithoutCommandeInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    produitsVendus?: ProduitUpdateManyWithoutVendeurNestedInput
    likes?: LikeUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUpdateManyWithoutVendeurNestedInput
  }

  export type UsersUncheckedUpdateWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    produitsVendus?: ProduitUncheckedUpdateManyWithoutVendeurNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type LigneCommandeUpsertWithWhereUniqueWithoutCommandeInput = {
    where: LigneCommandeWhereUniqueInput
    update: XOR<LigneCommandeUpdateWithoutCommandeInput, LigneCommandeUncheckedUpdateWithoutCommandeInput>
    create: XOR<LigneCommandeCreateWithoutCommandeInput, LigneCommandeUncheckedCreateWithoutCommandeInput>
  }

  export type LigneCommandeUpdateWithWhereUniqueWithoutCommandeInput = {
    where: LigneCommandeWhereUniqueInput
    data: XOR<LigneCommandeUpdateWithoutCommandeInput, LigneCommandeUncheckedUpdateWithoutCommandeInput>
  }

  export type LigneCommandeUpdateManyWithWhereWithoutCommandeInput = {
    where: LigneCommandeScalarWhereInput
    data: XOR<LigneCommandeUpdateManyMutationInput, LigneCommandeUncheckedUpdateManyWithoutCommandeInput>
  }

  export type LigneCommandeScalarWhereInput = {
    AND?: LigneCommandeScalarWhereInput | LigneCommandeScalarWhereInput[]
    OR?: LigneCommandeScalarWhereInput[]
    NOT?: LigneCommandeScalarWhereInput | LigneCommandeScalarWhereInput[]
    id?: IntFilter<"LigneCommande"> | number
    prixUnitaire?: DecimalFilter<"LigneCommande"> | Decimal | DecimalJsLike | number | string
    quantite?: IntFilter<"LigneCommande"> | number
    total?: DecimalFilter<"LigneCommande"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"LigneCommande"> | Date | string
    commandeId?: IntFilter<"LigneCommande"> | number
    produitId?: IntFilter<"LigneCommande"> | number
  }

  export type PayementUpsertWithWhereUniqueWithoutCommandeInput = {
    where: PayementWhereUniqueInput
    update: XOR<PayementUpdateWithoutCommandeInput, PayementUncheckedUpdateWithoutCommandeInput>
    create: XOR<PayementCreateWithoutCommandeInput, PayementUncheckedCreateWithoutCommandeInput>
  }

  export type PayementUpdateWithWhereUniqueWithoutCommandeInput = {
    where: PayementWhereUniqueInput
    data: XOR<PayementUpdateWithoutCommandeInput, PayementUncheckedUpdateWithoutCommandeInput>
  }

  export type PayementUpdateManyWithWhereWithoutCommandeInput = {
    where: PayementScalarWhereInput
    data: XOR<PayementUpdateManyMutationInput, PayementUncheckedUpdateManyWithoutCommandeInput>
  }

  export type PayementScalarWhereInput = {
    AND?: PayementScalarWhereInput | PayementScalarWhereInput[]
    OR?: PayementScalarWhereInput[]
    NOT?: PayementScalarWhereInput | PayementScalarWhereInput[]
    id?: IntFilter<"Payement"> | number
    montant?: DecimalFilter<"Payement"> | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFilter<"Payement"> | $Enums.MoyenDePayement
    commandeId?: IntFilter<"Payement"> | number
  }

  export type CommandeCreateWithoutPayementInput = {
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    users: UsersCreateNestedOneWithoutCommandeInput
    ligneCommande?: LigneCommandeCreateNestedManyWithoutCommandeInput
  }

  export type CommandeUncheckedCreateWithoutPayementInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    usersId: number
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutCommandeInput
  }

  export type CommandeCreateOrConnectWithoutPayementInput = {
    where: CommandeWhereUniqueInput
    create: XOR<CommandeCreateWithoutPayementInput, CommandeUncheckedCreateWithoutPayementInput>
  }

  export type CommandeUpsertWithoutPayementInput = {
    update: XOR<CommandeUpdateWithoutPayementInput, CommandeUncheckedUpdateWithoutPayementInput>
    create: XOR<CommandeCreateWithoutPayementInput, CommandeUncheckedCreateWithoutPayementInput>
    where?: CommandeWhereInput
  }

  export type CommandeUpdateToOneWithWhereWithoutPayementInput = {
    where?: CommandeWhereInput
    data: XOR<CommandeUpdateWithoutPayementInput, CommandeUncheckedUpdateWithoutPayementInput>
  }

  export type CommandeUpdateWithoutPayementInput = {
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    users?: UsersUpdateOneRequiredWithoutCommandeNestedInput
    ligneCommande?: LigneCommandeUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeUncheckedUpdateWithoutPayementInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    usersId?: IntFieldUpdateOperationsInput | number
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeCreateWithoutLigneCommandeInput = {
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    users: UsersCreateNestedOneWithoutCommandeInput
    payement?: PayementCreateNestedManyWithoutCommandeInput
  }

  export type CommandeUncheckedCreateWithoutLigneCommandeInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
    usersId: number
    payement?: PayementUncheckedCreateNestedManyWithoutCommandeInput
  }

  export type CommandeCreateOrConnectWithoutLigneCommandeInput = {
    where: CommandeWhereUniqueInput
    create: XOR<CommandeCreateWithoutLigneCommandeInput, CommandeUncheckedCreateWithoutLigneCommandeInput>
  }

  export type ProduitCreateWithoutLigneCommandeInput = {
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorie: CategorieCreateNestedOneWithoutProduitsInput
    couleur: CouleurCreateNestedOneWithoutProduitsInput
    vendeur?: UsersCreateNestedOneWithoutProduitsVendusInput
    likes?: LikeCreateNestedManyWithoutProduitInput
    cartItems?: CartItemCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutLigneCommandeInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    couleurId: number
    vendeurId?: number | null
    likes?: LikeUncheckedCreateNestedManyWithoutProduitInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutLigneCommandeInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutLigneCommandeInput, ProduitUncheckedCreateWithoutLigneCommandeInput>
  }

  export type CommandeUpsertWithoutLigneCommandeInput = {
    update: XOR<CommandeUpdateWithoutLigneCommandeInput, CommandeUncheckedUpdateWithoutLigneCommandeInput>
    create: XOR<CommandeCreateWithoutLigneCommandeInput, CommandeUncheckedCreateWithoutLigneCommandeInput>
    where?: CommandeWhereInput
  }

  export type CommandeUpdateToOneWithWhereWithoutLigneCommandeInput = {
    where?: CommandeWhereInput
    data: XOR<CommandeUpdateWithoutLigneCommandeInput, CommandeUncheckedUpdateWithoutLigneCommandeInput>
  }

  export type CommandeUpdateWithoutLigneCommandeInput = {
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    users?: UsersUpdateOneRequiredWithoutCommandeNestedInput
    payement?: PayementUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeUncheckedUpdateWithoutLigneCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    usersId?: IntFieldUpdateOperationsInput | number
    payement?: PayementUncheckedUpdateManyWithoutCommandeNestedInput
  }

  export type ProduitUpsertWithoutLigneCommandeInput = {
    update: XOR<ProduitUpdateWithoutLigneCommandeInput, ProduitUncheckedUpdateWithoutLigneCommandeInput>
    create: XOR<ProduitCreateWithoutLigneCommandeInput, ProduitUncheckedCreateWithoutLigneCommandeInput>
    where?: ProduitWhereInput
  }

  export type ProduitUpdateToOneWithWhereWithoutLigneCommandeInput = {
    where?: ProduitWhereInput
    data: XOR<ProduitUpdateWithoutLigneCommandeInput, ProduitUncheckedUpdateWithoutLigneCommandeInput>
  }

  export type ProduitUpdateWithoutLigneCommandeInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorie?: CategorieUpdateOneRequiredWithoutProduitsNestedInput
    couleur?: CouleurUpdateOneRequiredWithoutProduitsNestedInput
    vendeur?: UsersUpdateOneWithoutProduitsVendusNestedInput
    likes?: LikeUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutLigneCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    couleurId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: LikeUncheckedUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type CategorieCreateWithoutProduitsInput = {
    type: $Enums.TypeCategorie
  }

  export type CategorieUncheckedCreateWithoutProduitsInput = {
    id?: number
    type: $Enums.TypeCategorie
  }

  export type CategorieCreateOrConnectWithoutProduitsInput = {
    where: CategorieWhereUniqueInput
    create: XOR<CategorieCreateWithoutProduitsInput, CategorieUncheckedCreateWithoutProduitsInput>
  }

  export type CouleurCreateWithoutProduitsInput = {
    nom: string
  }

  export type CouleurUncheckedCreateWithoutProduitsInput = {
    id?: number
    nom: string
  }

  export type CouleurCreateOrConnectWithoutProduitsInput = {
    where: CouleurWhereUniqueInput
    create: XOR<CouleurCreateWithoutProduitsInput, CouleurUncheckedCreateWithoutProduitsInput>
  }

  export type LigneCommandeCreateWithoutProduitInput = {
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    commande: CommandeCreateNestedOneWithoutLigneCommandeInput
  }

  export type LigneCommandeUncheckedCreateWithoutProduitInput = {
    id?: number
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    commandeId: number
  }

  export type LigneCommandeCreateOrConnectWithoutProduitInput = {
    where: LigneCommandeWhereUniqueInput
    create: XOR<LigneCommandeCreateWithoutProduitInput, LigneCommandeUncheckedCreateWithoutProduitInput>
  }

  export type LigneCommandeCreateManyProduitInputEnvelope = {
    data: LigneCommandeCreateManyProduitInput | LigneCommandeCreateManyProduitInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutProduitsVendusInput = {
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeCreateNestedManyWithoutUsersInput
    likes?: LikeCreateNestedManyWithoutUsersInput
    cartItems?: CartItemCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewCreateNestedManyWithoutVendeurInput
  }

  export type UsersUncheckedCreateWithoutProduitsVendusInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedCreateNestedManyWithoutUsersInput
    likes?: LikeUncheckedCreateNestedManyWithoutUsersInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type UsersCreateOrConnectWithoutProduitsVendusInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutProduitsVendusInput, UsersUncheckedCreateWithoutProduitsVendusInput>
  }

  export type LikeCreateWithoutProduitInput = {
    createdAt?: Date | string
    users: UsersCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutProduitInput = {
    id?: number
    usersId: number
    createdAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutProduitInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutProduitInput, LikeUncheckedCreateWithoutProduitInput>
  }

  export type LikeCreateManyProduitInputEnvelope = {
    data: LikeCreateManyProduitInput | LikeCreateManyProduitInput[]
    skipDuplicates?: boolean
  }

  export type CartItemCreateWithoutProduitInput = {
    quantite?: number
    createdAt?: Date | string
    users: UsersCreateNestedOneWithoutCartItemsInput
  }

  export type CartItemUncheckedCreateWithoutProduitInput = {
    id?: number
    usersId: number
    quantite?: number
    createdAt?: Date | string
  }

  export type CartItemCreateOrConnectWithoutProduitInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutProduitInput, CartItemUncheckedCreateWithoutProduitInput>
  }

  export type CartItemCreateManyProduitInputEnvelope = {
    data: CartItemCreateManyProduitInput | CartItemCreateManyProduitInput[]
    skipDuplicates?: boolean
  }

  export type CategorieUpsertWithoutProduitsInput = {
    update: XOR<CategorieUpdateWithoutProduitsInput, CategorieUncheckedUpdateWithoutProduitsInput>
    create: XOR<CategorieCreateWithoutProduitsInput, CategorieUncheckedCreateWithoutProduitsInput>
    where?: CategorieWhereInput
  }

  export type CategorieUpdateToOneWithWhereWithoutProduitsInput = {
    where?: CategorieWhereInput
    data: XOR<CategorieUpdateWithoutProduitsInput, CategorieUncheckedUpdateWithoutProduitsInput>
  }

  export type CategorieUpdateWithoutProduitsInput = {
    type?: EnumTypeCategorieFieldUpdateOperationsInput | $Enums.TypeCategorie
  }

  export type CategorieUncheckedUpdateWithoutProduitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeCategorieFieldUpdateOperationsInput | $Enums.TypeCategorie
  }

  export type CouleurUpsertWithoutProduitsInput = {
    update: XOR<CouleurUpdateWithoutProduitsInput, CouleurUncheckedUpdateWithoutProduitsInput>
    create: XOR<CouleurCreateWithoutProduitsInput, CouleurUncheckedCreateWithoutProduitsInput>
    where?: CouleurWhereInput
  }

  export type CouleurUpdateToOneWithWhereWithoutProduitsInput = {
    where?: CouleurWhereInput
    data: XOR<CouleurUpdateWithoutProduitsInput, CouleurUncheckedUpdateWithoutProduitsInput>
  }

  export type CouleurUpdateWithoutProduitsInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type CouleurUncheckedUpdateWithoutProduitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type LigneCommandeUpsertWithWhereUniqueWithoutProduitInput = {
    where: LigneCommandeWhereUniqueInput
    update: XOR<LigneCommandeUpdateWithoutProduitInput, LigneCommandeUncheckedUpdateWithoutProduitInput>
    create: XOR<LigneCommandeCreateWithoutProduitInput, LigneCommandeUncheckedCreateWithoutProduitInput>
  }

  export type LigneCommandeUpdateWithWhereUniqueWithoutProduitInput = {
    where: LigneCommandeWhereUniqueInput
    data: XOR<LigneCommandeUpdateWithoutProduitInput, LigneCommandeUncheckedUpdateWithoutProduitInput>
  }

  export type LigneCommandeUpdateManyWithWhereWithoutProduitInput = {
    where: LigneCommandeScalarWhereInput
    data: XOR<LigneCommandeUpdateManyMutationInput, LigneCommandeUncheckedUpdateManyWithoutProduitInput>
  }

  export type UsersUpsertWithoutProduitsVendusInput = {
    update: XOR<UsersUpdateWithoutProduitsVendusInput, UsersUncheckedUpdateWithoutProduitsVendusInput>
    create: XOR<UsersCreateWithoutProduitsVendusInput, UsersUncheckedCreateWithoutProduitsVendusInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutProduitsVendusInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutProduitsVendusInput, UsersUncheckedUpdateWithoutProduitsVendusInput>
  }

  export type UsersUpdateWithoutProduitsVendusInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUpdateManyWithoutUsersNestedInput
    likes?: LikeUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUpdateManyWithoutVendeurNestedInput
  }

  export type UsersUncheckedUpdateWithoutProduitsVendusInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedUpdateManyWithoutUsersNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUsersNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type LikeUpsertWithWhereUniqueWithoutProduitInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutProduitInput, LikeUncheckedUpdateWithoutProduitInput>
    create: XOR<LikeCreateWithoutProduitInput, LikeUncheckedCreateWithoutProduitInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutProduitInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutProduitInput, LikeUncheckedUpdateWithoutProduitInput>
  }

  export type LikeUpdateManyWithWhereWithoutProduitInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutProduitInput>
  }

  export type CartItemUpsertWithWhereUniqueWithoutProduitInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutProduitInput, CartItemUncheckedUpdateWithoutProduitInput>
    create: XOR<CartItemCreateWithoutProduitInput, CartItemUncheckedCreateWithoutProduitInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutProduitInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutProduitInput, CartItemUncheckedUpdateWithoutProduitInput>
  }

  export type CartItemUpdateManyWithWhereWithoutProduitInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutProduitInput>
  }

  export type ProduitCreateWithoutCategorieInput = {
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    couleur: CouleurCreateNestedOneWithoutProduitsInput
    ligneCommande?: LigneCommandeCreateNestedManyWithoutProduitInput
    vendeur?: UsersCreateNestedOneWithoutProduitsVendusInput
    likes?: LikeCreateNestedManyWithoutProduitInput
    cartItems?: CartItemCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutCategorieInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    couleurId: number
    vendeurId?: number | null
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutProduitInput
    likes?: LikeUncheckedCreateNestedManyWithoutProduitInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutCategorieInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutCategorieInput, ProduitUncheckedCreateWithoutCategorieInput>
  }

  export type ProduitCreateManyCategorieInputEnvelope = {
    data: ProduitCreateManyCategorieInput | ProduitCreateManyCategorieInput[]
    skipDuplicates?: boolean
  }

  export type ProduitUpsertWithWhereUniqueWithoutCategorieInput = {
    where: ProduitWhereUniqueInput
    update: XOR<ProduitUpdateWithoutCategorieInput, ProduitUncheckedUpdateWithoutCategorieInput>
    create: XOR<ProduitCreateWithoutCategorieInput, ProduitUncheckedCreateWithoutCategorieInput>
  }

  export type ProduitUpdateWithWhereUniqueWithoutCategorieInput = {
    where: ProduitWhereUniqueInput
    data: XOR<ProduitUpdateWithoutCategorieInput, ProduitUncheckedUpdateWithoutCategorieInput>
  }

  export type ProduitUpdateManyWithWhereWithoutCategorieInput = {
    where: ProduitScalarWhereInput
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyWithoutCategorieInput>
  }

  export type ProduitCreateWithoutCouleurInput = {
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorie: CategorieCreateNestedOneWithoutProduitsInput
    ligneCommande?: LigneCommandeCreateNestedManyWithoutProduitInput
    vendeur?: UsersCreateNestedOneWithoutProduitsVendusInput
    likes?: LikeCreateNestedManyWithoutProduitInput
    cartItems?: CartItemCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutCouleurInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    vendeurId?: number | null
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutProduitInput
    likes?: LikeUncheckedCreateNestedManyWithoutProduitInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutCouleurInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutCouleurInput, ProduitUncheckedCreateWithoutCouleurInput>
  }

  export type ProduitCreateManyCouleurInputEnvelope = {
    data: ProduitCreateManyCouleurInput | ProduitCreateManyCouleurInput[]
    skipDuplicates?: boolean
  }

  export type ProduitUpsertWithWhereUniqueWithoutCouleurInput = {
    where: ProduitWhereUniqueInput
    update: XOR<ProduitUpdateWithoutCouleurInput, ProduitUncheckedUpdateWithoutCouleurInput>
    create: XOR<ProduitCreateWithoutCouleurInput, ProduitUncheckedCreateWithoutCouleurInput>
  }

  export type ProduitUpdateWithWhereUniqueWithoutCouleurInput = {
    where: ProduitWhereUniqueInput
    data: XOR<ProduitUpdateWithoutCouleurInput, ProduitUncheckedUpdateWithoutCouleurInput>
  }

  export type ProduitUpdateManyWithWhereWithoutCouleurInput = {
    where: ProduitScalarWhereInput
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyWithoutCouleurInput>
  }

  export type UsersCreateWithoutLikesInput = {
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitCreateNestedManyWithoutVendeurInput
    cartItems?: CartItemCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewCreateNestedManyWithoutVendeurInput
  }

  export type UsersUncheckedCreateWithoutLikesInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitUncheckedCreateNestedManyWithoutVendeurInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type UsersCreateOrConnectWithoutLikesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
  }

  export type ProduitCreateWithoutLikesInput = {
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorie: CategorieCreateNestedOneWithoutProduitsInput
    couleur: CouleurCreateNestedOneWithoutProduitsInput
    ligneCommande?: LigneCommandeCreateNestedManyWithoutProduitInput
    vendeur?: UsersCreateNestedOneWithoutProduitsVendusInput
    cartItems?: CartItemCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutLikesInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    couleurId: number
    vendeurId?: number | null
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutProduitInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutLikesInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutLikesInput, ProduitUncheckedCreateWithoutLikesInput>
  }

  export type UsersUpsertWithoutLikesInput = {
    update: XOR<UsersUpdateWithoutLikesInput, UsersUncheckedUpdateWithoutLikesInput>
    create: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutLikesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutLikesInput, UsersUncheckedUpdateWithoutLikesInput>
  }

  export type UsersUpdateWithoutLikesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUpdateManyWithoutVendeurNestedInput
    cartItems?: CartItemUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUpdateManyWithoutVendeurNestedInput
  }

  export type UsersUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUncheckedUpdateManyWithoutVendeurNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type ProduitUpsertWithoutLikesInput = {
    update: XOR<ProduitUpdateWithoutLikesInput, ProduitUncheckedUpdateWithoutLikesInput>
    create: XOR<ProduitCreateWithoutLikesInput, ProduitUncheckedCreateWithoutLikesInput>
    where?: ProduitWhereInput
  }

  export type ProduitUpdateToOneWithWhereWithoutLikesInput = {
    where?: ProduitWhereInput
    data: XOR<ProduitUpdateWithoutLikesInput, ProduitUncheckedUpdateWithoutLikesInput>
  }

  export type ProduitUpdateWithoutLikesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorie?: CategorieUpdateOneRequiredWithoutProduitsNestedInput
    couleur?: CouleurUpdateOneRequiredWithoutProduitsNestedInput
    ligneCommande?: LigneCommandeUpdateManyWithoutProduitNestedInput
    vendeur?: UsersUpdateOneWithoutProduitsVendusNestedInput
    cartItems?: CartItemUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    couleurId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type UsersCreateWithoutCartItemsInput = {
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitCreateNestedManyWithoutVendeurInput
    likes?: LikeCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewCreateNestedManyWithoutVendeurInput
  }

  export type UsersUncheckedCreateWithoutCartItemsInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.Role
    token?: string | null
    telephone?: string | null
    photoProfil?: string | null
    typeCouture?: UsersCreatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: string | null
    localisation?: string | null
    specialite?: UsersCreatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedCreateNestedManyWithoutUsersInput
    produitsVendus?: ProduitUncheckedCreateNestedManyWithoutVendeurInput
    likes?: LikeUncheckedCreateNestedManyWithoutUsersInput
    authoredReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    vendeurReviews?: ReviewUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type UsersCreateOrConnectWithoutCartItemsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCartItemsInput, UsersUncheckedCreateWithoutCartItemsInput>
  }

  export type ProduitCreateWithoutCartItemsInput = {
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorie: CategorieCreateNestedOneWithoutProduitsInput
    couleur: CouleurCreateNestedOneWithoutProduitsInput
    ligneCommande?: LigneCommandeCreateNestedManyWithoutProduitInput
    vendeur?: UsersCreateNestedOneWithoutProduitsVendusInput
    likes?: LikeCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutCartItemsInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    couleurId: number
    vendeurId?: number | null
    ligneCommande?: LigneCommandeUncheckedCreateNestedManyWithoutProduitInput
    likes?: LikeUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutCartItemsInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutCartItemsInput, ProduitUncheckedCreateWithoutCartItemsInput>
  }

  export type UsersUpsertWithoutCartItemsInput = {
    update: XOR<UsersUpdateWithoutCartItemsInput, UsersUncheckedUpdateWithoutCartItemsInput>
    create: XOR<UsersCreateWithoutCartItemsInput, UsersUncheckedCreateWithoutCartItemsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCartItemsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCartItemsInput, UsersUncheckedUpdateWithoutCartItemsInput>
  }

  export type UsersUpdateWithoutCartItemsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUpdateManyWithoutVendeurNestedInput
    likes?: LikeUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUpdateManyWithoutVendeurNestedInput
  }

  export type UsersUncheckedUpdateWithoutCartItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photoProfil?: NullableStringFieldUpdateOperationsInput | string | null
    typeCouture?: UsersUpdatetypeCoutureInput | $Enums.TypeCouture[]
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    specialite?: UsersUpdatespecialiteInput | $Enums.Specialite[]
    commande?: CommandeUncheckedUpdateManyWithoutUsersNestedInput
    produitsVendus?: ProduitUncheckedUpdateManyWithoutVendeurNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUsersNestedInput
    authoredReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    vendeurReviews?: ReviewUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type ProduitUpsertWithoutCartItemsInput = {
    update: XOR<ProduitUpdateWithoutCartItemsInput, ProduitUncheckedUpdateWithoutCartItemsInput>
    create: XOR<ProduitCreateWithoutCartItemsInput, ProduitUncheckedCreateWithoutCartItemsInput>
    where?: ProduitWhereInput
  }

  export type ProduitUpdateToOneWithWhereWithoutCartItemsInput = {
    where?: ProduitWhereInput
    data: XOR<ProduitUpdateWithoutCartItemsInput, ProduitUncheckedUpdateWithoutCartItemsInput>
  }

  export type ProduitUpdateWithoutCartItemsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorie?: CategorieUpdateOneRequiredWithoutProduitsNestedInput
    couleur?: CouleurUpdateOneRequiredWithoutProduitsNestedInput
    ligneCommande?: LigneCommandeUpdateManyWithoutProduitNestedInput
    vendeur?: UsersUpdateOneWithoutProduitsVendusNestedInput
    likes?: LikeUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutCartItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    couleurId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutProduitNestedInput
    likes?: LikeUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type CommandeCreateManyUsersInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    localisation?: string | null
    date?: Date | string
    status?: $Enums.Status
  }

  export type ProduitCreateManyVendeurInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    couleurId: number
  }

  export type LikeCreateManyUsersInput = {
    id?: number
    produitId: number
    createdAt?: Date | string
  }

  export type CartItemCreateManyUsersInput = {
    id?: number
    produitId: number
    quantite?: number
    createdAt?: Date | string
  }

  export type ReviewCreateManyUserInput = {
    id?: number
    vendeurId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateManyVendeurInput = {
    id?: number
    userId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type CommandeUpdateWithoutUsersInput = {
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    ligneCommande?: LigneCommandeUpdateManyWithoutCommandeNestedInput
    payement?: PayementUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutCommandeNestedInput
    payement?: PayementUncheckedUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type ProduitUpdateWithoutVendeurInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorie?: CategorieUpdateOneRequiredWithoutProduitsNestedInput
    couleur?: CouleurUpdateOneRequiredWithoutProduitsNestedInput
    ligneCommande?: LigneCommandeUpdateManyWithoutProduitNestedInput
    likes?: LikeUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutVendeurInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    couleurId?: IntFieldUpdateOperationsInput | number
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutProduitNestedInput
    likes?: LikeUncheckedUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateManyWithoutVendeurInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    couleurId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produit?: ProduitUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUpdateWithoutUsersInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produit?: ProduitUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type CartItemUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutUserInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendeur?: UsersUpdateOneRequiredWithoutVendeurReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendeurId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendeurId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutVendeurInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutAuthoredReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutVendeurInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutVendeurInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LigneCommandeCreateManyCommandeInput = {
    id?: number
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    produitId: number
  }

  export type PayementCreateManyCommandeInput = {
    id?: number
    montant: Decimal | DecimalJsLike | number | string
    moyenDePayement: $Enums.MoyenDePayement
  }

  export type LigneCommandeUpdateWithoutCommandeInput = {
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produit?: ProduitUpdateOneRequiredWithoutLigneCommandeNestedInput
  }

  export type LigneCommandeUncheckedUpdateWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type LigneCommandeUncheckedUpdateManyWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type PayementUpdateWithoutCommandeInput = {
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFieldUpdateOperationsInput | $Enums.MoyenDePayement
  }

  export type PayementUncheckedUpdateWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFieldUpdateOperationsInput | $Enums.MoyenDePayement
  }

  export type PayementUncheckedUpdateManyWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moyenDePayement?: EnumMoyenDePayementFieldUpdateOperationsInput | $Enums.MoyenDePayement
  }

  export type LigneCommandeCreateManyProduitInput = {
    id?: number
    prixUnitaire: Decimal | DecimalJsLike | number | string
    quantite: number
    total: Decimal | DecimalJsLike | number | string
    date?: Date | string
    commandeId: number
  }

  export type LikeCreateManyProduitInput = {
    id?: number
    usersId: number
    createdAt?: Date | string
  }

  export type CartItemCreateManyProduitInput = {
    id?: number
    usersId: number
    quantite?: number
    createdAt?: Date | string
  }

  export type LigneCommandeUpdateWithoutProduitInput = {
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commande?: CommandeUpdateOneRequiredWithoutLigneCommandeNestedInput
  }

  export type LigneCommandeUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commandeId?: IntFieldUpdateOperationsInput | number
  }

  export type LigneCommandeUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantite?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commandeId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeUpdateWithoutProduitInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUpdateWithoutProduitInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type CartItemUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProduitCreateManyCategorieInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    couleurId: number
    vendeurId?: number | null
  }

  export type ProduitUpdateWithoutCategorieInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    couleur?: CouleurUpdateOneRequiredWithoutProduitsNestedInput
    ligneCommande?: LigneCommandeUpdateManyWithoutProduitNestedInput
    vendeur?: UsersUpdateOneWithoutProduitsVendusNestedInput
    likes?: LikeUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    couleurId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutProduitNestedInput
    likes?: LikeUncheckedUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateManyWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    couleurId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProduitCreateManyCouleurInput = {
    id?: number
    nom: string
    description: string
    prix: Decimal | DecimalJsLike | number | string
    image?: string | null
    taille: $Enums.Taille
    categorieId: number
    vendeurId?: number | null
  }

  export type ProduitUpdateWithoutCouleurInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorie?: CategorieUpdateOneRequiredWithoutProduitsNestedInput
    ligneCommande?: LigneCommandeUpdateManyWithoutProduitNestedInput
    vendeur?: UsersUpdateOneWithoutProduitsVendusNestedInput
    likes?: LikeUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutCouleurInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
    ligneCommande?: LigneCommandeUncheckedUpdateManyWithoutProduitNestedInput
    likes?: LikeUncheckedUpdateManyWithoutProduitNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateManyWithoutCouleurInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    taille?: EnumTailleFieldUpdateOperationsInput | $Enums.Taille
    categorieId?: IntFieldUpdateOperationsInput | number
    vendeurId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}