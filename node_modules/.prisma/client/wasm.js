
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  email: 'email',
  password: 'password',
  role: 'role',
  token: 'token',
  telephone: 'telephone',
  photoProfil: 'photoProfil',
  typeCouture: 'typeCouture',
  commentaire: 'commentaire',
  localisation: 'localisation',
  specialite: 'specialite'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  vendeurId: 'vendeurId',
  userId: 'userId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.CommandeScalarFieldEnum = {
  id: 'id',
  montant: 'montant',
  localisation: 'localisation',
  date: 'date',
  status: 'status',
  usersId: 'usersId'
};

exports.Prisma.PayementScalarFieldEnum = {
  id: 'id',
  montant: 'montant',
  moyenDePayement: 'moyenDePayement',
  commandeId: 'commandeId'
};

exports.Prisma.LigneCommandeScalarFieldEnum = {
  id: 'id',
  prixUnitaire: 'prixUnitaire',
  quantite: 'quantite',
  total: 'total',
  date: 'date',
  commandeId: 'commandeId',
  produitId: 'produitId'
};

exports.Prisma.ProduitScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  description: 'description',
  prix: 'prix',
  image: 'image',
  taille: 'taille',
  categorieId: 'categorieId',
  couleurId: 'couleurId',
  vendeurId: 'vendeurId'
};

exports.Prisma.CategorieScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.CouleurScalarFieldEnum = {
  id: 'id',
  nom: 'nom'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  usersId: 'usersId',
  produitId: 'produitId',
  createdAt: 'createdAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  usersId: 'usersId',
  produitId: 'produitId',
  quantite: 'quantite',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  client: 'client',
  vendeur: 'vendeur',
  admin: 'admin'
};

exports.TypeCouture = exports.$Enums.TypeCouture = {
  HOMME: 'HOMME',
  FEMME: 'FEMME',
  ENFANT: 'ENFANT',
  MIXTE: 'MIXTE'
};

exports.Specialite = exports.$Enums.Specialite = {
  HauteCouture: 'HauteCouture',
  PretAPorter: 'PretAPorter',
  SurMesure: 'SurMesure',
  Retouche: 'Retouche'
};

exports.Status = exports.$Enums.Status = {
  enAttente: 'enAttente',
  rupture: 'rupture',
  en_cours_pour_la_livraison: 'en_cours_pour_la_livraison'
};

exports.MoyenDePayement = exports.$Enums.MoyenDePayement = {
  Tmoney: 'Tmoney',
  Flooz: 'Flooz'
};

exports.Taille = exports.$Enums.Taille = {
  L: 'L',
  S: 'S',
  M: 'M',
  XL: 'XL',
  XXL: 'XXL',
  XXXL: 'XXXL'
};

exports.TypeCategorie = exports.$Enums.TypeCategorie = {
  Homme: 'Homme',
  Femme: 'Femme',
  Enfant: 'Enfant'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Review: 'Review',
  Commande: 'Commande',
  Payement: 'Payement',
  LigneCommande: 'LigneCommande',
  Produit: 'Produit',
  Categorie: 'Categorie',
  Couleur: 'Couleur',
  Like: 'Like',
  CartItem: 'CartItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
