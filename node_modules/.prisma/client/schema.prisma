generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int           @id @default(autoincrement())
  nom             String
  email           String        @unique
  password        String
  role            Role
  token           String?       @unique
  telephone       String?
  typeCouture     TypeCouture[]
  commentaire     String?
  localisation    String?
  specialite      Specialite[]
  photoProfil     String?
  expoPushToken   String?
  cartItems       CartItem[]
  commande        Commande[]
  likes           Like[]
  produitsVendus  Produit[]
  authoredReviews Review[]      @relation("AuteurReviews")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  productId Int
  product   Produit  @relation("ProductReviews", fields: [productId], references: [id], onDelete: Cascade)
  user      Users    @relation("AuteurReviews", fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Commande {
  id            Int             @id @default(autoincrement())
  montant       Decimal         @db.Decimal(10, 2)
  localisation  String?
  date          DateTime        @default(now())
  status        Status          @default(enAttente)
  usersId       Int
  users         Users           @relation(fields: [usersId], references: [id])
  ligneCommande LigneCommande[]
  payement      Payement?
}

model Payement {
  id              Int             @id @default(autoincrement())
  montant         Decimal         @db.Decimal(10, 2)
  moyenDePayement MoyenDePayement
  commandeId      Int             @unique
  commande        Commande        @relation(fields: [commandeId], references: [id])
}

model LigneCommande {
  id           Int      @id @default(autoincrement())
  prixUnitaire Decimal  @db.Decimal(10, 2)
  quantite     Int
  total        Decimal  @db.Decimal(10, 2)
  date         DateTime @default(now())
  commandeId   Int
  produitId    Int
  commande     Commande @relation(fields: [commandeId], references: [id])
  produit      Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade)
}

model Produit {
  id            Int                @id @default(autoincrement())
  nom           String
  description   String
  prix          Decimal            @db.Decimal(10, 2)
  taille        Taille
  categorieId   Int
  vendeurId     Int?
  video         String?
  enPromotion   Boolean            @default(false)
  prixPromotion Decimal?           @db.Decimal(10, 2)
  cartItems     CartItem[]
  couleurs      CouleurOnProduit[]
  ligneCommande LigneCommande[]
  likes         Like[]
  categorie     Categorie          @relation(fields: [categorieId], references: [id], onDelete: Cascade)
  vendeur       Users?             @relation(fields: [vendeurId], references: [id], onDelete: Cascade)
  tailles       TailleOnProduit[]
  productImages ProductImage[]
  reviews       Review[]           @relation("ProductReviews")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Produit @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Categorie {
  id       Int           @id @default(autoincrement())
  type     TypeCategorie
  produits Produit[]
}

model Couleur {
  id       Int                @id @default(autoincrement())
  nom      String             @unique
  hex      String?
  produits CouleurOnProduit[]
}

model CouleurOnProduit {
  produitId Int
  couleurId Int
  couleur   Couleur @relation(fields: [couleurId], references: [id], onDelete: Cascade)
  produit   Produit @relation(fields: [produitId], references: [id], onDelete: Cascade)

  @@id([produitId, couleurId])
}

model TailleOnProduit {
  produitId Int
  taille    Taille
  produit   Produit @relation(fields: [produitId], references: [id], onDelete: Cascade)

  @@id([produitId, taille])
}

model Like {
  id        Int      @id @default(autoincrement())
  usersId   Int
  produitId Int
  createdAt DateTime @default(now())
  produit   Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade)
  users     Users    @relation(fields: [usersId], references: [id], onDelete: Cascade)

  @@unique([usersId, produitId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  usersId   Int
  produitId Int
  quantite  Int      @default(1)
  createdAt DateTime @default(now())
  produit   Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade)
  users     Users    @relation(fields: [usersId], references: [id], onDelete: Cascade)

  @@unique([usersId, produitId])
}

enum Role {
  client
  vendeur
  admin
}

enum Status {
  enAttente
  rupture
  en_cours_pour_la_livraison
  annulee
  livree
}

enum MoyenDePayement {
  Tmoney
  Flooz
}

enum Taille {
  L
  S
  M
  XL
  XXL
  XXXL
}

enum TypeCategorie {
  Homme
  Femme
  Enfant
}

enum TypeCouture {
  HOMME
  FEMME
  ENFANT
  MIXTE
}

enum Specialite {
  HauteCouture
  PretAPorter
  SurMesure
  Retouche
}
