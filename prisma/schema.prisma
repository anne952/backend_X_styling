generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               Int         @id @default(autoincrement())
  nom              String
  email            String      @unique
  password         String
  role             Role
  token            String?     @unique
  expoPushToken    String?
  telephone        String?
  photoProfil      String?
  typeCouture      TypeCouture[]
  commentaire      String?
  localisation     String?
  specialite       Specialite[]
  commande         Commande[]
  produitsVendus   Produit[]
  likes            Like[]
  cartItems        CartItem[]
  authoredReviews  Review[]    @relation("AuteurReviews")
  vendeurReviews   Review[]    @relation("VendeurReviews")
}

model Review {
  id         Int      @id @default(autoincrement())
  vendeurId  Int
  userId     Int
  rating     Int      @db.SmallInt
  comment    String?
  createdAt  DateTime @default(now())
  vendeur    Users    @relation("VendeurReviews", fields: [vendeurId], references: [id], onDelete: Cascade)
  user       Users    @relation("AuteurReviews", fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Commande {
  id              Int             @id @default(autoincrement())
  montant         Decimal         @db.Decimal(10, 2)
  localisation    String?
  date            DateTime        @default(now())
  status          Status          @default(enAttente)
  usersId         Int
  users           Users           @relation(fields: [usersId], references: [id])
  ligneCommande   LigneCommande[]
  payement        Payement[]
}

model Payement {
  id              Int             @id @default(autoincrement())
  montant         Decimal         @db.Decimal(10, 2)
  moyenDePayement MoyenDePayement
  commandeId      Int             @unique
  commande        Commande        @relation(fields: [commandeId], references: [id])
}

model LigneCommande {
  id           Int      @id @default(autoincrement())
  prixUnitaire Decimal  @db.Decimal(10, 2)
  quantite     Int
  total        Decimal  @db.Decimal(10, 2)
  date         DateTime @default(now())
  commandeId   Int
  commande     Commande @relation(fields: [commandeId], references: [id])
  produitId    Int
  produit      Produit  @relation(fields: [produitId], references: [id])
}

model Produit {
  id             Int             @id @default(autoincrement())
  nom            String
  description    String
  prix           Decimal         @db.Decimal(10, 2)
  image          String?
  taille         Taille
  categorieId    Int
  categorie      Categorie       @relation(fields: [categorieId], references: [id])
  couleurId      Int
  couleur        Couleur         @relation(fields: [couleurId], references: [id])
  ligneCommande  LigneCommande[]
  vendeurId      Int?
  vendeur        Users?          @relation(fields: [vendeurId], references: [id])
  likes          Like[]
  cartItems      CartItem[]
}

model Categorie {
  id        Int       @id @default(autoincrement())
  type      TypeCategorie
  produits  Produit[]
}

model Couleur {
  id        Int      @id @default(autoincrement())
  nom       String   @unique
  produits  Produit[]
}

model Like {
  id         Int      @id @default(autoincrement())
  usersId    Int
  produitId  Int
  createdAt  DateTime @default(now())
  users      Users    @relation(fields: [usersId], references: [id])
  produit    Produit  @relation(fields: [produitId], references: [id])

  @@unique([usersId, produitId])
}

model CartItem {
  id         Int      @id @default(autoincrement())
  usersId    Int
  produitId  Int
  quantite   Int      @default(1)
  createdAt  DateTime @default(now())
  users      Users    @relation(fields: [usersId], references: [id])
  produit    Produit  @relation(fields: [produitId], references: [id])

  @@unique([usersId, produitId])
}

enum Role {
  client
  vendeur
  admin
}

enum Status {
  enAttente
  rupture
  en_cours_pour_la_livraison
  annulee
  livree
}

enum MoyenDePayement {
  Tmoney
  Flooz
}

enum Taille {
  L
  S
  M
  XL
  XXL
  XXXL
}

enum TypeCategorie {
  Homme
  Femme
  Enfant
}

enum TypeCouture {
  HOMME
  FEMME
  ENFANT
  MIXTE
}

enum Specialite {
  HauteCouture
  PretAPorter
  SurMesure
  Retouche
} 